open Maps
let doc = Dom_html.document
let win = Dom_html.window

let my_position_img = "myposition.png"

let data_to_str nb =
  match nb with
  | None -> 0.
  | Some x -> x

let create_paragraph str =
  let p = Dom_html.createP doc in
  p##.innerHTML := Js.string str;
  Dom.appendChild doc##.body p

let create_initial_map () =
  let width = Js.Optdef.get (win##.innerWidth) (fun () -> 300) in
  let width = (string_of_int width)^"px" in
  let div = Dom_html.createDiv doc in
  let () = div##.style##.width := Js.string width in
  let () = div##.style##.height := Js.string "500px" in
  let () = div##.id := Js.string "gmap" in
  Dom.appendChild doc##.body div

let create_position map =
  let icon = Icon.create
      ~url:my_position_img
      ()
  in
  let opts = MarkerOptions.create
      ~map:map
      ~draggable:false
      ~clickable:true
      ~title:"Ma position"
      ~icon
      ~visible:false
      ~z_index:10.
      ()
  in
  Marker.new_marker ~opts ()

let create_path map =
  (** Creating path buttons **)
  let start_path = Dom_html.createButton doc in
  let stop_path  = Dom_html.createButton doc in
  start_path##.innerHTML := Js.string "Start path";
  stop_path##.innerHTML := Js.string "Stop path";
  Dom.appendChild doc##.body start_path;
  Dom.appendChild doc##.body stop_path;
  (** Creating the poyline **)
  let opts = PolylineOptions.create
      ~map
      ~visible:true
      ~stroke_color:"#555555"
      ~stroke_weight:10.
      () in
  let polyline = Polyline.new_polyline ~opts () in
  (** Binding buttons **)
  let watch_id = ref None in
  let err_cb e =
    Jsoo_lib.alert (Cordova_geolocation.position_error_message e)
  in
  let start_position () =
    Cordova_geolocation.watch_position
      (fun position ->
         let c = Cordova_geolocation.coords position in
         (*let time = Cordova_geolocation.timestamp position in*)
         let lat = data_to_str (Cordova_geolocation.latitude  c) in
         let lng = data_to_str (Cordova_geolocation.longitude c) in
         let latlng = LatLng.new_lat_lng lat lng in
         let path = Polyline.get_path polyline in
         let _ = MVCArray.push path (LatLng.t_to_js latlng) in
         ()
      )
      err_cb
      ()
  in
  Lwt.async
    (fun () ->
       Lwt_js_events.clicks start_path
         (fun _ _ ->
            let id = start_position () in
            watch_id := Some(id);
            Lwt.return ()
         )
    );
  Lwt.async
  ( fun () ->
    Lwt_js_events.clicks stop_path
    ( fun _ _ ->
      let () =
        match !watch_id with
        | None -> ()
        | Some i -> (watch_id:=None ;
                     Cordova_geolocation.clear_watch i)
      in
      Lwt.return ())
  )

let on_device_ready () =
  (** Creating initial map **)
  create_initial_map ();
  let div = Document.get_element_by_id "gmap" in
  let center = LatLng.new_lat_lng 48.867 (2.3524) in
  let prop = MapOptions.create ~center ~zoom:19 ~map_type_id:Roadmap () in
  let map = Map.new_map div ~opts:prop () in

  (** Create buttons **)
  let ma_position = Dom_html.createButton doc in
  let () = ma_position##.innerHTML := Js.string "Ma position" in
  let stop_position = Dom_html.createButton doc in
  let () = stop_position##.innerHTML := Js.string "Stop ma position" in

 (** Adding the buttons to the view **)
  let () = Dom.appendChild doc##.body ma_position in
  let () = Dom.appendChild doc##.body stop_position in

  (** Récupération des données GPS **)
  let watch_id = ref None in
  let position_marker = create_position map in

  let err_cb e =
    Jsoo_lib.alert (Cordova_geolocation.position_error_message e)
  in
  let start_position () =
    Cordova_geolocation.watch_position
      (fun position ->
         let c = Cordova_geolocation.coords position in
         (*let time = Cordova_geolocation.timestamp position in*)
         let lat = data_to_str (Cordova_geolocation.latitude  c) in
         let lng = data_to_str (Cordova_geolocation.longitude c) in
         let latlng = LatLng.new_lat_lng lat lng in
         Marker.set_visible position_marker true;
         Marker.set_position position_marker latlng
      )
      err_cb
      ()
  in
  Lwt.async
    (fun () ->
       Lwt_js_events.clicks ma_position
         (fun _ _ ->
            let id = start_position () in
            watch_id := Some(id);
            Lwt.return ()
         )
    );
  Lwt.async
  ( fun () ->
    Lwt_js_events.clicks stop_position
    ( fun _ _ ->
      let () =
        match !watch_id with
        | None -> ()
        | Some i -> (watch_id:=None ; Cordova_geolocation.clear_watch i)
      in
      Lwt.return ())
  );
  create_path map

let _ = Cordova.Event.device_ready on_device_ready
