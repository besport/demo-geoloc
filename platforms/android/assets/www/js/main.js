// Generated by js_of_ocaml 2.8+git-baffbd1
(function(joo_global_object)
   {"use strict";
     /*<<stdlib.js 974 0>>*/ function caml_array_blit(a1,i1,a2,i2,len)
     { /*<<stdlib.js 975 2>>*/ if(i2<=i1)
        /*<<stdlib.js 975 16>>*/ for
        ( /*<<stdlib.js 976 15>>*/ var j=1;j<=len;j++)
        a2[i2+j]=a1[i1+j];
      else
        /*<<stdlib.js 977 9>>*/ for
        ( /*<<stdlib.js 978 15>>*/ var j=len;j>=1;j--)
        a2[i2+j]=a1[i1+j];
       /*<<stdlib.js 980 2>>*/ return 0 /*<<stdlib.js 981 0>>*/ }
     /*<<stdlib.js 23 0>>*/ function raw_array_sub(a,i,l)
     { /*<<stdlib.js 24 2>>*/  /*<<stdlib.js 24 8>>*/ var b=new Array(l);
       /*<<stdlib.js 25 2>>*/ for( /*<<stdlib.js 25 12>>*/ var j=0;j<l;j++)
       b[j]=a[i+j];
       /*<<stdlib.js 26 2>>*/ return b /*<<stdlib.js 27 0>>*/ }
     /*<<mlString.js 70 0>>*/ function caml_subarray_to_string(a,i,len)
     { /*<<mlString.js 71 2>>*/  /*<<mlString.js 71 8>>*/ var
       f=
        String.fromCharCode;
       /*<<mlString.js 72 2>>*/ if(i==0&&len<=4096&&len==a.length)
        /*<<mlString.js 72 48>>*/ return  /*<<mlString.js 72 55>>*/ f.apply
               (null,a);
       /*<<mlString.js 71 2>>*/  /*<<mlString.js 73 8>>*/ var s="";
       /*<<mlString.js 74 2>>*/ for(;0<len;i+=1024,len-=1024)
       s+=
        /*<<mlString.js 75 9>>*/ f.apply
        (null,
          /*<<mlString.js 75 24>>*/ raw_array_sub
          (a,i, /*<<mlString.js 75 43>>*/ Math.min(len,1024)));
       /*<<mlString.js 76 2>>*/ return s /*<<mlString.js 77 0>>*/ }
     /*<<mlString.js 259 0>>*/ function caml_convert_string_to_array(s)
     { /*<<mlString.js 261 2>>*/ if(joo_global_object.Uint8Array)
        /*<<mlString.js 261 35>>*/  /*<<mlString.js 262 10>>*/ var
        a=
         new (joo_global_object.Uint8Array)(s.l);
      else
        /*<<mlString.js 263 9>>*/  /*<<mlString.js 264 10>>*/ var
        a=
         new Array(s.l);
       /*<<mlString.js 266 2>>*/ var
        /*<<mlString.js 266 8>>*/ b=s.c,
        /*<<mlString.js 266 17>>*/ l=b.length,
        /*<<mlString.js 266 31>>*/ i=0;
       /*<<mlString.js 267 2>>*/ for(;i<l;i++)
       a[i]= /*<<mlString.js 267 28>>*/ b.charCodeAt(i);
       /*<<mlString.js 268 2>>*/ for(l=s.l;i<l;i++)a[i]=0;
      s.c=a;
      s.t=4;
       /*<<mlString.js 271 2>>*/ return a /*<<mlString.js 272 0>>*/ }
     /*<<mlString.js 380 0>>*/ function caml_blit_string(s1,i1,s2,i2,len)
     { /*<<mlString.js 381 2>>*/ if(len==0)
        /*<<mlString.js 381 16>>*/ return 0;
       /*<<mlString.js 382 2>>*/ if
       (i2==0&&(len>=s2.l||s2.t==2&&len>=s2.c.length))
        /*<<mlString.js 383 72>>*/ {s2.c=
        s1.t==4
         ? /*<<mlString.js 385 13>>*/ caml_subarray_to_string(s1.c,i1,len)
         :i1==0&&s1.c.length==len
           ?s1.c
           : /*<<mlString.js 386 50>>*/ s1.c.substr(i1,len);
        s2.t=s2.c.length==s2.l?0:2}
      else
        /*<<mlString.js 388 9>>*/ if(s2.t==2&&i2==s2.c.length)
         /*<<mlString.js 388 59>>*/ {s2.c+=
         s1.t==4
          ? /*<<mlString.js 390 13>>*/ caml_subarray_to_string(s1.c,i1,len)
          :i1==0&&s1.c.length==len
            ?s1.c
            : /*<<mlString.js 391 50>>*/ s1.c.substr(i1,len);
         s2.t=s2.c.length==s2.l?0:2}
       else
         /*<<mlString.js 393 9>>*/ { /*<<mlString.js 394 4>>*/ if(s2.t!=4)
           /*<<mlString.js 394 31>>*/ caml_convert_string_to_array(s2);
          /*<<mlString.js 395 4>>*/ var
           /*<<mlString.js 395 11>>*/ c1=s1.c,
           /*<<mlString.js 395 22>>*/ c2=s2.c;
          /*<<mlString.js 396 4>>*/ if(s1.t==4)
           /*<<mlString.js 397 6>>*/ for
           ( /*<<mlString.js 397 17>>*/ var i=0;i<len;i++)
           c2[i2+i]=c1[i1+i];
         else
           /*<<mlString.js 398 9>>*/ { /*<<mlString.js 399 6>>*/  /*<<mlString.js 399 12>>*/ var
            l=
              /*<<mlString.js 399 14>>*/ Math.min(len,c1.length-i1);
            /*<<mlString.js 400 6>>*/ for
            ( /*<<mlString.js 400 17>>*/ var i=0;i<l;i++)
            c2[i2+i]= /*<<mlString.js 400 48>>*/ c1.charCodeAt(i1+i);
            /*<<mlString.js 401 6>>*/ for(;i<len;i++)c2[i2+i]=0}}
       /*<<mlString.js 404 2>>*/ return 0 /*<<mlString.js 405 0>>*/ }
     /*<<stdlib.js 47 0>>*/ function raw_array_append_one(a,x)
     { /*<<stdlib.js 48 2>>*/ var
        /*<<stdlib.js 48 8>>*/ l=a.length,
        /*<<stdlib.js 49 8>>*/ b=new Array(l+1),
        /*<<stdlib.js 50 8>>*/ i=0;
       /*<<stdlib.js 51 2>>*/ for(;i<l;i++)b[i]=a[i];
      b[i]=x;
       /*<<stdlib.js 53 2>>*/ return b /*<<stdlib.js 54 0>>*/ }
     /*<<stdlib.js 59 0>>*/ function caml_call_gen(f,args)
     { /*<<stdlib.js 60 2>>*/ if(f.fun)
        /*<<stdlib.js 61 4>>*/ return  /*<<stdlib.js 61 11>>*/ caml_call_gen
               (f.fun,args);
       /*<<stdlib.js 62 2>>*/ var
        /*<<stdlib.js 62 8>>*/ n=f.length,
        /*<<stdlib.js 63 14>>*/ argsLen=args.length,
        /*<<stdlib.js 64 8>>*/ d=n-argsLen;
       /*<<stdlib.js 65 2>>*/ if(d==0)
        /*<<stdlib.js 66 4>>*/ return  /*<<stdlib.js 66 11>>*/ f.apply
               (null,args);
      else
        /*<<stdlib.js 67 7>>*/ if(d<0)
         /*<<stdlib.js 68 4>>*/ return  /*<<stdlib.js 68 11>>*/ caml_call_gen
                ( /*<<stdlib.js 68 25>>*/ f.apply
                  (null, /*<<stdlib.js 69 33>>*/ raw_array_sub(args,0,n)),
                  /*<<stdlib.js 70 25>>*/ raw_array_sub(args,n,argsLen-n));
       else
         /*<<stdlib.js 72 4>>*/ return function(x)
         { /*<<stdlib.js 72 25>>*/ return  /*<<stdlib.js 72 32>>*/ caml_call_gen
                  (f, /*<<stdlib.js 72 49>>*/ raw_array_append_one(args,x)) /*<<stdlib.js 72 11>>*/ } /*<<stdlib.js 73 0>>*/ }
     /*<<stdlib.js 125 0>>*/ function caml_raise_with_arg(tag,arg)
     { /*<<stdlib.js 125 42>>*/ throw [0,tag,arg] /*<<stdlib.js 125 63>>*/ }
     /*<<mlString.js 50 0>>*/ function caml_str_repeat(n,s)
     { /*<<mlString.js 51 2>>*/ if(s.repeat)
        /*<<mlString.js 51 16>>*/ return  /*<<mlString.js 51 23>>*/ s.repeat
               (n);
       /*<<mlString.js 52 2>>*/ var
        /*<<mlString.js 52 8>>*/ r="",
        /*<<mlString.js 52 16>>*/ l=0;
       /*<<mlString.js 53 2>>*/ if(n==0) /*<<mlString.js 53 14>>*/ return r;
       /*<<mlString.js 54 2>>*/ for(;;)
        /*<<mlString.js 54 10>>*/ { /*<<mlString.js 55 4>>*/ if(n&1)r+=s;
        n>>=1;
         /*<<mlString.js 57 4>>*/ if(n==0) /*<<mlString.js 57 16>>*/ return r;
        s+=s;
        l++;
         /*<<mlString.js 60 4>>*/ if(l==9)
          /*<<mlString.js 60 16>>*/  /*<<mlString.js 61 6>>*/ s.slice(0,1)} /*<<mlString.js 66 0>>*/ }
     /*<<mlString.js 249 0>>*/ function caml_convert_string_to_bytes(s)
     { /*<<mlString.js 251 2>>*/ if(s.t==2)
       s.c+= /*<<mlString.js 252 11>>*/ caml_str_repeat(s.l-s.c.length,"\0");
      else
       s.c=
        /*<<mlString.js 254 10>>*/ caml_subarray_to_string(s.c,0,s.c.length);
      s.t=0 /*<<mlString.js 256 0>>*/ }
     /*<<mlString.js 162 0>>*/ function caml_is_ascii(s)
     { /*<<mlString.js 164 2>>*/ if(s.length<24)
        /*<<mlString.js 164 21>>*/ { /*<<mlString.js 166 4>>*/ for
         ( /*<<mlString.js 166 15>>*/ var i=0;i<s.length;i++)
          /*<<mlString.js 166 39>>*/ if
          ( /*<<mlString.js 166 43>>*/ s.charCodeAt(i)>127)
           /*<<mlString.js 166 66>>*/ return false;
         /*<<mlString.js 167 4>>*/ return true}
      else
        /*<<mlString.js 169 4>>*/ return ! /*<<mlString.js 169 12>>*/ /[^\x00-\x7f]/.test
               (s) /*<<mlString.js 170 0>>*/ }
     /*<<mlString.js 115 0>>*/ function caml_utf16_of_utf8(s)
     { /*<<mlString.js 116 2>>*/ for
       (var
          /*<<mlString.js 116 13>>*/ b="",
          /*<<mlString.js 116 21>>*/ t="",
         c,
         c1,
         c2,
         v,
          /*<<mlString.js 116 43>>*/ i=0,
          /*<<mlString.js 116 50>>*/ l=s.length;
        i<
        l;
        i++)
        /*<<mlString.js 116 74>>*/ {c1=
         /*<<mlString.js 117 9>>*/ s.charCodeAt(i);
         /*<<mlString.js 118 4>>*/ if(c1<128)
          /*<<mlString.js 118 19>>*/ { /*<<mlString.js 119 6>>*/ for
           ( /*<<mlString.js 119 17>>*/ var j=i+1;
            j<
            l&&
            (c1= /*<<mlString.js 119 43>>*/ s.charCodeAt(j))<
            128;
            j++)
            /*<<mlString.js 119 72>>*/ ;
           /*<<mlString.js 120 6>>*/ if(j-i>512)
            /*<<mlString.js 120 23>>*/ { /*<<mlString.js 120 25>>*/ t.substr
             (0,1);
            b+=t;
            t="";
            b+= /*<<mlString.js 120 62>>*/ s.slice(i,j)}
          else
           t+= /*<<mlString.js 121 16>>*/ s.slice(i,j);
           /*<<mlString.js 122 6>>*/ if(j==l)
            /*<<mlString.js 122 18>>*/ break;
          i=j}
        v=1;
         /*<<mlString.js 126 4>>*/ if
         (++i<l&&((c2= /*<<mlString.js 126 29>>*/ s.charCodeAt(i))&-64)==128)
          /*<<mlString.js 126 62>>*/ {c=c2+(c1<<6);
           /*<<mlString.js 128 6>>*/ if(c1<224)
            /*<<mlString.js 128 21>>*/ {v=c-12416;
             /*<<mlString.js 130 8>>*/ if(v<128)v=1}
          else
            /*<<mlString.js 131 13>>*/ {v=2;
             /*<<mlString.js 133 8>>*/ if
             (++i<
              l&&
              ((c2= /*<<mlString.js 133 33>>*/ s.charCodeAt(i))&-64)==
              128)
              /*<<mlString.js 133 66>>*/ {c=c2+(c<<6);
               /*<<mlString.js 135 10>>*/ if(c1<240)
                /*<<mlString.js 135 25>>*/ {v=c-925824;
                 /*<<mlString.js 137 12>>*/ if(v<2048||v>=55295&&v<57344)v=2}
              else
                /*<<mlString.js 138 17>>*/ {v=3;
                 /*<<mlString.js 140 14>>*/ if
                 (++i<
                  l&&
                  ((c2= /*<<mlString.js 140 39>>*/ s.charCodeAt(i))&-64)==
                  128&&
                  c1<
                  245)
                  /*<<mlString.js 141 31>>*/ {v=c2-63447168+(c<<6);
                   /*<<mlString.js 143 16>>*/ if(v<65536||v>1114111)v=3}}}}}
         /*<<mlString.js 149 4>>*/ if(v<4)
          /*<<mlString.js 149 15>>*/ {i-=v;t+="\ufffd"}
        else
          /*<<mlString.js 152 11>>*/ if(v>65535)
          t+=
           /*<<mlString.js 153 11>>*/ String.fromCharCode
           (55232+(v>>10),56320+(v&1023));
         else
          t+= /*<<mlString.js 155 11>>*/ String.fromCharCode(v);
         /*<<mlString.js 156 4>>*/ if(t.length>1024)
          /*<<mlString.js 156 25>>*/ { /*<<mlString.js 156 26>>*/ t.substr
           (0,1);
          b+=t;
          t=""}}
       /*<<mlString.js 158 2>>*/ return b+t /*<<mlString.js 159 0>>*/ }
     /*<<mlString.js 174 0>>*/ function caml_to_js_string(s)
     { /*<<mlString.js 175 2>>*/ switch(s.t)
       {case 9: /*<<mlString.js 177 4>>*/ return s.c;
        default: /*<<mlString.js 179 4>>*/ caml_convert_string_to_bytes(s);case 0:
          /*<<mlString.js 181 4>>*/ if
          ( /*<<mlString.js 181 8>>*/ caml_is_ascii(s.c))
           /*<<mlString.js 181 28>>*/ {s.t=9;
            /*<<mlString.js 183 6>>*/ return s.c}
         s.t=8;
        case 8:
          /*<<mlString.js 187 4>>*/ return  /*<<mlString.js 187 11>>*/ caml_utf16_of_utf8
                 (s.c)
        } /*<<mlString.js 189 0>>*/ }
     /*<<mlString.js 242 0>>*/ function MlString(tag,contents,length)
     {this.t=tag;this.c=contents;this.l=length /*<<mlString.js 244 0>>*/ }
    MlString.prototype.toString=
    function()
     { /*<<mlString.js 245 41>>*/ return  /*<<mlString.js 245 48>>*/ caml_to_js_string
              (this) /*<<mlString.js 245 30>>*/ };
     /*<<mlString.js 305 0>>*/ function caml_new_string(s)
     { /*<<mlString.js 305 31>>*/ return new MlString(0,s,s.length) /*<<mlString.js 305 66>>*/ }
     /*<<stdlib.js 129 0>>*/ function caml_raise_with_string(tag,msg)
     { /*<<stdlib.js 130 2>>*/ caml_raise_with_arg
       (tag, /*<<stdlib.js 130 28>>*/ caml_new_string(msg)) /*<<stdlib.js 131 0>>*/ }
     /*<<stdlib.js 92 0>>*/  /*<<stdlib.js 92 21>>*/ var caml_global_data=[0];
     /*<<stdlib.js 184 0>>*/ function caml_invalid_argument(msg)
     { /*<<stdlib.js 185 2>>*/ caml_raise_with_string
       (caml_global_data.Invalid_argument,msg) /*<<stdlib.js 186 0>>*/ }
     /*<<stdlib.js 208 0>>*/ function caml_array_bound_error()
     { /*<<stdlib.js 209 2>>*/ caml_invalid_argument("index out of bounds") /*<<stdlib.js 210 0>>*/ }
     /*<<stdlib.js 297 0>>*/ function caml_check_bound(array,index)
     { /*<<stdlib.js 298 2>>*/ if(index>>>0>=array.length-1)
        /*<<stdlib.js 298 39>>*/ caml_array_bound_error();
       /*<<stdlib.js 299 2>>*/ return array /*<<stdlib.js 300 0>>*/ }
     /*<<ieee_754.js 152 0>>*/ function caml_classify_float(x)
     { /*<<ieee_754.js 153 2>>*/ if( /*<<ieee_754.js 153 6>>*/ isFinite(x))
        /*<<ieee_754.js 153 20>>*/ { /*<<ieee_754.js 154 4>>*/ if
         ( /*<<ieee_754.js 154 8>>*/ Math.abs(x)>=2.22507385850720138e-308)
          /*<<ieee_754.js 154 48>>*/ return 0;
         /*<<ieee_754.js 155 4>>*/ if(x!=0)
          /*<<ieee_754.js 155 16>>*/ return 1;
         /*<<ieee_754.js 156 4>>*/ return 2}
       /*<<ieee_754.js 158 2>>*/ return  /*<<ieee_754.js 158 9>>*/ isNaN(x)
              ?4
              :3 /*<<ieee_754.js 159 0>>*/ }
     /*<<int64.js 39 0>>*/ function caml_int64_compare(x,y)
     { /*<<int64.js 40 2>>*/ var
        /*<<int64.js 40 9>>*/ x3=x[3]<<16,
        /*<<int64.js 41 9>>*/ y3=y[3]<<16;
       /*<<int64.js 42 2>>*/ if(x3>y3) /*<<int64.js 42 15>>*/ return 1;
       /*<<int64.js 43 2>>*/ if(x3<y3) /*<<int64.js 43 15>>*/ return -1;
       /*<<int64.js 44 2>>*/ if(x[2]>y[2]) /*<<int64.js 44 19>>*/ return 1;
       /*<<int64.js 45 2>>*/ if(x[2]<y[2]) /*<<int64.js 45 19>>*/ return -1;
       /*<<int64.js 46 2>>*/ if(x[1]>y[1]) /*<<int64.js 46 19>>*/ return 1;
       /*<<int64.js 47 2>>*/ if(x[1]<y[1]) /*<<int64.js 47 19>>*/ return -1;
       /*<<int64.js 48 2>>*/ return 0 /*<<int64.js 49 0>>*/ }
     /*<<stdlib.js 408 0>>*/ function caml_int_compare(a,b)
     { /*<<stdlib.js 409 2>>*/ if(a<b) /*<<stdlib.js 409 13>>*/ return -1;
       /*<<stdlib.js 409 26>>*/ if(a==b) /*<<stdlib.js 409 38>>*/ return 0;
       /*<<stdlib.js 409 48>>*/ return 1 /*<<stdlib.js 410 0>>*/ }
     /*<<mlString.js 312 0>>*/ function caml_string_compare(s1,s2)
     {s1.t&6&& /*<<mlString.js 313 16>>*/ caml_convert_string_to_bytes(s1);
      s2.t&6&& /*<<mlString.js 314 16>>*/ caml_convert_string_to_bytes(s2);
       /*<<mlString.js 315 2>>*/ return s1.c<s2.c?-1:s1.c>s2.c?1:0 /*<<mlString.js 316 0>>*/ }
     /*<<stdlib.js 323 0>>*/ function caml_compare_val(a,b,total)
     { /*<<stdlib.js 324 2>>*/  /*<<stdlib.js 324 12>>*/ var stack=[];
       /*<<stdlib.js 325 2>>*/ for(;;)
        /*<<stdlib.js 325 10>>*/ { /*<<stdlib.js 326 4>>*/ if(!(total&&a===b))
          /*<<stdlib.js 326 29>>*/ if(a instanceof MlString)
           /*<<stdlib.js 327 33>>*/ if(b instanceof MlString)
           { /*<<stdlib.js 328 35>>*/ if(a!==b)
              /*<<stdlib.js 329 25>>*/ { /*<<stdlib.js 330 2>>*/  /*<<stdlib.js 330 8>>*/ var
               x=
                 /*<<stdlib.js 330 10>>*/ caml_string_compare(a,b);
               /*<<stdlib.js 331 2>>*/ if(x!=0)
                /*<<stdlib.js 331 14>>*/ return x}}
          else
            /*<<stdlib.js 335 10>>*/ return 1;
         else
           /*<<stdlib.js 336 13>>*/ if(a instanceof Array&&a[0]===(a[0]|0))
            /*<<stdlib.js 336 58>>*/ { /*<<stdlib.js 337 8>>*/  /*<<stdlib.js 337 15>>*/ var
             ta=
              a[0];
             /*<<stdlib.js 339 8>>*/ if(ta===254)ta=0;
             /*<<stdlib.js 341 8>>*/ if(ta===250)
              /*<<stdlib.js 341 24>>*/ {a=a[1];
               /*<<stdlib.js 343 10>>*/ continue}
            else
              /*<<stdlib.js 344 15>>*/ if(b instanceof Array&&b[0]===(b[0]|0))
               /*<<stdlib.js 344 60>>*/ { /*<<stdlib.js 345 10>>*/  /*<<stdlib.js 345 17>>*/ var
                tb=
                 b[0];
                /*<<stdlib.js 347 10>>*/ if(tb===254)tb=0;
                /*<<stdlib.js 349 10>>*/ if(tb===250)
                 /*<<stdlib.js 349 26>>*/ {b=b[1];
                  /*<<stdlib.js 351 12>>*/ continue}
               else
                 /*<<stdlib.js 352 17>>*/ if(ta!=tb)
                  /*<<stdlib.js 352 31>>*/ return ta<tb?-1:1;
                else
                  /*<<stdlib.js 354 17>>*/ switch(ta)
                  {case 248:
                     /*<<stdlib.js 358 2>>*/  /*<<stdlib.js 358 8>>*/ var
                     x=
                       /*<<stdlib.js 358 10>>*/ caml_int_compare(a[2],b[2]);
                     /*<<stdlib.js 359 2>>*/ if(x!=0)
                      /*<<stdlib.js 359 14>>*/ return x;
                     /*<<stdlib.js 360 2>>*/ break;
                   case 251:
                     /*<<stdlib.js 362 22>>*/  /*<<stdlib.js 363 16>>*/ caml_invalid_argument
                     ("equal: abstract value");
                   case 255:
                     /*<<stdlib.js 367 2>>*/  /*<<stdlib.js 367 8>>*/ var
                     x=
                       /*<<stdlib.js 367 10>>*/ caml_int64_compare(a,b);
                     /*<<stdlib.js 368 2>>*/ if(x!=0)
                      /*<<stdlib.js 368 14>>*/ return x;
                     /*<<stdlib.js 369 2>>*/ break;
                   default:
                     /*<<stdlib.js 372 14>>*/ if(a.length!=b.length)
                      /*<<stdlib.js 372 40>>*/ return a.length<b.length?-1:1;
                     /*<<stdlib.js 373 14>>*/ if(a.length>1)
                      /*<<stdlib.js 373 32>>*/ stack.push(a,b,1)}}
             else
               /*<<stdlib.js 377 10>>*/ return 1}
          else
            /*<<stdlib.js 378 13>>*/ if
            (b instanceof MlString||b instanceof Array&&b[0]===(b[0]|0))
             /*<<stdlib.js 379 60>>*/ return -1;
           else
             /*<<stdlib.js 381 13>>*/ if(typeof a!="number"&&a&&a.compare)
              /*<<stdlib.js 381 57>>*/ return  /*<<stdlib.js 382 15>>*/ a.compare
                     (b,total);
            else
              /*<<stdlib.js 383 13>>*/ if(typeof a=="function")
               /*<<stdlib.js 383 41>>*/  /*<<stdlib.js 384 8>>*/ caml_invalid_argument
               ("equal: functional value");
             else
               /*<<stdlib.js 385 13>>*/ { /*<<stdlib.js 386 8>>*/ if(a<b)
                 /*<<stdlib.js 386 19>>*/ return -1;
                /*<<stdlib.js 387 8>>*/ if(a>b)
                 /*<<stdlib.js 387 19>>*/ return 1;
                /*<<stdlib.js 388 8>>*/ if(a!=b)
                 /*<<stdlib.js 388 20>>*/ { /*<<stdlib.js 389 10>>*/ if
                  (!total)
                   /*<<stdlib.js 389 22>>*/ return NaN;
                  /*<<stdlib.js 390 10>>*/ if(a==a)
                   /*<<stdlib.js 390 22>>*/ return 1;
                  /*<<stdlib.js 391 10>>*/ if(b==b)
                   /*<<stdlib.js 391 22>>*/ return -1}}
         /*<<stdlib.js 395 4>>*/ if(stack.length==0)
          /*<<stdlib.js 395 27>>*/ return 0;
         /*<<stdlib.js 396 4>>*/  /*<<stdlib.js 396 10>>*/ var
         i=
           /*<<stdlib.js 396 12>>*/ stack.pop();
        b= /*<<stdlib.js 397 8>>*/ stack.pop();
        a= /*<<stdlib.js 398 8>>*/ stack.pop();
         /*<<stdlib.js 399 4>>*/ if(i+1<a.length)
          /*<<stdlib.js 399 26>>*/ stack.push(a,b,i+1);
        a=a[i];
        b=b[i]} /*<<stdlib.js 403 0>>*/ }
     /*<<stdlib.js 406 0>>*/ function caml_compare(a,b)
     { /*<<stdlib.js 406 31>>*/ return  /*<<stdlib.js 406 38>>*/ caml_compare_val
              (a,b,true) /*<<stdlib.js 406 69>>*/ }
     /*<<stdlib.js 141 0>>*/ function caml_failwith(msg)
     { /*<<stdlib.js 142 2>>*/ caml_raise_with_string
       (caml_global_data.Failure,msg) /*<<stdlib.js 143 0>>*/ }
     /*<<stdlib.js 1097 0>>*/ function caml_convert_raw_backtrace_slot()
     { /*<<stdlib.js 1098 2>>*/ caml_failwith
       ("caml_convert_raw_backtrace_slot") /*<<stdlib.js 1099 0>>*/ }
     /*<<mlString.js 299 0>>*/ function caml_create_string(len)
     { /*<<mlString.js 300 2>>*/ if(len<0)
        /*<<mlString.js 300 15>>*/ caml_invalid_argument("String.create");
       /*<<mlString.js 301 2>>*/ return new MlString(len?2:9,"",len) /*<<mlString.js 302 0>>*/ }
     /*<<stdlib.js 413 0>>*/ function caml_equal(x,y)
     { /*<<stdlib.js 413 29>>*/ return +( /*<<stdlib.js 413 38>>*/ caml_compare_val
               (x,y,false)==
              0) /*<<stdlib.js 413 73>>*/ }
     /*<<mlString.js 360 0>>*/ function caml_fill_string(s,i,l,c)
     { /*<<mlString.js 361 2>>*/ if(l>0)
        /*<<mlString.js 361 13>>*/ if(i==0&&(l>=s.l||s.t==2&&l>=s.c.length))
         /*<<mlString.js 362 77>>*/ if(c==0)
          /*<<mlString.js 363 18>>*/ {s.c="";s.t=2}
        else
          /*<<mlString.js 366 13>>*/ {s.c=
           /*<<mlString.js 367 14>>*/ caml_str_repeat
           (l, /*<<mlString.js 367 34>>*/ String.fromCharCode(c));
          s.t=l==s.l?0:2}
       else
         /*<<mlString.js 370 11>>*/ { /*<<mlString.js 371 6>>*/ if(s.t!=4)
           /*<<mlString.js 371 32>>*/ caml_convert_string_to_array(s);
          /*<<mlString.js 372 6>>*/ for(l+=i;i<l;i++)s.c[i]=c}
       /*<<mlString.js 375 2>>*/ return 0 /*<<mlString.js 376 0>>*/ }
     /*<<mlString.js 283 0>>*/ function caml_bytes_of_string(s)
     { /*<<mlString.js 284 2>>*/ if((s.t&6)!=0)
        /*<<mlString.js 284 34>>*/ caml_convert_string_to_bytes(s);
       /*<<mlString.js 285 2>>*/ return s.c /*<<mlString.js 286 0>>*/ }
     /*<<stdlib.js 513 0>>*/ function caml_parse_format(fmt)
     {fmt= /*<<stdlib.js 514 8>>*/ caml_bytes_of_string(fmt);
       /*<<stdlib.js 515 2>>*/  /*<<stdlib.js 515 10>>*/ var len=fmt.length;
       /*<<stdlib.js 516 2>>*/ if(len>31)
        /*<<stdlib.js 516 16>>*/ caml_invalid_argument
        ("format_int: format too long");
       /*<<stdlib.js 515 2>>*/  /*<<stdlib.js 517 8>>*/ var
       f=
        {justify:"+",
         signstyle:"-",
         filler:" ",
         alternate:false,
         base:0,
         signedconv:false,
         width:0,
         uppercase:false,
         sign:1,
         prec:-1,
         conv:"f"};
       /*<<stdlib.js 521 2>>*/ for
       ( /*<<stdlib.js 521 13>>*/ var i=0;i<len;i++)
        /*<<stdlib.js 521 32>>*/ { /*<<stdlib.js 522 4>>*/  /*<<stdlib.js 522 10>>*/ var
         c=
           /*<<stdlib.js 522 12>>*/ fmt.charAt(i);
         /*<<stdlib.js 523 4>>*/ switch(c)
         {case "-":f.justify="-"; /*<<stdlib.js 525 23>>*/ break;
          case "+":
          case " ":f.signstyle=c; /*<<stdlib.js 527 23>>*/ break;
          case "0":f.filler="0"; /*<<stdlib.js 529 22>>*/ break;
          case "#":f.alternate=true; /*<<stdlib.js 531 26>>*/ break;
          case "1":
          case "2":
          case "3":
          case "4":
          case "5":
          case "6":
          case "7":
          case "8":
          case "9":
           f.width=0;
            /*<<stdlib.js 535 6>>*/ while
            (c= /*<<stdlib.js 535 15>>*/ fmt.charCodeAt(i)-48,c>=0&&c<=9)
             /*<<stdlib.js 535 57>>*/ {f.width=f.width*10+c;i++}
           i--;
            /*<<stdlib.js 539 5>>*/ break;
          case ".":
           f.prec=0;
           i++;
            /*<<stdlib.js 543 6>>*/ while
            (c= /*<<stdlib.js 543 15>>*/ fmt.charCodeAt(i)-48,c>=0&&c<=9)
             /*<<stdlib.js 543 57>>*/ {f.prec=f.prec*10+c;i++}
           i--;
          case "d":
          case "i":f.signedconv=true;
          case "u":f.base=10; /*<<stdlib.js 550 19>>*/ break;
          case "x":f.base=16; /*<<stdlib.js 552 19>>*/ break;
          case "X":f.base=16;f.uppercase=true; /*<<stdlib.js 554 39>>*/ break;
          case "o":f.base=8; /*<<stdlib.js 556 18>>*/ break;
          case "e":
          case "f":
          case "g":f.signedconv=true;f.conv=c; /*<<stdlib.js 558 39>>*/ break;
          case "E":
          case "F":
          case "G":
           f.signedconv=true;
           f.uppercase=true;
           f.conv= /*<<stdlib.js 561 15>>*/ c.toLowerCase();
            /*<<stdlib.js 561 33>>*/ break
          }}
       /*<<stdlib.js 564 2>>*/ return f /*<<stdlib.js 565 0>>*/ }
     /*<<stdlib.js 569 0>>*/ function caml_finish_formatting(f,rawbuffer)
     { /*<<stdlib.js 570 2>>*/ if(f.uppercase)
       rawbuffer= /*<<stdlib.js 570 31>>*/ rawbuffer.toUpperCase();
       /*<<stdlib.js 571 2>>*/  /*<<stdlib.js 571 10>>*/ var
       len=
        rawbuffer.length;
       /*<<stdlib.js 573 2>>*/ if(f.signedconv&&(f.sign<0||f.signstyle!="-"))
       len++;
       /*<<stdlib.js 574 2>>*/ if(f.alternate)
        /*<<stdlib.js 574 19>>*/ { /*<<stdlib.js 575 4>>*/ if(f.base==8)
         len+=1;
         /*<<stdlib.js 576 4>>*/ if(f.base==16)len+=2}
       /*<<stdlib.js 571 2>>*/  /*<<stdlib.js 579 13>>*/ var buffer="";
       /*<<stdlib.js 580 2>>*/ if(f.justify=="+"&&f.filler==" ")
        /*<<stdlib.js 581 4>>*/ for
        ( /*<<stdlib.js 581 15>>*/ var i=len;i<f.width;i++)
        buffer+=" ";
       /*<<stdlib.js 582 2>>*/ if(f.signedconv)
        /*<<stdlib.js 582 20>>*/ if(f.sign<0)
        buffer+="-";
       else
         /*<<stdlib.js 584 9>>*/ if(f.signstyle!="-")buffer+=f.signstyle;
       /*<<stdlib.js 586 2>>*/ if(f.alternate&&f.base==8)buffer+="0";
       /*<<stdlib.js 587 2>>*/ if(f.alternate&&f.base==16)buffer+="0x";
       /*<<stdlib.js 588 2>>*/ if(f.justify=="+"&&f.filler=="0")
        /*<<stdlib.js 589 4>>*/ for
        ( /*<<stdlib.js 589 15>>*/ var i=len;i<f.width;i++)
        buffer+="0";
      buffer+=rawbuffer;
       /*<<stdlib.js 591 2>>*/ if(f.justify=="-")
        /*<<stdlib.js 592 4>>*/ for
        ( /*<<stdlib.js 592 15>>*/ var i=len;i<f.width;i++)
        buffer+=" ";
       /*<<stdlib.js 593 2>>*/ return  /*<<stdlib.js 593 9>>*/ caml_new_string
              (buffer) /*<<stdlib.js 594 0>>*/ }
     /*<<stdlib.js 614 0>>*/ function caml_format_float(fmt,x)
     { /*<<stdlib.js 615 2>>*/ var
       s,
        /*<<stdlib.js 615 11>>*/ f=
         /*<<stdlib.js 615 13>>*/ caml_parse_format(fmt),
        /*<<stdlib.js 616 11>>*/ prec=f.prec<0?6:f.prec;
       /*<<stdlib.js 617 2>>*/ if(x<0||x==0&&1/x==-Infinity)
        /*<<stdlib.js 617 45>>*/ {f.sign=-1;x=-x}
       /*<<stdlib.js 618 2>>*/ if( /*<<stdlib.js 618 6>>*/ isNaN(x))
        /*<<stdlib.js 618 16>>*/ {s="nan";f.filler=" "}
      else
        /*<<stdlib.js 619 7>>*/ if(! /*<<stdlib.js 619 12>>*/ isFinite(x))
         /*<<stdlib.js 619 25>>*/ {s="inf";f.filler=" "}
       else
         /*<<stdlib.js 621 4>>*/ switch(f.conv)
         {case "e":
            /*<<stdlib.js 623 6>>*/ var
             /*<<stdlib.js 623 12>>*/ s=
              /*<<stdlib.js 623 14>>*/ x.toExponential(prec),
             /*<<stdlib.js 625 12>>*/ i=s.length;
            /*<<stdlib.js 626 6>>*/ if
            ( /*<<stdlib.js 626 10>>*/ s.charAt(i-3)=="e")
            s=
             /*<<stdlib.js 627 12>>*/ s.slice(0,i-1)+
            "0"+
             /*<<stdlib.js 627 39>>*/ s.slice(i-1);
            /*<<stdlib.js 628 6>>*/ break;
          case "f":
           s= /*<<stdlib.js 630 10>>*/ x.toFixed(prec);
            /*<<stdlib.js 630 27>>*/ break;
          case "g":
           prec=prec?prec:1;
           s= /*<<stdlib.js 633 10>>*/ x.toExponential(prec-1);
            /*<<stdlib.js 634 6>>*/ var
             /*<<stdlib.js 634 12>>*/ j=
              /*<<stdlib.js 634 14>>*/ s.indexOf("e"),
             /*<<stdlib.js 635 14>>*/ exp=
             + /*<<stdlib.js 635 17>>*/ s.slice(j+1);
            /*<<stdlib.js 636 6>>*/ if
            (exp<
             -4||
             x>=
             1e+21||
              /*<<stdlib.js 636 35>>*/ x.toFixed(0).length>
             prec)
             /*<<stdlib.js 636 63>>*/ { /*<<stdlib.js 638 8>>*/  /*<<stdlib.js 638 14>>*/ var
              i=
               j-1;
              /*<<stdlib.js 638 23>>*/ while
              ( /*<<stdlib.js 638 30>>*/ s.charAt(i)=="0")
              i--;
              /*<<stdlib.js 639 8>>*/ if
              ( /*<<stdlib.js 639 12>>*/ s.charAt(i)==".")
              i--;
             s=
              /*<<stdlib.js 640 12>>*/ s.slice(0,i+1)+
              /*<<stdlib.js 640 32>>*/ s.slice(j);
             i=s.length;
              /*<<stdlib.js 642 8>>*/ if
              ( /*<<stdlib.js 642 12>>*/ s.charAt(i-3)=="e")
              s=
               /*<<stdlib.js 643 14>>*/ s.slice(0,i-1)+
              "0"+
               /*<<stdlib.js 643 41>>*/ s.slice(i-1);
              /*<<stdlib.js 644 8>>*/ break}
           else
             /*<<stdlib.js 645 13>>*/ { /*<<stdlib.js 646 8>>*/  /*<<stdlib.js 646 14>>*/ var
              p=
               prec;
              /*<<stdlib.js 647 8>>*/ if(exp<0)
               /*<<stdlib.js 647 21>>*/ {p-=exp+1;
               s= /*<<stdlib.js 647 41>>*/ x.toFixed(p)}
             else
               /*<<stdlib.js 648 13>>*/ while
               (s= /*<<stdlib.js 648 24>>*/ x.toFixed(p),s.length>prec+1)
               p--;
              /*<<stdlib.js 649 8>>*/ if(p)
               /*<<stdlib.js 649 15>>*/ { /*<<stdlib.js 651 10>>*/  /*<<stdlib.js 651 16>>*/ var
                i=
                 s.length-1;
                /*<<stdlib.js 651 32>>*/ while
                ( /*<<stdlib.js 651 39>>*/ s.charAt(i)=="0")
                i--;
                /*<<stdlib.js 652 10>>*/ if
                ( /*<<stdlib.js 652 14>>*/ s.charAt(i)==".")
                i--;
               s= /*<<stdlib.js 653 14>>*/ s.slice(0,i+1)}}
            /*<<stdlib.js 656 6>>*/ break
          }
       /*<<stdlib.js 658 2>>*/ return  /*<<stdlib.js 658 9>>*/ caml_finish_formatting
              (f,s) /*<<stdlib.js 659 0>>*/ }
     /*<<stdlib.js 599 0>>*/ function caml_format_int(fmt,i)
     { /*<<stdlib.js 600 2>>*/ if
       ( /*<<stdlib.js 600 6>>*/ caml_bytes_of_string(fmt)=="%d")
        /*<<stdlib.js 600 41>>*/ return  /*<<stdlib.js 600 48>>*/ caml_new_string
               (""+i);
       /*<<stdlib.js 601 2>>*/  /*<<stdlib.js 601 8>>*/ var
       f=
         /*<<stdlib.js 601 10>>*/ caml_parse_format(fmt);
       /*<<stdlib.js 602 2>>*/ if(i<0)
        /*<<stdlib.js 602 13>>*/ if(f.signedconv)
         /*<<stdlib.js 602 33>>*/ {f.sign=-1;i=-i}
       else
        i>>>=0;
       /*<<stdlib.js 601 2>>*/  /*<<stdlib.js 603 8>>*/ var
       s=
         /*<<stdlib.js 603 10>>*/ i.toString(f.base);
       /*<<stdlib.js 604 2>>*/ if(f.prec>=0)
        /*<<stdlib.js 604 19>>*/ {f.filler=" ";
         /*<<stdlib.js 606 4>>*/  /*<<stdlib.js 606 10>>*/ var
         n=
          f.prec-s.length;
         /*<<stdlib.js 607 4>>*/ if(n>0)
         s= /*<<stdlib.js 607 19>>*/ caml_str_repeat(n,"0")+s}
       /*<<stdlib.js 609 2>>*/ return  /*<<stdlib.js 609 9>>*/ caml_finish_formatting
              (f,s) /*<<stdlib.js 610 0>>*/ }
     /*<<stdlib.js 1076 0>>*/  /*<<stdlib.js 1076 20>>*/ var
     caml_oo_last_id=
      0;
     /*<<stdlib.js 1087 0>>*/ function caml_fresh_oo_id()
     { /*<<stdlib.js 1088 2>>*/ return caml_oo_last_id++ /*<<stdlib.js 1089 0>>*/ }
     /*<<stdlib.js 1018 0>>*/ function caml_get_exception_raw_backtrace()
     { /*<<stdlib.js 1018 47>>*/ return [0] /*<<stdlib.js 1018 59>>*/ }
     /*<<stdlib.js 985 0>>*/  /*<<stdlib.js 985 22>>*/ var
     caml_method_cache=
      [];
     /*<<stdlib.js 986 0>>*/ function caml_get_public_method(obj,tag,cacheid)
     { /*<<stdlib.js 987 2>>*/ var
        /*<<stdlib.js 987 12>>*/ meths=obj[1],
        /*<<stdlib.js 988 10>>*/ ofs=caml_method_cache[cacheid];
       /*<<stdlib.js 989 2>>*/ if(ofs===null)
        /*<<stdlib.js 989 20>>*/ for
        ( /*<<stdlib.js 991 15>>*/ var i=caml_method_cache.length;
         i<
         cacheid;
         i++)
        caml_method_cache[i]=0;
      else
        /*<<stdlib.js 993 9>>*/ if(meths[ofs]===tag)
         /*<<stdlib.js 993 33>>*/ return meths[ofs-1];
       /*<<stdlib.js 987 2>>*/ var
        /*<<stdlib.js 998 9>>*/ li=3,
        /*<<stdlib.js 998 17>>*/ hi=meths[1]*2+1,
       mi;
       /*<<stdlib.js 999 2>>*/ while(li<hi)
        /*<<stdlib.js 999 18>>*/ {mi=li+hi>>1|1;
         /*<<stdlib.js 1001 4>>*/ if(tag<meths[mi+1])hi=mi-2;else li=mi}
      caml_method_cache[cacheid]=li+1;
       /*<<stdlib.js 1006 2>>*/ return tag==meths[li+1]?meths[li]:0 /*<<stdlib.js 1007 0>>*/ }
     /*<<stdlib.js 419 0>>*/ function caml_greaterequal(x,y)
     { /*<<stdlib.js 419 36>>*/ return +( /*<<stdlib.js 419 45>>*/ caml_compare_val
               (x,y,false)>=
              0) /*<<stdlib.js 419 80>>*/ }
     /*<<mlString.js 80 0>>*/ function caml_utf8_of_utf16(s)
     { /*<<mlString.js 81 2>>*/ for
       (var
          /*<<mlString.js 81 13>>*/ b="",
          /*<<mlString.js 81 21>>*/ t=b,
         c,
         d,
          /*<<mlString.js 81 34>>*/ i=0,
          /*<<mlString.js 81 41>>*/ l=s.length;
        i<
        l;
        i++)
        /*<<mlString.js 81 65>>*/ {c=
         /*<<mlString.js 82 8>>*/ s.charCodeAt(i);
         /*<<mlString.js 83 4>>*/ if(c<128)
          /*<<mlString.js 83 18>>*/ { /*<<mlString.js 84 6>>*/ for
           ( /*<<mlString.js 84 17>>*/ var j=i+1;
            j<
            l&&
            (c= /*<<mlString.js 84 42>>*/ s.charCodeAt(j))<
            128;
            j++)
            /*<<mlString.js 84 71>>*/ ;
           /*<<mlString.js 85 6>>*/ if(j-i>512)
            /*<<mlString.js 85 23>>*/ { /*<<mlString.js 85 25>>*/ t.substr
             (0,1);
            b+=t;
            t="";
            b+= /*<<mlString.js 85 62>>*/ s.slice(i,j)}
          else
           t+= /*<<mlString.js 86 16>>*/ s.slice(i,j);
           /*<<mlString.js 87 6>>*/ if(j==l) /*<<mlString.js 87 18>>*/ break;
          i=j}
         /*<<mlString.js 90 4>>*/ if(c<2048)
          /*<<mlString.js 90 19>>*/ {t+=
           /*<<mlString.js 91 11>>*/ String.fromCharCode(192|c>>6);
          t+= /*<<mlString.js 92 11>>*/ String.fromCharCode(128|c&63)}
        else
          /*<<mlString.js 93 11>>*/ if(c<55296||c>=57343)
           /*<<mlString.js 93 42>>*/ t+=
           /*<<mlString.js 94 11>>*/ String.fromCharCode
           (224|c>>12,128|c>>6&63,128|c&63);
         else
           /*<<mlString.js 97 11>>*/ if
           (c>=
            56319||
            i+
            1==
            l||
            (d= /*<<mlString.js 98 20>>*/ s.charCodeAt(i+1))<
            56320||
            d>
            57343)
            /*<<mlString.js 98 65>>*/ t+="\xef\xbf\xbd";
          else
            /*<<mlString.js 101 11>>*/ {i++;
            c=(c<<10)+d-56613888;
            t+=
             /*<<mlString.js 104 11>>*/ String.fromCharCode
             (240|c>>18,128|c>>12&63,128|c>>6&63,128|c&63)}
         /*<<mlString.js 109 4>>*/ if(t.length>1024)
          /*<<mlString.js 109 25>>*/ { /*<<mlString.js 109 26>>*/ t.substr
           (0,1);
          b+=t;
          t=""}}
       /*<<mlString.js 111 2>>*/ return b+t /*<<mlString.js 112 0>>*/ }
     /*<<mlString.js 290 0>>*/ function caml_js_to_string(s)
     { /*<<mlString.js 291 2>>*/  /*<<mlString.js 291 10>>*/ var tag=9;
       /*<<mlString.js 292 2>>*/ if
       (! /*<<mlString.js 292 7>>*/ caml_is_ascii(s))
       tag=8,s= /*<<mlString.js 293 41>>*/ caml_utf8_of_utf16(s);
       /*<<mlString.js 294 2>>*/ return new MlString(tag,s,s.length) /*<<mlString.js 295 0>>*/ }
     /*<<ieee_754.js 77 0>>*/ function caml_hexstring_of_float(x,prec,style)
     { /*<<ieee_754.js 78 2>>*/ if(! /*<<ieee_754.js 78 7>>*/ isFinite(x))
        /*<<ieee_754.js 78 20>>*/ { /*<<ieee_754.js 79 4>>*/ if
         ( /*<<ieee_754.js 79 8>>*/ isNaN(x))
          /*<<ieee_754.js 79 18>>*/ return  /*<<ieee_754.js 79 25>>*/ caml_js_to_string
                 ("nan");
         /*<<ieee_754.js 80 4>>*/ return  /*<<ieee_754.js 80 11>>*/ caml_js_to_string
                (x>0?"infinity":"-infinity")}
       /*<<ieee_754.js 82 2>>*/  /*<<ieee_754.js 82 11>>*/ var
       sign=
        x==0&&1/x==-Infinity?1:x>=0?0:1;
       /*<<ieee_754.js 83 2>>*/ if(sign)x=-x;
       /*<<ieee_754.js 82 2>>*/  /*<<ieee_754.js 84 10>>*/ var exp=0;
       /*<<ieee_754.js 85 2>>*/ if(x==0)
        /*<<ieee_754.js 85 14>>*/ ;
      else
        /*<<ieee_754.js 86 7>>*/ if(x<1)
         /*<<ieee_754.js 86 18>>*/ while(x<1&&exp>-1022)
          /*<<ieee_754.js 87 34>>*/ {x*=2;exp--}
       else
         /*<<ieee_754.js 88 9>>*/ while(x>=2)
          /*<<ieee_754.js 89 19>>*/ {x/=2;exp++}
       /*<<ieee_754.js 82 2>>*/ var
        /*<<ieee_754.js 91 15>>*/ exp_sign=exp<0?"":"+",
        /*<<ieee_754.js 92 15>>*/ sign_str="";
       /*<<ieee_754.js 93 2>>*/ if(sign)
       sign_str="-";
      else
        /*<<ieee_754.js 94 7>>*/ switch(style)
        {case 43:sign_str="+"; /*<<ieee_754.js 96 39>>*/ break;
         case 32:sign_str=" "; /*<<ieee_754.js 97 39>>*/ break;
         default: /*<<ieee_754.js 98 13>>*/ break}
       /*<<ieee_754.js 101 2>>*/ if(prec>=0&&prec<13)
        /*<<ieee_754.js 101 30>>*/ { /*<<ieee_754.js 103 6>>*/  /*<<ieee_754.js 103 14>>*/ var
         cst=
           /*<<ieee_754.js 103 16>>*/ Math.pow(2,prec*4);
        x= /*<<ieee_754.js 104 10>>*/ Math.round(x*cst)/cst}
       /*<<ieee_754.js 82 2>>*/  /*<<ieee_754.js 106 12>>*/ var
       x_str=
         /*<<ieee_754.js 106 14>>*/ x.toString(16);
       /*<<ieee_754.js 107 2>>*/ if(prec>=0)
        /*<<ieee_754.js 107 15>>*/ { /*<<ieee_754.js 108 6>>*/  /*<<ieee_754.js 108 14>>*/ var
         idx=
           /*<<ieee_754.js 108 16>>*/ x_str.indexOf(".");
         /*<<ieee_754.js 109 4>>*/ if(idx<0)
          /*<<ieee_754.js 109 14>>*/ x_str+=
         "."+
          /*<<ieee_754.js 110 21>>*/ caml_str_repeat(prec,"0");
        else
          /*<<ieee_754.js 112 9>>*/ { /*<<ieee_754.js 113 6>>*/  /*<<ieee_754.js 113 15>>*/ var
           size=
            idx+1+prec;
           /*<<ieee_754.js 114 6>>*/ if(x_str.length<size)
           x_str+=
            /*<<ieee_754.js 115 17>>*/ caml_str_repeat(size-x_str.length,"0");
          else
           x_str= /*<<ieee_754.js 117 16>>*/ x_str.substr(0,size)}}
       /*<<ieee_754.js 120 2>>*/ return  /*<<ieee_754.js 120 9>>*/ caml_js_to_string
              (sign_str+
               "0x"+
               x_str+
               "p"+
               exp_sign+
                /*<<ieee_754.js 120 71>>*/ exp.toString(10)) /*<<ieee_754.js 121 0>>*/ }
     /*<<int64.js 85 0>>*/ function caml_int64_is_zero(x)
     { /*<<int64.js 86 2>>*/ return (x[3]|x[2]|x[1])==0 /*<<int64.js 87 0>>*/ }
     /*<<int64.js 241 0>>*/ function caml_int64_of_int32(x)
     { /*<<int64.js 242 2>>*/ return [255,
              x&16777215,
              x>>24&16777215,
              x>>31&65535] /*<<int64.js 243 0>>*/ }
     /*<<stdlib.js 234 0>>*/ function caml_obj_dup(x)
     { /*<<stdlib.js 235 2>>*/ var
        /*<<stdlib.js 235 8>>*/ l=x.length,
        /*<<stdlib.js 236 8>>*/ a=new Array(l);
       /*<<stdlib.js 237 2>>*/ for( /*<<stdlib.js 237 12>>*/ var i=0;i<l;i++)
       a[i]=x[i];
       /*<<stdlib.js 238 2>>*/ return a /*<<stdlib.js 239 0>>*/ }
     /*<<int64.js 68 0>>*/ function caml_int64_sub(x,y)
     { /*<<int64.js 69 2>>*/ var
        /*<<int64.js 69 9>>*/ z1=x[1]-y[1],
        /*<<int64.js 70 9>>*/ z2=x[2]-y[2]+(z1>>24),
        /*<<int64.js 71 9>>*/ z3=x[3]-y[3]+(z2>>24);
       /*<<int64.js 72 2>>*/ return [255,z1&16777215,z2&16777215,z3&65535] /*<<int64.js 73 0>>*/ }
     /*<<int64.js 24 0>>*/ function caml_int64_ucompare(x,y)
     { /*<<int64.js 25 2>>*/ if(x[3]>y[3]) /*<<int64.js 25 19>>*/ return 1;
       /*<<int64.js 26 2>>*/ if(x[3]<y[3]) /*<<int64.js 26 19>>*/ return -1;
       /*<<int64.js 27 2>>*/ if(x[2]>y[2]) /*<<int64.js 27 19>>*/ return 1;
       /*<<int64.js 28 2>>*/ if(x[2]<y[2]) /*<<int64.js 28 19>>*/ return -1;
       /*<<int64.js 29 2>>*/ if(x[1]>y[1]) /*<<int64.js 29 19>>*/ return 1;
       /*<<int64.js 30 2>>*/ if(x[1]<y[1]) /*<<int64.js 30 19>>*/ return -1;
       /*<<int64.js 31 2>>*/ return 0 /*<<int64.js 32 0>>*/ }
     /*<<int64.js 174 0>>*/ function caml_int64_lsl1(x)
     {x[3]=x[3]<<1|x[2]>>23;
      x[2]=(x[2]<<1|x[1]>>23)&16777215;
      x[1]=x[1]<<1&16777215 /*<<int64.js 178 0>>*/ }
     /*<<int64.js 181 0>>*/ function caml_int64_lsr1(x)
     {x[1]=(x[1]>>>1|x[2]<<23)&16777215;
      x[2]=(x[2]>>>1|x[3]<<23)&16777215;
      x[3]=x[3]>>>1 /*<<int64.js 185 0>>*/ }
     /*<<int64.js 191 0>>*/ function caml_int64_udivmod(x,y)
     { /*<<int64.js 192 2>>*/ var
        /*<<int64.js 192 13>>*/ offset=0,
        /*<<int64.js 193 14>>*/ modulus=
         /*<<int64.js 193 16>>*/ caml_obj_dup(x),
        /*<<int64.js 194 14>>*/ divisor=
         /*<<int64.js 194 16>>*/ caml_obj_dup(y),
        /*<<int64.js 195 15>>*/ quotient=[255,0,0,0];
       /*<<int64.js 196 2>>*/ while
       ( /*<<int64.js 196 9>>*/ caml_int64_ucompare(modulus,divisor)>0)
        /*<<int64.js 196 53>>*/ {offset++;
         /*<<int64.js 198 4>>*/ caml_int64_lsl1(divisor)}
       /*<<int64.js 200 2>>*/ while(offset>=0)
        /*<<int64.js 200 22>>*/ {offset--;
         /*<<int64.js 202 4>>*/ caml_int64_lsl1(quotient);
         /*<<int64.js 203 4>>*/ if
         ( /*<<int64.js 203 8>>*/ caml_int64_ucompare(modulus,divisor)>=0)
          /*<<int64.js 203 53>>*/ {quotient[1]++;
          modulus= /*<<int64.js 205 16>>*/ caml_int64_sub(modulus,divisor)}
         /*<<int64.js 207 4>>*/ caml_int64_lsr1(divisor)}
       /*<<int64.js 209 2>>*/ return [0,quotient,modulus] /*<<int64.js 210 0>>*/ }
     /*<<int64.js 246 0>>*/ function caml_int64_to_int32(x)
     { /*<<int64.js 247 2>>*/ return x[1]|x[2]<<24 /*<<int64.js 248 0>>*/ }
     /*<<int64.js 90 0>>*/ function caml_int64_is_negative(x)
     { /*<<int64.js 91 2>>*/ return x[3]<<16<0 /*<<int64.js 92 0>>*/ }
     /*<<int64.js 52 0>>*/ function caml_int64_neg(x)
     { /*<<int64.js 53 2>>*/ var
        /*<<int64.js 53 9>>*/ y1=-x[1],
        /*<<int64.js 54 9>>*/ y2=-x[2]+(y1>>24),
        /*<<int64.js 55 9>>*/ y3=-x[3]+(y2>>24);
       /*<<int64.js 56 2>>*/ return [255,y1&16777215,y2&16777215,y3&65535] /*<<int64.js 57 0>>*/ }
     /*<<int64.js 270 0>>*/ function caml_int64_format(fmt,x)
     { /*<<int64.js 271 2>>*/  /*<<int64.js 271 8>>*/ var
       f=
         /*<<int64.js 271 10>>*/ caml_parse_format(fmt);
       /*<<int64.js 272 2>>*/ if
       (f.signedconv&& /*<<int64.js 272 22>>*/ caml_int64_is_negative(x))
        /*<<int64.js 272 49>>*/ {f.sign=-1;
        x= /*<<int64.js 273 21>>*/ caml_int64_neg(x)}
       /*<<int64.js 271 2>>*/ var
        /*<<int64.js 275 13>>*/ buffer="",
        /*<<int64.js 276 12>>*/ wbase=
         /*<<int64.js 276 14>>*/ caml_int64_of_int32(f.base),
        /*<<int64.js 277 12>>*/ cvtbl="0123456789abcdef";
       /*<<int64.js 278 2>>*/ do
        /*<<int64.js 278 5>>*/ { /*<<int64.js 279 4>>*/  /*<<int64.js 279 10>>*/ var
         p=
           /*<<int64.js 279 12>>*/ caml_int64_udivmod(x,wbase);
        x=p[1];
        buffer=
         /*<<int64.js 281 13>>*/ cvtbl.charAt
         ( /*<<int64.js 281 26>>*/ caml_int64_to_int32(p[2]))+
        buffer}
      while
       (! /*<<int64.js 282 13>>*/ caml_int64_is_zero(x));
       /*<<int64.js 283 2>>*/ if(f.prec>=0)
        /*<<int64.js 283 19>>*/ {f.filler=" ";
         /*<<int64.js 285 4>>*/  /*<<int64.js 285 10>>*/ var
         n=
          f.prec-buffer.length;
         /*<<int64.js 286 4>>*/ if(n>0)
         buffer= /*<<int64.js 286 24>>*/ caml_str_repeat(n,"0")+buffer}
       /*<<int64.js 288 2>>*/ return  /*<<int64.js 288 9>>*/ caml_finish_formatting
              (f,buffer) /*<<int64.js 289 0>>*/ }
     /*<<jslib_js_of_ocaml.js 35 0>>*/ function caml_js_from_array(a)
     { /*<<jslib_js_of_ocaml.js 35 33>>*/ return  /*<<jslib_js_of_ocaml.js 35 40>>*/ raw_array_sub
              (a,1,a.length-1) /*<<jslib_js_of_ocaml.js 35 71>>*/ }
     /*<<jslib_js_of_ocaml.js 54 0>>*/ function caml_js_call(f,o,args)
     { /*<<jslib_js_of_ocaml.js 54 36>>*/ return  /*<<jslib_js_of_ocaml.js 54 43>>*/ f.apply
              (o, /*<<jslib_js_of_ocaml.js 54 54>>*/ caml_js_from_array(args)) /*<<jslib_js_of_ocaml.js 54 81>>*/ }
     /*<<jslib.js 65 0>>*/ function caml_js_get_console()
     { /*<<jslib.js 66 2>>*/ var
        /*<<jslib.js 66 8>>*/ c=
        joo_global_object.console?joo_global_object.console:{},
        /*<<jslib.js 67 8>>*/ m=
        ["log",
         "debug",
         "info",
         "warn",
         "error",
         "assert",
         "dir",
         "dirxml",
         "trace",
         "group",
         "groupCollapsed",
         "groupEnd",
         "time",
         "timeEnd"];
       /*<<jslib.js 69 2>>*/ function f(){ /*<<jslib.js 69 17>>*/ }
       /*<<jslib.js 70 2>>*/ for
       ( /*<<jslib.js 70 13>>*/ var i=0;i<m.length;i++)
        /*<<jslib.js 70 37>>*/ if(!c[m[i]])c[m[i]]=f;
       /*<<jslib.js 71 2>>*/ return c /*<<jslib.js 72 0>>*/ }
     /*<<jslib.js 46 0>>*/  /*<<jslib.js 46 20>>*/ var
     caml_js_regexps=
      {amp:/&/g,lt:/</g,quot:/\"/g,all:/[&<\"]/};
     /*<<jslib.js 47 0>>*/ function caml_js_html_escape(s)
     { /*<<jslib.js 48 2>>*/ if
       (! /*<<jslib.js 48 7>>*/ caml_js_regexps.all.test(s))
        /*<<jslib.js 48 36>>*/ return s;
       /*<<jslib.js 49 2>>*/ return  /*<<jslib.js 49 9>>*/  /*<<jslib.js 49 9>>*/  /*<<jslib.js 49 9>>*/ s.replace
                (caml_js_regexps.amp,"&amp;").replace
               (caml_js_regexps.lt,"&lt;").replace
              (caml_js_regexps.quot,"&quot;") /*<<jslib.js 52 0>>*/ }
     /*<<stdlib.js 30 0>>*/ function raw_array_copy(a)
     { /*<<stdlib.js 31 2>>*/ var
        /*<<stdlib.js 31 8>>*/ l=a.length,
        /*<<stdlib.js 32 8>>*/ b=new Array(l);
       /*<<stdlib.js 33 2>>*/ for( /*<<stdlib.js 33 12>>*/ var i=0;i<l;i++)
       b[i]=a[i];
       /*<<stdlib.js 34 2>>*/ return b /*<<stdlib.js 35 0>>*/ }
     /*<<jslib_js_of_ocaml.js 83 0>>*/ function caml_js_wrap_callback(f)
     { /*<<jslib_js_of_ocaml.js 84 2>>*/ return function()
       { /*<<jslib_js_of_ocaml.js 85 4>>*/ return arguments.length>0
                ? /*<<jslib_js_of_ocaml.js 86 13>>*/ caml_call_gen
                  (f,
                    /*<<jslib_js_of_ocaml.js 86 30>>*/ raw_array_copy
                    (arguments))
                : /*<<jslib_js_of_ocaml.js 88 13>>*/ caml_call_gen
                  (f,[undefined]) /*<<jslib_js_of_ocaml.js 84 9>>*/ } /*<<jslib_js_of_ocaml.js 91 0>>*/ }
     /*<</home/omar/.opam/4.03.0/lib/gen_js_api/ojs_runtime.js 22 0>>*/ function
     caml_js_wrap_callback_strict
     (arity,f)
     { /*<</home/omar/.opam/4.03.0/lib/gen_js_api/ojs_runtime.js 23 2>>*/ return function
       ()
       { /*<</home/omar/.opam/4.03.0/lib/gen_js_api/ojs_runtime.js 24 4>>*/  /*<</home/omar/.opam/4.03.0/lib/gen_js_api/ojs_runtime.js 24 10>>*/ var
         n=
          arguments.length;
         /*<</home/omar/.opam/4.03.0/lib/gen_js_api/ojs_runtime.js 25 4>>*/ if
         (n==arity)
          /*<</home/omar/.opam/4.03.0/lib/gen_js_api/ojs_runtime.js 25 19>>*/ return  /*<</home/omar/.opam/4.03.0/lib/gen_js_api/ojs_runtime.js 25 26>>*/ caml_call_gen
                 (f,arguments);
         /*<</home/omar/.opam/4.03.0/lib/gen_js_api/ojs_runtime.js 24 4>>*/  /*<</home/omar/.opam/4.03.0/lib/gen_js_api/ojs_runtime.js 26 13>>*/ var
         args=
          new Array(arity);
         /*<</home/omar/.opam/4.03.0/lib/gen_js_api/ojs_runtime.js 27 4>>*/ for
         ( /*<</home/omar/.opam/4.03.0/lib/gen_js_api/ojs_runtime.js 27 15>>*/ var
           i=
            0;
          i<
          n&&
          i<
          arity;
          i++)
         args[i]=arguments[i];
         /*<</home/omar/.opam/4.03.0/lib/gen_js_api/ojs_runtime.js 28 4>>*/ return  /*<</home/omar/.opam/4.03.0/lib/gen_js_api/ojs_runtime.js 28 11>>*/ caml_call_gen
                (f,args) /*<</home/omar/.opam/4.03.0/lib/gen_js_api/ojs_runtime.js 23 9>>*/ } /*<</home/omar/.opam/4.03.0/lib/gen_js_api/ojs_runtime.js 30 0>>*/ }
     /*<<stdlib.js 303 0>>*/ function caml_make_vect(len,init)
     { /*<<stdlib.js 304 2>>*/ var
        /*<<stdlib.js 304 10>>*/ len=len+1|0,
        /*<<stdlib.js 305 8>>*/ b=new Array(len);
      b[0]=0;
       /*<<stdlib.js 307 2>>*/ for
       ( /*<<stdlib.js 307 13>>*/ var i=1;i<len;i++)
       b[i]=init;
       /*<<stdlib.js 308 2>>*/ return b /*<<stdlib.js 309 0>>*/ }
     /*<<stdlib.js 135 0>>*/ function caml_raise_sys_error(msg)
     { /*<<stdlib.js 136 2>>*/ caml_raise_with_string
       (caml_global_data.Sys_error,msg) /*<<stdlib.js 137 0>>*/ }
     /*<<io.js 346 0>>*/ function caml_ml_flush(oc)
     { /*<<io.js 347 4>>*/ if(!oc.opened)
        /*<<io.js 347 20>>*/ caml_raise_sys_error
        ("Cannot flush a closed channel");
       /*<<io.js 348 4>>*/ if(oc.buffer=="") /*<<io.js 348 24>>*/ return 0;
       /*<<io.js 349 4>>*/ if(oc.output)
        /*<<io.js 350 6>>*/ switch(oc.output.length)
        {case 2:
           /*<<io.js 351 14>>*/ oc.output(oc,oc.buffer);
           /*<<io.js 351 38>>*/ break;
         default: /*<<io.js 352 15>>*/ oc.output(oc.buffer)}
      oc.buffer="";
       /*<<io.js 356 4>>*/ return 0 /*<<io.js 357 0>>*/ }
     /*<<fs.js 25 0>>*/  /*<<fs.js 25 15>>*/ var file_inode=0;
     /*<<unix.js 2 0>>*/ function unix_gettimeofday()
     { /*<<unix.js 3 2>>*/ return  /*<<unix.js 3 9>>*/ new Date().getTime()/
             1e3 /*<<unix.js 4 0>>*/ }
     /*<<unix.js 8 0>>*/ function unix_time()
     { /*<<unix.js 9 2>>*/ return  /*<<unix.js 9 9>>*/ Math.floor
              ( /*<<unix.js 9 20>>*/ unix_gettimeofday()) /*<<unix.js 10 0>>*/ }
     /*<<fs.js 51 0>>*/ function MlFile(content)
     {this.data=content;
      this.inode=file_inode++;
       /*<<fs.js 53 26>>*/  /*<<fs.js 53 34>>*/ var
       now=
         /*<<fs.js 53 36>>*/ unix_time();
      this.atime=now;
      this.mtime=now;
      this.ctime=now /*<<fs.js 57 0>>*/ }
    MlFile.prototype=
    {truncate:
     function()
      {this.data= /*<<fs.js 60 16>>*/ caml_create_string(0);
        /*<<fs.js 61 4>>*/ this.modified() /*<<fs.js 59 11>>*/ },
     modified:
     function()
      { /*<<fs.js 64 4>>*/  /*<<fs.js 64 12>>*/ var
        now=
          /*<<fs.js 64 14>>*/ unix_time();
       this.atime=now;
       this.mtime=now /*<<fs.js 63 11>>*/ }};
     /*<<mlString.js 408 0>>*/ function caml_ml_string_length(s)
     { /*<<mlString.js 408 36>>*/ return s.l /*<<mlString.js 408 47>>*/ }
     /*<<fs.js 93 0>>*/ function caml_raise_no_such_file(name)
     {name=name instanceof MlString? /*<<fs.js 94 36>>*/ name.toString():name;
       /*<<fs.js 95 2>>*/ caml_raise_sys_error
       (name+": No such file or directory") /*<<fs.js 96 0>>*/ }
     /*<<fs.js 23 0>>*/  /*<<fs.js 23 21>>*/ var caml_current_dir="/";
     /*<<fs.js 107 0>>*/ function caml_make_path(name)
     {name=
      name instanceof MlString? /*<<fs.js 108 34>>*/ name.toString():name;
       /*<<fs.js 109 2>>*/ if( /*<<fs.js 109 5>>*/ name.charCodeAt(0)!=47)
       name=caml_current_dir+name;
       /*<<fs.js 111 2>>*/ var
        /*<<fs.js 111 11>>*/ comp= /*<<fs.js 111 13>>*/ name.split("/"),
        /*<<fs.js 112 12>>*/ ncomp=[];
       /*<<fs.js 113 2>>*/ for
       ( /*<<fs.js 113 12>>*/ var i=0;i<comp.length;i++)
        /*<<fs.js 113 36>>*/ switch(comp[i])
        {case "..":
           /*<<fs.js 115 15>>*/ if(ncomp.length>1)
            /*<<fs.js 115 34>>*/ ncomp.pop();
           /*<<fs.js 115 47>>*/ break;
         case ".": /*<<fs.js 116 14>>*/ break;
         case "":
           /*<<fs.js 117 13>>*/ if(ncomp.length==0)
            /*<<fs.js 117 35>>*/ ncomp.push("");
           /*<<fs.js 117 51>>*/ break;
         default:
           /*<<fs.js 118 13>>*/ ncomp.push(comp[i]);
           /*<<fs.js 118 33>>*/ break}
      ncomp.orig=name;
       /*<<fs.js 122 2>>*/ return ncomp /*<<fs.js 124 0>>*/ }
     /*<<fs.js 29 0>>*/ function MlDir()
     {this.content={};
      this.inode=file_inode++;
       /*<<fs.js 31 18>>*/  /*<<fs.js 31 26>>*/ var
       now=
         /*<<fs.js 31 28>>*/ unix_time();
      this.atime=now;
      this.mtime=now;
      this.ctime=now /*<<fs.js 35 18>>*/ }
    MlDir.prototype=
    {exists:
     function(name)
      { /*<<fs.js 37 24>>*/ return this.content[name]?1:0 /*<<fs.js 37 9>>*/ },
     mk:function(name,c){this.content[name]=c /*<<fs.js 38 5>>*/ },
     get:
     function(name)
      { /*<<fs.js 39 21>>*/ return this.content[name] /*<<fs.js 39 6>>*/ },
     list:
     function()
      { /*<<fs.js 41 4>>*/  /*<<fs.js 41 10>>*/ var a=[];
        /*<<fs.js 42 4>>*/ for(var n in this.content)
         /*<<fs.js 43 6>>*/ a.push(n);
        /*<<fs.js 44 4>>*/ return a /*<<fs.js 40 7>>*/ },
     remove:function(name){delete this.content[name] /*<<fs.js 46 9>>*/ }};
     /*<<fs.js 72 0>>*/  /*<<fs.js 72 18>>*/ var caml_root_dir=new MlDir();
     /*<<fs.js 73 0>>*/ caml_root_dir.mk("",new MlDir());
     /*<<fs.js 210 0>>*/ function caml_fs_content(path)
     { /*<<fs.js 211 2>>*/  /*<<fs.js 211 10>>*/ var dir=caml_root_dir;
       /*<<fs.js 212 2>>*/ for
       ( /*<<fs.js 212 11>>*/ var i=0;i<path.length;i++)
        /*<<fs.js 212 32>>*/ { /*<<fs.js 213 4>>*/ if
         (!(dir.exists&& /*<<fs.js 213 23>>*/ dir.exists(path[i])))
          /*<<fs.js 213 45>>*/ caml_raise_no_such_file(path.orig);
        dir= /*<<fs.js 214 8>>*/ dir.get(path[i])}
       /*<<fs.js 216 2>>*/ return dir /*<<fs.js 217 0>>*/ }
     /*<<fs.js 285 0>>*/ function caml_sys_is_directory(name)
     { /*<<fs.js 286 2>>*/ var
        /*<<fs.js 286 11>>*/ path= /*<<fs.js 286 13>>*/ caml_make_path(name),
        /*<<fs.js 287 10>>*/ dir= /*<<fs.js 287 12>>*/ caml_fs_content(path);
       /*<<fs.js 288 2>>*/ return dir instanceof MlDir?1:0 /*<<fs.js 289 0>>*/ }
     /*<<mlString.js 308 0>>*/ function caml_string_of_array(a)
     { /*<<mlString.js 308 36>>*/ return new MlString(4,a,a.length) /*<<mlString.js 308 71>>*/ }
     /*<<mlString.js 276 0>>*/ function caml_array_of_string(s)
     { /*<<mlString.js 277 2>>*/ if(s.t!=4)
        /*<<mlString.js 277 28>>*/ caml_convert_string_to_array(s);
       /*<<mlString.js 278 2>>*/ return s.c /*<<mlString.js 279 0>>*/ }
     /*<<fs.js 133 0>>*/ function caml_fs_register(name,content)
     { /*<<fs.js 134 2>>*/ var
        /*<<fs.js 134 11>>*/ path= /*<<fs.js 134 13>>*/ caml_make_path(name),
        /*<<fs.js 135 10>>*/ dir=caml_root_dir;
       /*<<fs.js 136 2>>*/ for
       ( /*<<fs.js 136 11>>*/ var i=0;i<path.length-1;i++)
        /*<<fs.js 136 34>>*/ { /*<<fs.js 137 4>>*/  /*<<fs.js 137 10>>*/ var
         d=
          path[i];
         /*<<fs.js 138 4>>*/ if(! /*<<fs.js 138 9>>*/ dir.exists(d))
          /*<<fs.js 139 6>>*/ dir.mk(d,new MlDir());
        dir= /*<<fs.js 140 10>>*/ dir.get(d);
         /*<<fs.js 141 4>>*/ if(!(dir instanceof MlDir))
          /*<<fs.js 142 6>>*/ caml_raise_sys_error
          (path.orig+" : file already exists")}
       /*<<fs.js 134 2>>*/  /*<<fs.js 144 8>>*/ var d=path[path.length-1];
       /*<<fs.js 145 2>>*/ if( /*<<fs.js 145 5>>*/ dir.exists(d))
        /*<<fs.js 145 20>>*/ caml_raise_sys_error
        (path.orig+" : file already exists");
       /*<<fs.js 146 2>>*/ if(content instanceof MlDir)
        /*<<fs.js 146 31>>*/ dir.mk(d,content);
      else
        /*<<fs.js 147 7>>*/ if(content instanceof MlFile)
         /*<<fs.js 147 37>>*/ dir.mk(d,content);
       else
         /*<<fs.js 148 7>>*/ if(content instanceof MlString)
          /*<<fs.js 148 39>>*/ dir.mk(d,new MlFile(content));
        else
          /*<<fs.js 149 7>>*/ if(content instanceof Array)
           /*<<fs.js 149 36>>*/ dir.mk
           (d,new MlFile( /*<<fs.js 149 56>>*/ caml_string_of_array(content)));
         else
           /*<<fs.js 150 7>>*/ if(content.toString)
            /*<<fs.js 150 28>>*/ { /*<<fs.js 151 4>>*/  /*<<fs.js 151 17>>*/ var
             mlstring=
               /*<<fs.js 151 19>>*/ caml_new_string
               ( /*<<fs.js 151 35>>*/ content.toString());
             /*<<fs.js 153 4>>*/ dir.mk(d,new MlFile(mlstring))}
          else
            /*<<fs.js 155 7>>*/ caml_invalid_argument("caml_fs_register");
       /*<<fs.js 156 2>>*/ return 0 /*<<fs.js 157 0>>*/ }
     /*<<fs.js 221 0>>*/ function caml_sys_file_exists(name)
     { /*<<fs.js 222 2>>*/ var
        /*<<fs.js 222 10>>*/ dir=caml_root_dir,
        /*<<fs.js 223 11>>*/ path= /*<<fs.js 223 13>>*/ caml_make_path(name),
       auto_load,
       pos;
       /*<<fs.js 226 2>>*/ for
       ( /*<<fs.js 226 11>>*/ var i=0;i<path.length;i++)
        /*<<fs.js 226 32>>*/ { /*<<fs.js 227 4>>*/ if(dir.auto)
          /*<<fs.js 227 17>>*/ {auto_load=dir.auto;pos=i}
         /*<<fs.js 228 4>>*/ if
         (!(dir.exists&& /*<<fs.js 228 23>>*/ dir.exists(path[i])))
          /*<<fs.js 228 45>>*/ return auto_load
                 ? /*<<fs.js 230 15>>*/ auto_load(path,pos)
                 :0;
        dir= /*<<fs.js 234 8>>*/ dir.get(path[i])}
       /*<<fs.js 236 2>>*/ return 1 /*<<fs.js 237 0>>*/ }
     /*<<io.js 34 0>>*/ function caml_sys_open_internal(idx,file,flags)
     { /*<<io.js 35 2>>*/ if(caml_global_data.fds===undefined)
       caml_global_data.fds=new Array();
      flags=flags?flags:{};
       /*<<io.js 37 2>>*/  /*<<io.js 37 11>>*/ var info={};
      info.file=file;
      info.offset=
      flags.append? /*<<io.js 39 29>>*/ caml_ml_string_length(file.data):0;
      info.flags=flags;
      caml_global_data.fds[idx]=info;
      caml_global_data.fd_last_idx=idx;
       /*<<io.js 43 2>>*/ return idx /*<<io.js 44 0>>*/ }
     /*<<io.js 45 0>>*/ function caml_sys_open(name,flags,_perms)
     { /*<<io.js 46 2>>*/  /*<<io.js 46 8>>*/ var f={};
       /*<<io.js 47 2>>*/ while(flags)
        /*<<io.js 47 14>>*/ { /*<<io.js 48 4>>*/ switch(flags[1])
         {case 0:f.rdonly=1; /*<<io.js 49 25>>*/ break;
          case 1:f.wronly=1; /*<<io.js 50 25>>*/ break;
          case 2:f.append=1; /*<<io.js 51 25>>*/ break;
          case 3:f.create=1; /*<<io.js 52 25>>*/ break;
          case 4:f.truncate=1; /*<<io.js 53 27>>*/ break;
          case 5:f.excl=1; /*<<io.js 54 24>>*/ break;
          case 6:f.binary=1; /*<<io.js 55 25>>*/ break;
          case 7:f.text=1; /*<<io.js 56 23>>*/ break;
          case 8:f.nonblock=1; /*<<io.js 57 27>>*/ break
          }
        flags=flags[2]}
       /*<<io.js 46 2>>*/ var
        /*<<io.js 61 12>>*/ name2= /*<<io.js 61 14>>*/ name.toString(),
        /*<<io.js 62 11>>*/ path= /*<<io.js 62 13>>*/ caml_make_path(name);
       /*<<io.js 63 2>>*/ if(f.rdonly&&f.wronly)
        /*<<io.js 64 4>>*/ caml_raise_sys_error
        (name2+" : flags Open_rdonly and Open_wronly are not compatible");
       /*<<io.js 65 2>>*/ if(f.text&&f.binary)
        /*<<io.js 66 4>>*/ caml_raise_sys_error
        (name2+" : flags Open_text and Open_binary are not compatible");
       /*<<io.js 67 2>>*/ if( /*<<io.js 67 6>>*/ caml_sys_file_exists(name))
        /*<<io.js 67 34>>*/ { /*<<io.js 68 4>>*/ if
         ( /*<<io.js 68 8>>*/ caml_sys_is_directory(name))
          /*<<io.js 68 37>>*/ caml_raise_sys_error(name2+" : is a directory");
         /*<<io.js 69 4>>*/ if(f.create&&f.excl)
          /*<<io.js 69 28>>*/ caml_raise_sys_error
          (name2+" : file already exists");
         /*<<io.js 70 4>>*/ var
          /*<<io.js 70 12>>*/ idx=
          caml_global_data.fd_last_idx?caml_global_data.fd_last_idx:0,
          /*<<io.js 71 13>>*/ file= /*<<io.js 71 15>>*/ caml_fs_content(path);
         /*<<io.js 72 4>>*/ if(f.truncate)
          /*<<io.js 72 19>>*/ file.truncate();
         /*<<io.js 73 4>>*/ return  /*<<io.js 73 11>>*/ caml_sys_open_internal
                (idx+1,file,f)}
      else
        /*<<io.js 74 9>>*/ if(f.create)
         /*<<io.js 74 23>>*/ { /*<<io.js 75 4>>*/  /*<<io.js 75 12>>*/ var
          idx=
           caml_global_data.fd_last_idx?caml_global_data.fd_last_idx:0;
          /*<<io.js 76 4>>*/ caml_fs_register
          (name, /*<<io.js 76 26>>*/ caml_create_string(0));
          /*<<io.js 75 4>>*/  /*<<io.js 77 13>>*/ var
          file=
            /*<<io.js 77 15>>*/ caml_fs_content(path);
          /*<<io.js 78 4>>*/ return  /*<<io.js 78 11>>*/ caml_sys_open_internal
                 (idx+1,file,f)}
       else
         /*<<io.js 80 7>>*/ caml_raise_no_such_file(name) /*<<io.js 81 0>>*/ }
     /*<<io.js 82 0>>*/ caml_sys_open_internal
     (0,new MlFile( /*<<io.js 82 36>>*/ caml_create_string(0)));
     /*<<io.js 83 0>>*/ caml_sys_open_internal
     (1,new MlFile( /*<<io.js 83 36>>*/ caml_create_string(0)));
     /*<<io.js 84 0>>*/ caml_sys_open_internal
     (2,new MlFile( /*<<io.js 84 36>>*/ caml_create_string(0)));
     /*<<io.js 153 0>>*/ function caml_ml_open_descriptor_in(fd)
     { /*<<io.js 154 2>>*/  /*<<io.js 154 11>>*/ var
       data=
        caml_global_data.fds[fd];
       /*<<io.js 155 2>>*/ if(data.flags.wronly)
        /*<<io.js 155 24>>*/ caml_raise_sys_error("fd "+fd+" is writeonly");
       /*<<io.js 157 2>>*/ return {file:data.file,
              offset:data.offset,
              fd:fd,
              opened:true,
              refill:null} /*<<io.js 164 0>>*/ }
     /*<<jslib.js 105 0>>*/ function js_print_stderr(s)
     { /*<<jslib.js 106 2>>*/  /*<<jslib.js 106 8>>*/ var g=joo_global_object;
       /*<<jslib.js 107 2>>*/ if
       (g.process&&g.process.stdout&&g.process.stdout.write)
        /*<<jslib.js 107 63>>*/  /*<<jslib.js 108 4>>*/ g.process.stderr.write
        (s);
      else
        /*<<jslib.js 109 9>>*/ { /*<<jslib.js 112 2>>*/ if
         ( /*<<jslib.js 112 5>>*/ s.charCodeAt(s.length-1)==10)
         s= /*<<jslib.js 113 8>>*/ s.substr(0,s.length-1);
         /*<<jslib.js 114 2>>*/  /*<<jslib.js 114 8>>*/ var v=g.console;
        v&&v.error&& /*<<jslib.js 115 18>>*/ v.error(s)} /*<<jslib.js 117 0>>*/ }
     /*<<jslib.js 91 0>>*/ function js_print_stdout(s)
     { /*<<jslib.js 92 2>>*/  /*<<jslib.js 92 8>>*/ var g=joo_global_object;
       /*<<jslib.js 93 2>>*/ if
       (g.process&&g.process.stdout&&g.process.stdout.write)
        /*<<jslib.js 93 63>>*/  /*<<jslib.js 94 4>>*/ g.process.stdout.write
        (s);
      else
        /*<<jslib.js 95 9>>*/ { /*<<jslib.js 98 2>>*/ if
         ( /*<<jslib.js 98 5>>*/ s.charCodeAt(s.length-1)==10)
         s= /*<<jslib.js 99 8>>*/ s.substr(0,s.length-1);
         /*<<jslib.js 100 2>>*/  /*<<jslib.js 100 8>>*/ var v=g.console;
        v&&v.log&& /*<<jslib.js 101 17>>*/ v.log(s)} /*<<jslib.js 103 0>>*/ }
     /*<<io.js 95 0>>*/  /*<<io.js 95 25>>*/ var
     caml_ml_out_channels=
      new Array();
     /*<<io.js 113 0>>*/ function caml_std_output(chan,s)
     { /*<<io.js 114 2>>*/ var
        /*<<io.js 114 10>>*/ str= /*<<io.js 114 12>>*/ caml_new_string(s),
        /*<<io.js 115 11>>*/ slen=
         /*<<io.js 115 13>>*/ caml_ml_string_length(str),
        /*<<io.js 116 11>>*/ clen=
         /*<<io.js 116 13>>*/ caml_ml_string_length(chan.file.data),
        /*<<io.js 117 13>>*/ offset=chan.offset;
       /*<<io.js 118 2>>*/ if(offset+slen>=clen)
        /*<<io.js 118 28>>*/ { /*<<io.js 119 4>>*/  /*<<io.js 119 16>>*/ var
         new_str=
           /*<<io.js 119 18>>*/ caml_create_string(offset+slen);
         /*<<io.js 120 4>>*/ caml_blit_string(chan.file.data,0,new_str,0,clen);
         /*<<io.js 121 4>>*/ caml_blit_string(str,0,new_str,offset,slen);
        chan.file.data=new_str}
      chan.offset+=slen;
       /*<<io.js 125 2>>*/ chan.file.modified();
       /*<<io.js 126 2>>*/ return 0 /*<<io.js 127 0>>*/ }
     /*<<io.js 129 0>>*/ function caml_ml_open_descriptor_out(fd)
     { /*<<io.js 130 2>>*/ var output;
       /*<<io.js 131 2>>*/ switch(fd)
       {case 1:output=js_print_stdout; /*<<io.js 132 35>>*/ break;
        case 2:output=js_print_stderr; /*<<io.js 133 35>>*/ break;
        default:output=caml_std_output}
       /*<<io.js 130 2>>*/  /*<<io.js 136 11>>*/ var
       data=
        caml_global_data.fds[fd];
       /*<<io.js 137 2>>*/ if(data.flags.rdonly)
        /*<<io.js 137 24>>*/ caml_raise_sys_error("fd "+fd+" is readonly");
       /*<<io.js 130 2>>*/  /*<<io.js 138 14>>*/ var
       channel=
        {file:data.file,
         offset:data.offset,
         fd:fd,
         opened:true,
         buffer:"",
         output:output};
      caml_ml_out_channels[channel.fd]=channel;
       /*<<io.js 148 2>>*/ return channel /*<<io.js 149 0>>*/ }
     /*<<io.js 99 0>>*/ function caml_ml_out_channels_list()
     { /*<<io.js 100 2>>*/  /*<<io.js 100 8>>*/ var l=0;
       /*<<io.js 101 2>>*/ for(var c in caml_ml_out_channels)
        /*<<io.js 101 36>>*/ if(caml_ml_out_channels[c].opened)
        l=[0,caml_ml_out_channels[c],l];
       /*<<io.js 105 2>>*/ return l /*<<io.js 106 0>>*/ }
     /*<<io.js 364 0>>*/ function caml_ml_output(oc,buffer,offset,len)
     { /*<<io.js 365 4>>*/ if(!oc.opened)
        /*<<io.js 365 20>>*/ caml_raise_sys_error
        ("Cannot output to a closed channel");
       /*<<io.js 366 4>>*/ var string;
       /*<<io.js 367 4>>*/ if
       (offset==0&& /*<<io.js 367 22>>*/ caml_ml_string_length(buffer)==len)
       string=buffer;
      else
        /*<<io.js 369 9>>*/ {string=
         /*<<io.js 370 17>>*/ caml_create_string(len);
         /*<<io.js 371 8>>*/ caml_blit_string(buffer,offset,string,0,len)}
       /*<<io.js 366 4>>*/ var
        /*<<io.js 373 17>>*/ jsstring= /*<<io.js 373 19>>*/ string.toString(),
        /*<<io.js 374 11>>*/ id=
         /*<<io.js 374 13>>*/ jsstring.lastIndexOf("\n");
       /*<<io.js 375 4>>*/ if(id<0)
       oc.buffer+=jsstring;
      else
        /*<<io.js 377 9>>*/ {oc.buffer+=
         /*<<io.js 378 19>>*/ jsstring.substr(0,id+1);
         /*<<io.js 379 8>>*/ caml_ml_flush(oc);
        oc.buffer+= /*<<io.js 380 21>>*/ jsstring.substr(id+1)}
       /*<<io.js 382 4>>*/ return 0 /*<<io.js 383 0>>*/ }
     /*<<io.js 387 0>>*/ function caml_ml_output_char(oc,c)
     { /*<<io.js 388 4>>*/  /*<<io.js 388 10>>*/ var
       s=
         /*<<io.js 388 12>>*/ caml_new_string
         ( /*<<io.js 388 28>>*/ String.fromCharCode(c));
       /*<<io.js 389 4>>*/ caml_ml_output(oc,s,0,1);
       /*<<io.js 390 4>>*/ return 0 /*<<io.js 391 0>>*/ }
     /*<<stdlib.js 416 0>>*/ function caml_notequal(x,y)
     { /*<<stdlib.js 416 32>>*/ return +( /*<<stdlib.js 416 41>>*/ caml_compare_val
               (x,y,false)!=
              0) /*<<stdlib.js 416 76>>*/ }
     /*<<stdlib.js 227 0>>*/ function caml_obj_block(tag,size)
     { /*<<stdlib.js 228 2>>*/  /*<<stdlib.js 228 8>>*/ var
       o=
        new Array(size+1);
      o[0]=tag;
       /*<<stdlib.js 230 2>>*/ for
       ( /*<<stdlib.js 230 13>>*/ var i=1;i<=size;i++)
       o[i]=0;
       /*<<stdlib.js 231 2>>*/ return o /*<<stdlib.js 232 0>>*/ }
     /*<<stdlib.js 220 0>>*/ function caml_obj_is_block(x)
     { /*<<stdlib.js 220 33>>*/ return +(x instanceof Array) /*<<stdlib.js 220 63>>*/ }
     /*<<stdlib.js 223 0>>*/ function caml_obj_tag(x)
     { /*<<stdlib.js 223 28>>*/ return x instanceof Array
              ?x[0]
              :x instanceof MlString?252:1e3 /*<<stdlib.js 223 95>>*/ }
     /*<</home/omar/.opam/4.03.0/lib/gen_js_api/ojs_runtime.js 34 0>>*/ function
     caml_ojs_new_arr
     (c,a)
     { /*<</home/omar/.opam/4.03.0/lib/gen_js_api/ojs_runtime.js 35 2>>*/ switch
       (a.length)
       {case 0:
          /*<</home/omar/.opam/4.03.0/lib/gen_js_api/ojs_runtime.js 36 10>>*/ return new
                 c
                 ();
        case 1:
          /*<</home/omar/.opam/4.03.0/lib/gen_js_api/ojs_runtime.js 37 10>>*/ return new
                 c
                 (a[0]);
        case 2:
          /*<</home/omar/.opam/4.03.0/lib/gen_js_api/ojs_runtime.js 38 10>>*/ return new
                 c
                 (a[0],a[1]);
        case 3:
          /*<</home/omar/.opam/4.03.0/lib/gen_js_api/ojs_runtime.js 39 10>>*/ return new
                 c
                 (a[0],a[1],a[2]);
        case 4:
          /*<</home/omar/.opam/4.03.0/lib/gen_js_api/ojs_runtime.js 40 10>>*/ return new
                 c
                 (a[0],a[1],a[2],a[3]);
        case 5:
          /*<</home/omar/.opam/4.03.0/lib/gen_js_api/ojs_runtime.js 41 10>>*/ return new
                 c
                 (a[0],a[1],a[2],a[3],a[4]);
        case 6:
          /*<</home/omar/.opam/4.03.0/lib/gen_js_api/ojs_runtime.js 42 10>>*/ return new
                 c
                 (a[0],a[1],a[2],a[3],a[4],a[5]);
        case 7:
          /*<</home/omar/.opam/4.03.0/lib/gen_js_api/ojs_runtime.js 43 10>>*/ return new
                 c
                 (a[0],a[1],a[2],a[3],a[4],a[5],a[6])
        }
       /*<</home/omar/.opam/4.03.0/lib/gen_js_api/ojs_runtime.js 45 2>>*/ function
       F
       ()
       { /*<</home/omar/.opam/4.03.0/lib/gen_js_api/ojs_runtime.js 45 17>>*/ return  /*<</home/omar/.opam/4.03.0/lib/gen_js_api/ojs_runtime.js 45 24>>*/ c.apply
                (this,a) /*<</home/omar/.opam/4.03.0/lib/gen_js_api/ojs_runtime.js 45 42>>*/ }
      F.prototype=c.prototype;
       /*<</home/omar/.opam/4.03.0/lib/gen_js_api/ojs_runtime.js 47 2>>*/ return new
              F
              () /*<</home/omar/.opam/4.03.0/lib/gen_js_api/ojs_runtime.js 48 0>>*/ }
     /*<<stdlib.js 96 0>>*/ function caml_register_global(n,v,name_opt)
     {caml_global_data[n+1]=v;
       /*<<stdlib.js 98 2>>*/ if(name_opt)caml_global_data[name_opt]=v /*<<stdlib.js 99 0>>*/ }
     /*<<stdlib.js 76 0>>*/  /*<<stdlib.js 76 22>>*/ var caml_named_values={};
     /*<<stdlib.js 80 0>>*/ function caml_register_named_value(nm,v)
     {caml_named_values[ /*<<stdlib.js 81 20>>*/ caml_bytes_of_string(nm)]=v;
       /*<<stdlib.js 82 2>>*/ return 0 /*<<stdlib.js 83 0>>*/ }
     /*<<mlString.js 222 0>>*/ function caml_string_bound_error()
     { /*<<mlString.js 223 2>>*/ caml_invalid_argument("index out of bounds") /*<<mlString.js 224 0>>*/ }
     /*<<mlString.js 192 0>>*/ function caml_string_unsafe_get(s,i)
     { /*<<mlString.js 193 2>>*/ switch(s.t&6)
       {default:
          /*<<mlString.js 195 4>>*/ if(i>=s.c.length)
           /*<<mlString.js 195 25>>*/ return 0;case 0:
          /*<<mlString.js 197 4>>*/ return  /*<<mlString.js 197 11>>*/ s.c.charCodeAt
                 (i);
        case 4: /*<<mlString.js 199 4>>*/ return s.c[i]
        } /*<<mlString.js 201 0>>*/ }
     /*<<mlString.js 228 0>>*/ function caml_string_get(s,i)
     { /*<<mlString.js 229 2>>*/ if(i>>>0>=s.l)
        /*<<mlString.js 229 22>>*/ caml_string_bound_error();
       /*<<mlString.js 230 2>>*/ return  /*<<mlString.js 230 9>>*/ caml_string_unsafe_get
              (s,i) /*<<mlString.js 231 0>>*/ }
     /*<<mlString.js 320 0>>*/ function caml_string_equal(s1,s2)
     {s1.t&6&& /*<<mlString.js 321 16>>*/ caml_convert_string_to_bytes(s1);
      s2.t&6&& /*<<mlString.js 322 16>>*/ caml_convert_string_to_bytes(s2);
       /*<<mlString.js 323 2>>*/ return s1.c==s2.c?1:0 /*<<mlString.js 324 0>>*/ }
     /*<<mlString.js 328 0>>*/ function caml_string_notequal(s1,s2)
     { /*<<mlString.js 328 40>>*/ return 1-
              /*<<mlString.js 328 49>>*/ caml_string_equal(s1,s2) /*<<mlString.js 328 76>>*/ }
     /*<<mlString.js 205 0>>*/ function caml_string_unsafe_set(s,i,c)
     {c&=255;
       /*<<mlString.js 208 2>>*/ if(s.t!=4)
        /*<<mlString.js 208 28>>*/ { /*<<mlString.js 209 4>>*/ if
         (i==s.c.length)
          /*<<mlString.js 209 25>>*/ {s.c+=
           /*<<mlString.js 210 13>>*/ String.fromCharCode(c);
           /*<<mlString.js 211 6>>*/ if(i+1==s.l)s.t=0;
           /*<<mlString.js 212 6>>*/ return 0}
         /*<<mlString.js 214 4>>*/ caml_convert_string_to_array(s)}
      s.c[i]=c;
       /*<<mlString.js 217 2>>*/ return 0 /*<<mlString.js 218 0>>*/ }
     /*<<mlString.js 235 0>>*/ function caml_string_set(s,i,c)
     { /*<<mlString.js 236 2>>*/ if(i>>>0>=s.l)
        /*<<mlString.js 236 22>>*/ caml_string_bound_error();
       /*<<mlString.js 237 2>>*/ return  /*<<mlString.js 237 9>>*/ caml_string_unsafe_set
              (s,i,c) /*<<mlString.js 238 0>>*/ }
     /*<<stdlib.js 925 0>>*/ function caml_sys_const_max_wosize()
     { /*<<stdlib.js 925 40>>*/ return 2147483647/4|0 /*<<stdlib.js 925 66>>*/ }
     /*<<stdlib.js 1040 0>>*/ function caml_sys_exit(code)
     { /*<<stdlib.js 1041 2>>*/  /*<<stdlib.js 1041 8>>*/ var
       g=
        joo_global_object;
       /*<<stdlib.js 1042 2>>*/ if(g.quit)
        /*<<stdlib.js 1042 13>>*/ g.quit(code);
       /*<<stdlib.js 1044 2>>*/ if(g.process&&g.process.exit)
        /*<<stdlib.js 1044 34>>*/ g.process.exit(code);
       /*<<stdlib.js 1045 2>>*/ caml_invalid_argument
       ("Function 'exit' not implemented") /*<<stdlib.js 1046 0>>*/ }
     /*<<stdlib.js 213 0>>*/ function caml_update_dummy(x,y)
     { /*<<stdlib.js 214 2>>*/ if(typeof y==="function")
        /*<<stdlib.js 214 30>>*/ {x.fun=y; /*<<stdlib.js 214 43>>*/ return 0}
       /*<<stdlib.js 215 2>>*/ if(y.fun)
        /*<<stdlib.js 215 14>>*/ {x.fun=y.fun;
         /*<<stdlib.js 215 31>>*/ return 0}
       /*<<stdlib.js 216 2>>*/  /*<<stdlib.js 216 8>>*/ var i=y.length;
       /*<<stdlib.js 216 20>>*/ while(i--)x[i]=y[i];
       /*<<stdlib.js 216 45>>*/ return 0 /*<<stdlib.js 217 0>>*/ }
     /*<<stdlib.js 122 0>>*/ function caml_return_exn_constant(tag)
     { /*<<stdlib.js 122 42>>*/ return tag /*<<stdlib.js 122 54>>*/ }
     /*<<stdlib.js 87 0>>*/ function caml_named_value(nm)
     { /*<<stdlib.js 88 2>>*/ return caml_named_values[nm] /*<<stdlib.js 89 0>>*/ }
     /*<<stdlib.js 148 0>>*/ function caml_wrap_exception(e)
     { /*<<stdlib.js 149 2>>*/ if(e instanceof Array)
        /*<<stdlib.js 149 25>>*/ return e;
       /*<<stdlib.js 151 2>>*/ if
       (joo_global_object.RangeError&&
        e instanceof joo_global_object.RangeError&&
        e.message&&
         /*<<stdlib.js 154 8>>*/ e.message.match(/maximum call stack/i))
        /*<<stdlib.js 155 4>>*/ return  /*<<stdlib.js 155 11>>*/ caml_return_exn_constant
               (caml_global_data.Stack_overflow);
       /*<<stdlib.js 157 2>>*/ if
       (joo_global_object.InternalError&&
        e instanceof joo_global_object.InternalError&&
        e.message&&
         /*<<stdlib.js 160 8>>*/ e.message.match(/too much recursion/i))
        /*<<stdlib.js 161 4>>*/ return  /*<<stdlib.js 161 11>>*/ caml_return_exn_constant
               (caml_global_data.Stack_overflow);
       /*<<stdlib.js 163 2>>*/ if(e instanceof joo_global_object.Error)
        /*<<stdlib.js 164 4>>*/ return [0,
                /*<<stdlib.js 164 14>>*/ caml_named_value("jsError"),
               e];
       /*<<stdlib.js 166 2>>*/ return [0,
              caml_global_data.Failure,
               /*<<stdlib.js 166 37>>*/ caml_js_to_string
               ( /*<<stdlib.js 166 56>>*/ String(e))] /*<<stdlib.js 167 0>>*/ }
     /*<<?>>*/ function caml_call1(f,a0)
     {return f.length==1?f(a0):caml_call_gen(f,[a0])}
     /*<<?>>*/ function caml_call2(f,a0,a1)
     {return f.length==2?f(a0,a1):caml_call_gen(f,[a0,a1])}
     /*<<?>>*/ function caml_call3(f,a0,a1,a2)
     {return f.length==3?f(a0,a1,a2):caml_call_gen(f,[a0,a1,a2])}
     /*<<?>>*/ function caml_call5(f,a0,a1,a2,a3,a4)
     {return f.length==5?f(a0,a1,a2,a3,a4):caml_call_gen(f,[a0,a1,a2,a3,a4])}
    var
     Out_of_memory=[248,caml_new_string("Out_of_memory"),-1],
     Sys_error=[248,caml_new_string("Sys_error"),-2],
     Failure=[248,caml_new_string("Failure"),-3],
     Invalid_argument=[248,caml_new_string("Invalid_argument"),-4],
     End_of_file=[248,caml_new_string("End_of_file"),-5],
     Division_by_zero=[248,caml_new_string("Division_by_zero"),-6],
     Not_found=[248,caml_new_string("Not_found"),-7],
     Match_failure=[248,caml_new_string("Match_failure"),-8],
     Stack_overflow=[248,caml_new_string("Stack_overflow"),-9],
     Sys_blocked_io=[248,caml_new_string("Sys_blocked_io"),-10],
     Assert_failure=[248,caml_new_string("Assert_failure"),-11],
     Undefined_recursive_module=
      [248,caml_new_string("Undefined_recursive_module"),-12],
     s=caml_new_string("Buffer.add: cannot grow buffer"),
     locfmt=
      [0,
       [11,
        caml_new_string('File "'),
        [2,
         0,
         [11,
          caml_new_string('", line '),
          [4,
           0,
           0,
           0,
           [11,
            caml_new_string(", characters "),
            [4,0,0,0,[12,45,[4,0,0,0,[11,caml_new_string(": "),[2,0,0]]]]]]]]]],
       caml_new_string('File "%s", line %d, characters %d-%d: %s')],
     state_return_unit=[0,0],
     name=caml_new_string("div"),
     pub_meths=[0,caml_new_string("to_js")],
     _cF_=[0,0],
     _cG_=[0,0],
     centre=[0,49.2,2],
     _c6_=[0,0],
     my_position_img=caml_new_string("bluepoint.png"),
     coordinates=
      [0,
       [0,48.867979,2.353407],
       [0,[0,48.867436,2.351079],[0,[0,48.866074,2.353193],0]]],
     names=
      [0,
       caml_new_string("Bob"),
       [0,caml_new_string("Alice"),[0,caml_new_string("John"),0]]],
     urls=
      [0,
       caml_new_string
        ("http://static.fnac-static.com/multimedia/Images/FR/NR/91/54/65/6640785/1502-1.jpg"),
       [0,
        caml_new_string
         ("http://www.famfamfam.com/lab/icons/silk/icons/disk.png"),
        [0,
         caml_new_string
          ("http://www.famfamfam.com/lab/icons/silk/icons/magnifier.png"),
         0]]];
    caml_register_global
     (11,Undefined_recursive_module,"Undefined_recursive_module");
    caml_register_global(10,Assert_failure,"Assert_failure");
    caml_register_global(9,Sys_blocked_io,"Sys_blocked_io");
    caml_register_global(8,Stack_overflow,"Stack_overflow");
    caml_register_global(7,Match_failure,"Match_failure");
    caml_register_global(6,Not_found,"Not_found");
    caml_register_global(5,Division_by_zero,"Division_by_zero");
    caml_register_global(4,End_of_file,"End_of_file");
    caml_register_global(3,Invalid_argument,"Invalid_argument");
    caml_register_global(2,Failure,"Failure");
    caml_register_global(1,Sys_error,"Sys_error");
    caml_register_global(0,Out_of_memory,"Out_of_memory");
    var
     _e_=caml_new_string("%.12g"),
     _d_=caml_new_string("."),
     _b_=caml_new_string("true"),
     _c_=caml_new_string("false"),
     _f_=caml_new_string("\\\\"),
     _g_=caml_new_string("\\'"),
     _h_=caml_new_string("\\b"),
     _i_=caml_new_string("\\t"),
     _j_=caml_new_string("\\n"),
     _k_=caml_new_string("\\r"),
     _n_=caml_new_string("String.blit / Bytes.blit_string"),
     _m_=caml_new_string("Bytes.blit"),
     _l_=caml_new_string("String.sub / Bytes.sub"),
     _p_=caml_new_string("Array.blit"),
     _o_=caml_new_string("Array.init"),
     _x_=caml_new_string("Map.remove_min_elt"),
     _y_=[0,0,0,0],
     _z_=[0,caml_new_string("map.ml"),274,10],
     _A_=[0,0,0],
     _t_=caml_new_string("Map.bal"),
     _u_=caml_new_string("Map.bal"),
     _v_=caml_new_string("Map.bal"),
     _w_=caml_new_string("Map.bal"),
     _C_=caml_new_string("Queue.Empty"),
     _L_=caml_new_string("%c"),
     _M_=caml_new_string("%s"),
     _N_=caml_new_string("%i"),
     _O_=caml_new_string("%li"),
     _P_=caml_new_string("%ni"),
     _Q_=caml_new_string("%Li"),
     _R_=caml_new_string("%f"),
     _S_=caml_new_string("%B"),
     _T_=caml_new_string("%{"),
     _U_=caml_new_string("%}"),
     _V_=caml_new_string("%("),
     _W_=caml_new_string("%)"),
     _X_=caml_new_string("%a"),
     _Y_=caml_new_string("%t"),
     _Z_=caml_new_string("%?"),
     ___=caml_new_string("%r"),
     _$_=caml_new_string("%_r"),
     _aa_=[0,caml_new_string("camlinternalFormat.ml"),845,23],
     _al_=[0,caml_new_string("camlinternalFormat.ml"),809,21],
     _ad_=[0,caml_new_string("camlinternalFormat.ml"),810,21],
     _am_=[0,caml_new_string("camlinternalFormat.ml"),813,21],
     _ae_=[0,caml_new_string("camlinternalFormat.ml"),814,21],
     _an_=[0,caml_new_string("camlinternalFormat.ml"),817,19],
     _af_=[0,caml_new_string("camlinternalFormat.ml"),818,19],
     _ao_=[0,caml_new_string("camlinternalFormat.ml"),821,22],
     _ag_=[0,caml_new_string("camlinternalFormat.ml"),822,22],
     _ap_=[0,caml_new_string("camlinternalFormat.ml"),826,30],
     _ah_=[0,caml_new_string("camlinternalFormat.ml"),827,30],
     _aj_=[0,caml_new_string("camlinternalFormat.ml"),831,26],
     _ab_=[0,caml_new_string("camlinternalFormat.ml"),832,26],
     _ak_=[0,caml_new_string("camlinternalFormat.ml"),841,28],
     _ac_=[0,caml_new_string("camlinternalFormat.ml"),842,28],
     _ai_=[0,caml_new_string("camlinternalFormat.ml"),846,23],
     _bm_=caml_new_string("%u"),
     _bk_=[0,caml_new_string("camlinternalFormat.ml"),1520,4],
     _bl_=caml_new_string("Printf: bad conversion %["),
     _bn_=[0,caml_new_string("camlinternalFormat.ml"),1588,39],
     _bo_=[0,caml_new_string("camlinternalFormat.ml"),1611,31],
     _bp_=[0,caml_new_string("camlinternalFormat.ml"),1612,31],
     _bq_=caml_new_string("Printf: bad conversion %_"),
     _br_=caml_new_string("@{"),
     _bs_=caml_new_string("@["),
     _bt_=caml_new_string("@{"),
     _bu_=caml_new_string("@["),
     _bi_=caml_new_string("nan"),
     _bj_=caml_new_string("."),
     _bg_=caml_new_string("neg_infinity"),
     _bh_=caml_new_string("infinity"),
     _bf_=caml_new_string("%.12g"),
     _a4_=caml_new_string("%nd"),
     _a5_=caml_new_string("%+nd"),
     _a6_=caml_new_string("% nd"),
     _a7_=caml_new_string("%ni"),
     _a8_=caml_new_string("%+ni"),
     _a9_=caml_new_string("% ni"),
     _a__=caml_new_string("%nx"),
     _a$_=caml_new_string("%#nx"),
     _ba_=caml_new_string("%nX"),
     _bb_=caml_new_string("%#nX"),
     _bc_=caml_new_string("%no"),
     _bd_=caml_new_string("%#no"),
     _be_=caml_new_string("%nu"),
     _aR_=caml_new_string("%ld"),
     _aS_=caml_new_string("%+ld"),
     _aT_=caml_new_string("% ld"),
     _aU_=caml_new_string("%li"),
     _aV_=caml_new_string("%+li"),
     _aW_=caml_new_string("% li"),
     _aX_=caml_new_string("%lx"),
     _aY_=caml_new_string("%#lx"),
     _aZ_=caml_new_string("%lX"),
     _a0_=caml_new_string("%#lX"),
     _a1_=caml_new_string("%lo"),
     _a2_=caml_new_string("%#lo"),
     _a3_=caml_new_string("%lu"),
     _aE_=caml_new_string("%Ld"),
     _aF_=caml_new_string("%+Ld"),
     _aG_=caml_new_string("% Ld"),
     _aH_=caml_new_string("%Li"),
     _aI_=caml_new_string("%+Li"),
     _aJ_=caml_new_string("% Li"),
     _aK_=caml_new_string("%Lx"),
     _aL_=caml_new_string("%#Lx"),
     _aM_=caml_new_string("%LX"),
     _aN_=caml_new_string("%#LX"),
     _aO_=caml_new_string("%Lo"),
     _aP_=caml_new_string("%#Lo"),
     _aQ_=caml_new_string("%Lu"),
     _ar_=caml_new_string("%d"),
     _as_=caml_new_string("%+d"),
     _at_=caml_new_string("% d"),
     _au_=caml_new_string("%i"),
     _av_=caml_new_string("%+i"),
     _aw_=caml_new_string("% i"),
     _ax_=caml_new_string("%x"),
     _ay_=caml_new_string("%#x"),
     _az_=caml_new_string("%X"),
     _aA_=caml_new_string("%#X"),
     _aB_=caml_new_string("%o"),
     _aC_=caml_new_string("%#o"),
     _aD_=caml_new_string("%u"),
     _D_=caml_new_string("@]"),
     _E_=caml_new_string("@}"),
     _F_=caml_new_string("@?"),
     _G_=caml_new_string("@\n"),
     _H_=caml_new_string("@."),
     _I_=caml_new_string("@@"),
     _J_=caml_new_string("@%"),
     _K_=caml_new_string("@"),
     _aq_=caml_new_string("CamlinternalFormat.Type_mismatch"),
     _by_=caml_new_string(""),
     _bz_=
      [0,[11,caml_new_string(", "),[2,0,[2,0,0]]],caml_new_string(", %s%s")],
     _bP_=[0,[2,0,[12,10,0]],caml_new_string("%s\n")],
     _bQ_=
      [0,
       [11,
        caml_new_string
         ("(Program not linked with -g, cannot print stack backtrace)\n"),
        0],
       caml_new_string
        ("(Program not linked with -g, cannot print stack backtrace)\n")],
     _bJ_=caml_new_string("Raised at"),
     _bK_=caml_new_string("Re-raised at"),
     _bL_=caml_new_string("Raised by primitive operation at"),
     _bM_=caml_new_string("Called from"),
     _bN_=
      [0,
       [2,
        0,
        [11,
         caml_new_string(' file "'),
         [2,
          0,
          [11,
           caml_new_string('", line '),
           [4,
            0,
            0,
            0,
            [11,
             caml_new_string(", characters "),
             [4,0,0,0,[12,45,[4,0,0,0,0]]]]]]]]],
       caml_new_string('%s file "%s", line %d, characters %d-%d')],
     _bO_=
      [0,
       [2,0,[11,caml_new_string(" unknown location"),0]],
       caml_new_string("%s unknown location")],
     _bE_=caml_new_string("Out of memory"),
     _bF_=caml_new_string("Stack overflow"),
     _bG_=caml_new_string("Pattern matching failed"),
     _bH_=caml_new_string("Assertion failed"),
     _bI_=caml_new_string("Undefined recursive module"),
     _bA_=[0,[12,40,[2,0,[2,0,[12,41,0]]]],caml_new_string("(%s%s)")],
     _bB_=caml_new_string(""),
     _bC_=caml_new_string(""),
     _bD_=[0,[12,40,[2,0,[12,41,0]]],caml_new_string("(%s)")],
     _bx_=[0,[4,0,0,0,0],caml_new_string("%d")],
     _bv_=[0,[3,0,0],caml_new_string("%S")],
     _bw_=caml_new_string("_"),
     _bR_=caml_new_string(""),
     _bT_=caml_new_string("Lwt_sequence.Empty"),
     _b7_=[0,caml_new_string("src/core/lwt.ml"),1223,20],
     _b8_=[0,caml_new_string("src/core/lwt.ml"),1226,8],
     _b4_=[0,caml_new_string("src/core/lwt.ml"),806,20],
     _b5_=[0,caml_new_string("src/core/lwt.ml"),808,8],
     _b2_=[0,caml_new_string("src/core/lwt.ml"),699,20],
     _b3_=[0,caml_new_string("src/core/lwt.ml"),702,8],
     _b0_=[0,caml_new_string("src/core/lwt.ml"),655,20],
     _b1_=[0,caml_new_string("src/core/lwt.ml"),658,8],
     _bZ_=[0,caml_new_string("src/core/lwt.ml"),498,8],
     _bY_=[0,caml_new_string("src/core/lwt.ml"),487,9],
     _bX_=caml_new_string("Lwt.wakeup_later_result"),
     _bW_=caml_new_string("Lwt.wakeup_result"),
     _bV_=caml_new_string("Fatal error: exception "),
     _bU_=caml_new_string("Lwt.Canceled"),
     _b9_=caml_new_string("Js.Error"),
     _b__=caml_new_string("button"),
     _b$_=caml_new_string("Exception during Lwt.async: "),
     _ca_=caml_new_string("Lwt_js_event"),
     _cd_=caml_new_string(""),
     _cf_=caml_new_string("to_js"),
     _cR_=caml_new_string(""),
     _cS_=caml_new_string(""),
     _cT_=caml_new_string(""),
     _cU_=caml_new_string(""),
     _cQ_=caml_new_string("Lists have different size"),
     _cM_=caml_new_string("</p>"),
     _cN_=caml_new_string('" />\n      <p>'),
     _cO_=caml_new_string('" alt="'),
     _cP_=caml_new_string('<img src="'),
     _cL_=caml_new_string("Lists have different size"),
     _cK_=[0,0],
     _cH_=caml_new_string("#000000"),
     _cA_=caml_new_string("Timeout"),
     _cB_=caml_new_string("Unknown"),
     _cC_=caml_new_string("Geolocation not supported"),
     _cp_=caml_new_string("Web.NoLocation"),
     _ct_=[0,17],
     _cu_=[0,0],
     _cv_=[0,caml_new_string("Ma position")],
     _cw_=[0,0],
     _cx_=[0,1],
     _cW_=
      [0,
       [12,40,[8,0,0,0,[12,44,[8,0,0,0,[12,41,0]]]]],
       caml_new_string("(%f,%f)")],
     _cV_=caml_new_string("px"),
     _cX_=[0,48.867489,2.349686],
     _cZ_=[0,48.869764,2.349772],
     _c1_=[0,48.849345,2.33717],
     _c3_=[0,48.863304,2.343641],
     _c5_=[0,48.867372,2.353267];
    function erase_rel(param)
     { /*<<camlinternalFormatBasics.ml 521 8>>*/ if(typeof param==="number")
        /*<<camlinternalFormatBasics.ml 555 20>>*/ return 0;
      else
        /*<<camlinternalFormatBasics.ml 521 8>>*/ switch(param[0])
        {case 0:
           /*<<camlinternalFormatBasics.ml 526 4>>*/  /*<<camlinternalFormatBasics.ml 526 4>>*/ var
           rest=
            param[1];
           /*<<camlinternalFormatBasics.ml 526 28>>*/ return [0,
                   /*<<camlinternalFormatBasics.ml 526 12>>*/ erase_rel(rest)];
         case 1:
           /*<<camlinternalFormatBasics.ml 528 4>>*/  /*<<camlinternalFormatBasics.ml 528 4>>*/ var
           rest$0=
            param[1];
           /*<<camlinternalFormatBasics.ml 528 30>>*/ return [1,
                   /*<<camlinternalFormatBasics.ml 528 14>>*/ erase_rel
                   (rest$0)];
         case 2:
           /*<<camlinternalFormatBasics.ml 530 4>>*/  /*<<camlinternalFormatBasics.ml 530 4>>*/ var
           rest$1=
            param[1];
           /*<<camlinternalFormatBasics.ml 530 27>>*/ return [2,
                   /*<<camlinternalFormatBasics.ml 530 11>>*/ erase_rel
                   (rest$1)];
         case 3:
           /*<<camlinternalFormatBasics.ml 532 4>>*/  /*<<camlinternalFormatBasics.ml 532 4>>*/ var
           rest$2=
            param[1];
           /*<<camlinternalFormatBasics.ml 532 29>>*/ return [3,
                   /*<<camlinternalFormatBasics.ml 532 13>>*/ erase_rel
                   (rest$2)];
         case 4:
           /*<<camlinternalFormatBasics.ml 536 4>>*/  /*<<camlinternalFormatBasics.ml 536 4>>*/ var
           rest$3=
            param[1];
           /*<<camlinternalFormatBasics.ml 536 33>>*/ return [4,
                   /*<<camlinternalFormatBasics.ml 536 17>>*/ erase_rel
                   (rest$3)];
         case 5:
           /*<<camlinternalFormatBasics.ml 534 4>>*/  /*<<camlinternalFormatBasics.ml 534 4>>*/ var
           rest$4=
            param[1];
           /*<<camlinternalFormatBasics.ml 534 29>>*/ return [5,
                   /*<<camlinternalFormatBasics.ml 534 13>>*/ erase_rel
                   (rest$4)];
         case 6:
           /*<<camlinternalFormatBasics.ml 538 4>>*/  /*<<camlinternalFormatBasics.ml 538 4>>*/ var
           rest$5=
            param[1];
           /*<<camlinternalFormatBasics.ml 538 29>>*/ return [6,
                   /*<<camlinternalFormatBasics.ml 538 13>>*/ erase_rel
                   (rest$5)];
         case 7:
           /*<<camlinternalFormatBasics.ml 540 4>>*/  /*<<camlinternalFormatBasics.ml 540 4>>*/ var
           rest$6=
            param[1];
           /*<<camlinternalFormatBasics.ml 540 28>>*/ return [7,
                   /*<<camlinternalFormatBasics.ml 540 12>>*/ erase_rel
                   (rest$6)];
         case 8:
          var rest$7=param[2],ty=param[1];
           /*<<camlinternalFormatBasics.ml 542 37>>*/ return [8,
                  ty,
                   /*<<camlinternalFormatBasics.ml 542 23>>*/ erase_rel
                   (rest$7)];
         case 9:
          var rest$8=param[3],ty1=param[1];
           /*<<camlinternalFormatBasics.ml 544 45>>*/ return [9,
                  ty1,
                  ty1,
                   /*<<camlinternalFormatBasics.ml 544 31>>*/ erase_rel
                   (rest$8)];
         case 10:
           /*<<camlinternalFormatBasics.ml 546 4>>*/  /*<<camlinternalFormatBasics.ml 546 4>>*/ var
           rest$9=
            param[1];
           /*<<camlinternalFormatBasics.ml 546 29>>*/ return [10,
                   /*<<camlinternalFormatBasics.ml 546 13>>*/ erase_rel
                   (rest$9)];
         case 11:
           /*<<camlinternalFormatBasics.ml 548 4>>*/  /*<<camlinternalFormatBasics.ml 548 4>>*/ var
           rest$10=
            param[1];
           /*<<camlinternalFormatBasics.ml 548 29>>*/ return [11,
                   /*<<camlinternalFormatBasics.ml 548 13>>*/ erase_rel
                   (rest$10)];
         case 12:
           /*<<camlinternalFormatBasics.ml 550 4>>*/  /*<<camlinternalFormatBasics.ml 550 4>>*/ var
           rest$11=
            param[1];
           /*<<camlinternalFormatBasics.ml 550 27>>*/ return [12,
                   /*<<camlinternalFormatBasics.ml 550 11>>*/ erase_rel
                   (rest$11)];
         case 13:
           /*<<camlinternalFormatBasics.ml 552 4>>*/  /*<<camlinternalFormatBasics.ml 552 4>>*/ var
           rest$12=
            param[1];
           /*<<camlinternalFormatBasics.ml 552 30>>*/ return [13,
                   /*<<camlinternalFormatBasics.ml 552 14>>*/ erase_rel
                   (rest$12)];
         default:
           /*<<camlinternalFormatBasics.ml 554 4>>*/  /*<<camlinternalFormatBasics.ml 554 4>>*/ var
           rest$13=
            param[1];
           /*<<camlinternalFormatBasics.ml 554 38>>*/ return [14,
                   /*<<camlinternalFormatBasics.ml 554 22>>*/ erase_rel
                   (rest$13)]} /*<<camlinternalFormatBasics.ml 555 32>>*/ }
    function concat_fmtty(fmtty1,fmtty2)
     { /*<<camlinternalFormatBasics.ml 583 21>>*/ if(typeof fmtty1==="number")
        /*<<camlinternalFormatBasics.ml 614 20>>*/ return fmtty2;
      else
        /*<<camlinternalFormatBasics.ml 583 21>>*/ switch(fmtty1[0])
        {case 0:
           /*<<camlinternalFormatBasics.ml 585 4>>*/  /*<<camlinternalFormatBasics.ml 585 4>>*/ var
           rest=
            fmtty1[1];
           /*<<camlinternalFormatBasics.ml 585 38>>*/ return [0,
                   /*<<camlinternalFormatBasics.ml 585 12>>*/ concat_fmtty
                   (rest,fmtty2)];
         case 1:
           /*<<camlinternalFormatBasics.ml 587 4>>*/  /*<<camlinternalFormatBasics.ml 587 4>>*/ var
           rest$0=
            fmtty1[1];
           /*<<camlinternalFormatBasics.ml 587 40>>*/ return [1,
                   /*<<camlinternalFormatBasics.ml 587 14>>*/ concat_fmtty
                   (rest$0,fmtty2)];
         case 2:
           /*<<camlinternalFormatBasics.ml 589 4>>*/  /*<<camlinternalFormatBasics.ml 589 4>>*/ var
           rest$1=
            fmtty1[1];
           /*<<camlinternalFormatBasics.ml 589 37>>*/ return [2,
                   /*<<camlinternalFormatBasics.ml 589 11>>*/ concat_fmtty
                   (rest$1,fmtty2)];
         case 3:
           /*<<camlinternalFormatBasics.ml 591 4>>*/  /*<<camlinternalFormatBasics.ml 591 4>>*/ var
           rest$2=
            fmtty1[1];
           /*<<camlinternalFormatBasics.ml 591 39>>*/ return [3,
                   /*<<camlinternalFormatBasics.ml 591 13>>*/ concat_fmtty
                   (rest$2,fmtty2)];
         case 4:
           /*<<camlinternalFormatBasics.ml 593 4>>*/  /*<<camlinternalFormatBasics.ml 593 4>>*/ var
           rest$3=
            fmtty1[1];
           /*<<camlinternalFormatBasics.ml 593 43>>*/ return [4,
                   /*<<camlinternalFormatBasics.ml 593 17>>*/ concat_fmtty
                   (rest$3,fmtty2)];
         case 5:
           /*<<camlinternalFormatBasics.ml 595 4>>*/  /*<<camlinternalFormatBasics.ml 595 4>>*/ var
           rest$4=
            fmtty1[1];
           /*<<camlinternalFormatBasics.ml 595 39>>*/ return [5,
                   /*<<camlinternalFormatBasics.ml 595 13>>*/ concat_fmtty
                   (rest$4,fmtty2)];
         case 6:
           /*<<camlinternalFormatBasics.ml 597 4>>*/  /*<<camlinternalFormatBasics.ml 597 4>>*/ var
           rest$5=
            fmtty1[1];
           /*<<camlinternalFormatBasics.ml 597 39>>*/ return [6,
                   /*<<camlinternalFormatBasics.ml 597 13>>*/ concat_fmtty
                   (rest$5,fmtty2)];
         case 7:
           /*<<camlinternalFormatBasics.ml 599 4>>*/  /*<<camlinternalFormatBasics.ml 599 4>>*/ var
           rest$6=
            fmtty1[1];
           /*<<camlinternalFormatBasics.ml 599 38>>*/ return [7,
                   /*<<camlinternalFormatBasics.ml 599 12>>*/ concat_fmtty
                   (rest$6,fmtty2)];
         case 8:
          var rest$7=fmtty1[2],ty=fmtty1[1];
           /*<<camlinternalFormatBasics.ml 611 47>>*/ return [8,
                  ty,
                   /*<<camlinternalFormatBasics.ml 611 23>>*/ concat_fmtty
                   (rest$7,fmtty2)];
         case 9:
          var rest$8=fmtty1[3],ty2=fmtty1[2],ty1=fmtty1[1];
           /*<<camlinternalFormatBasics.ml 613 55>>*/ return [9,
                  ty1,
                  ty2,
                   /*<<camlinternalFormatBasics.ml 613 31>>*/ concat_fmtty
                   (rest$8,fmtty2)];
         case 10:
           /*<<camlinternalFormatBasics.ml 601 4>>*/  /*<<camlinternalFormatBasics.ml 601 4>>*/ var
           rest$9=
            fmtty1[1];
           /*<<camlinternalFormatBasics.ml 601 39>>*/ return [10,
                   /*<<camlinternalFormatBasics.ml 601 13>>*/ concat_fmtty
                   (rest$9,fmtty2)];
         case 11:
           /*<<camlinternalFormatBasics.ml 603 4>>*/  /*<<camlinternalFormatBasics.ml 603 4>>*/ var
           rest$10=
            fmtty1[1];
           /*<<camlinternalFormatBasics.ml 603 39>>*/ return [11,
                   /*<<camlinternalFormatBasics.ml 603 13>>*/ concat_fmtty
                   (rest$10,fmtty2)];
         case 12:
           /*<<camlinternalFormatBasics.ml 605 4>>*/  /*<<camlinternalFormatBasics.ml 605 4>>*/ var
           rest$11=
            fmtty1[1];
           /*<<camlinternalFormatBasics.ml 605 37>>*/ return [12,
                   /*<<camlinternalFormatBasics.ml 605 11>>*/ concat_fmtty
                   (rest$11,fmtty2)];
         case 13:
           /*<<camlinternalFormatBasics.ml 607 4>>*/  /*<<camlinternalFormatBasics.ml 607 4>>*/ var
           rest$12=
            fmtty1[1];
           /*<<camlinternalFormatBasics.ml 607 40>>*/ return [13,
                   /*<<camlinternalFormatBasics.ml 607 14>>*/ concat_fmtty
                   (rest$12,fmtty2)];
         default:
           /*<<camlinternalFormatBasics.ml 609 4>>*/  /*<<camlinternalFormatBasics.ml 609 4>>*/ var
           rest$13=
            fmtty1[1];
           /*<<camlinternalFormatBasics.ml 609 48>>*/ return [14,
                   /*<<camlinternalFormatBasics.ml 609 22>>*/ concat_fmtty
                   (rest$13,fmtty2)]} /*<<camlinternalFormatBasics.ml 614 26>>*/ }
    function concat_fmt(fmt1,fmt2)
     { /*<<camlinternalFormatBasics.ml 624 17>>*/ if(typeof fmt1==="number")
        /*<<camlinternalFormatBasics.ml 683 4>>*/ return fmt2;
      else
        /*<<camlinternalFormatBasics.ml 624 17>>*/ switch(fmt1[0])
        {case 0:
           /*<<camlinternalFormatBasics.ml 642 4>>*/  /*<<camlinternalFormatBasics.ml 642 4>>*/ var
           rest=
            fmt1[1];
           /*<<camlinternalFormatBasics.ml 642 31>>*/ return [0,
                   /*<<camlinternalFormatBasics.ml 642 9>>*/ concat_fmt
                   (rest,fmt2)];
         case 1:
           /*<<camlinternalFormatBasics.ml 644 4>>*/  /*<<camlinternalFormatBasics.ml 644 4>>*/ var
           rest$0=
            fmt1[1];
           /*<<camlinternalFormatBasics.ml 644 36>>*/ return [1,
                   /*<<camlinternalFormatBasics.ml 644 14>>*/ concat_fmt
                   (rest$0,fmt2)];
         case 2:
          var rest$1=fmt1[2],pad=fmt1[1];
           /*<<camlinternalFormatBasics.ml 626 37>>*/ return [2,
                  pad,
                   /*<<camlinternalFormatBasics.ml 626 17>>*/ concat_fmt
                   (rest$1,fmt2)];
         case 3:
          var rest$2=fmt1[2],pad$0=fmt1[1];
           /*<<camlinternalFormatBasics.ml 628 42>>*/ return [3,
                  pad$0,
                   /*<<camlinternalFormatBasics.ml 628 22>>*/ concat_fmt
                   (rest$2,fmt2)];
         case 4:
          var rest$3=fmt1[4],prec=fmt1[3],pad$1=fmt1[2],iconv=fmt1[1];
           /*<<camlinternalFormatBasics.ml 631 47>>*/ return [4,
                  iconv,
                  pad$1,
                  prec,
                   /*<<camlinternalFormatBasics.ml 631 27>>*/ concat_fmt
                   (rest$3,fmt2)];
         case 5:
          var rest$4=fmt1[4],prec$0=fmt1[3],pad$2=fmt1[2],iconv$0=fmt1[1];
           /*<<camlinternalFormatBasics.ml 633 49>>*/ return [5,
                  iconv$0,
                  pad$2,
                  prec$0,
                   /*<<camlinternalFormatBasics.ml 633 29>>*/ concat_fmt
                   (rest$4,fmt2)];
         case 6:
          var rest$5=fmt1[4],prec$1=fmt1[3],pad$3=fmt1[2],iconv$1=fmt1[1];
           /*<<camlinternalFormatBasics.ml 635 53>>*/ return [6,
                  iconv$1,
                  pad$3,
                  prec$1,
                   /*<<camlinternalFormatBasics.ml 635 33>>*/ concat_fmt
                   (rest$5,fmt2)];
         case 7:
          var rest$6=fmt1[4],prec$2=fmt1[3],pad$4=fmt1[2],iconv$2=fmt1[1];
           /*<<camlinternalFormatBasics.ml 637 49>>*/ return [7,
                  iconv$2,
                  pad$4,
                  prec$2,
                   /*<<camlinternalFormatBasics.ml 637 29>>*/ concat_fmt
                   (rest$6,fmt2)];
         case 8:
          var rest$7=fmt1[4],prec$3=fmt1[3],pad$5=fmt1[2],fconv=fmt1[1];
           /*<<camlinternalFormatBasics.ml 639 49>>*/ return [8,
                  fconv,
                  pad$5,
                  prec$3,
                   /*<<camlinternalFormatBasics.ml 639 29>>*/ concat_fmt
                   (rest$7,fmt2)];
         case 9:
           /*<<camlinternalFormatBasics.ml 646 4>>*/  /*<<camlinternalFormatBasics.ml 646 4>>*/ var
           rest$8=
            fmt1[1];
           /*<<camlinternalFormatBasics.ml 646 31>>*/ return [9,
                   /*<<camlinternalFormatBasics.ml 646 9>>*/ concat_fmt
                   (rest$8,fmt2)];
         case 10:
           /*<<camlinternalFormatBasics.ml 656 4>>*/  /*<<camlinternalFormatBasics.ml 656 4>>*/ var
           rest$9=
            fmt1[1];
           /*<<camlinternalFormatBasics.ml 656 32>>*/ return [10,
                   /*<<camlinternalFormatBasics.ml 656 10>>*/ concat_fmt
                   (rest$9,fmt2)];
         case 11:
          var rest$10=fmt1[2],str=fmt1[1];
           /*<<camlinternalFormatBasics.ml 659 45>>*/ return [11,
                  str,
                   /*<<camlinternalFormatBasics.ml 659 25>>*/ concat_fmt
                   (rest$10,fmt2)];
         case 12:
          var rest$11=fmt1[2],chr=fmt1[1];
           /*<<camlinternalFormatBasics.ml 661 45>>*/ return [12,
                  chr,
                   /*<<camlinternalFormatBasics.ml 661 25>>*/ concat_fmt
                   (rest$11,fmt2)];
         case 13:
          var rest$12=fmt1[3],fmtty=fmt1[2],pad$6=fmt1[1];
           /*<<camlinternalFormatBasics.ml 664 50>>*/ return [13,
                  pad$6,
                  fmtty,
                   /*<<camlinternalFormatBasics.ml 664 30>>*/ concat_fmt
                   (rest$12,fmt2)];
         case 14:
          var rest$13=fmt1[3],fmtty$0=fmt1[2],pad$7=fmt1[1];
           /*<<camlinternalFormatBasics.ml 666 50>>*/ return [14,
                  pad$7,
                  fmtty$0,
                   /*<<camlinternalFormatBasics.ml 666 30>>*/ concat_fmt
                   (rest$13,fmt2)];
         case 15:
           /*<<camlinternalFormatBasics.ml 648 4>>*/  /*<<camlinternalFormatBasics.ml 648 4>>*/ var
           rest$14=
            fmt1[1];
           /*<<camlinternalFormatBasics.ml 648 32>>*/ return [15,
                   /*<<camlinternalFormatBasics.ml 648 10>>*/ concat_fmt
                   (rest$14,fmt2)];
         case 16:
           /*<<camlinternalFormatBasics.ml 650 4>>*/  /*<<camlinternalFormatBasics.ml 650 4>>*/ var
           rest$15=
            fmt1[1];
           /*<<camlinternalFormatBasics.ml 650 32>>*/ return [16,
                   /*<<camlinternalFormatBasics.ml 650 10>>*/ concat_fmt
                   (rest$15,fmt2)];
         case 17:
          var rest$16=fmt1[2],fmting_lit=fmt1[1];
           /*<<camlinternalFormatBasics.ml 678 52>>*/ return [17,
                  fmting_lit,
                   /*<<camlinternalFormatBasics.ml 678 32>>*/ concat_fmt
                   (rest$16,fmt2)];
         case 18:
          var rest$17=fmt1[2],fmting_gen=fmt1[1];
           /*<<camlinternalFormatBasics.ml 680 52>>*/ return [18,
                  fmting_gen,
                   /*<<camlinternalFormatBasics.ml 680 32>>*/ concat_fmt
                   (rest$17,fmt2)];
         case 19:
           /*<<camlinternalFormatBasics.ml 654 4>>*/  /*<<camlinternalFormatBasics.ml 654 4>>*/ var
           rest$18=
            fmt1[1];
           /*<<camlinternalFormatBasics.ml 654 33>>*/ return [19,
                   /*<<camlinternalFormatBasics.ml 654 11>>*/ concat_fmt
                   (rest$18,fmt2)];
         case 20:
          var rest$19=fmt1[3],char_set=fmt1[2],width_opt=fmt1[1];
           /*<<camlinternalFormatBasics.ml 669 60>>*/ return [20,
                  width_opt,
                  char_set,
                   /*<<camlinternalFormatBasics.ml 669 40>>*/ concat_fmt
                   (rest$19,fmt2)];
         case 21:
          var rest$20=fmt1[2],counter=fmt1[1];
           /*<<camlinternalFormatBasics.ml 671 51>>*/ return [21,
                  counter,
                   /*<<camlinternalFormatBasics.ml 671 31>>*/ concat_fmt
                   (rest$20,fmt2)];
         case 22:
           /*<<camlinternalFormatBasics.ml 673 4>>*/  /*<<camlinternalFormatBasics.ml 673 4>>*/ var
           rest$21=
            fmt1[1];
           /*<<camlinternalFormatBasics.ml 673 41>>*/ return [22,
                   /*<<camlinternalFormatBasics.ml 673 19>>*/ concat_fmt
                   (rest$21,fmt2)];
         case 23:
          var rest$22=fmt1[2],ign=fmt1[1];
           /*<<camlinternalFormatBasics.ml 675 44>>*/ return [23,
                  ign,
                   /*<<camlinternalFormatBasics.ml 675 24>>*/ concat_fmt
                   (rest$22,fmt2)];
         default:
          var rest$23=fmt1[3],f=fmt1[2],arity=fmt1[1];
           /*<<camlinternalFormatBasics.ml 652 42>>*/ return [24,
                  arity,
                  f,
                   /*<<camlinternalFormatBasics.ml 652 22>>*/ concat_fmt
                   (rest$23,fmt2)]} /*<<camlinternalFormatBasics.ml 683 8>>*/ }
     /*<<pervasives.ml 26 44>>*/ function invalid_arg(s)
     { /*<<pervasives.ml 33 45>>*/ throw [0,Invalid_argument,s] /*<<pervasives.ml 33 45>>*/ }
     /*<<pervasives.ml 26 44>>*/  /*<<pervasives.ml 26 44>>*/ caml_fresh_oo_id
     (0);
     /*<<pervasives.ml 26 44>>*/ function abs(x)
     { /*<<pervasives.ml 90 12>>*/ return 0<=x?x:-x|0 /*<<pervasives.ml 90 36>>*/ }
     /*<<pervasives.ml 174 42>>*/ function _a_(s1,s2)
     { /*<<pervasives.ml 197 2>>*/ var
        /*<<pervasives.ml 197 2>>*/ l1=
         /*<<pervasives.ml 197 2>>*/ caml_ml_string_length(s1),
        /*<<pervasives.ml 197 2>>*/ l2=
         /*<<pervasives.ml 197 2>>*/ caml_ml_string_length(s2),
        /*<<pervasives.ml 198 2>>*/ s=
         /*<<pervasives.ml 198 2>>*/ caml_create_string(l1+l2|0);
       /*<<pervasives.ml 199 2>>*/  /*<<pervasives.ml 199 2>>*/ caml_blit_string
       (s1,0,s,0,l1);
       /*<<pervasives.ml 200 2>>*/  /*<<pervasives.ml 200 2>>*/ caml_blit_string
       (s2,0,s,l1,l2);
       /*<<pervasives.ml 200 26>>*/ return s /*<<pervasives.ml 201 26>>*/ }
     /*<<pervasives.ml 281 12>>*/  /*<<pervasives.ml 281 12>>*/ caml_ml_open_descriptor_in
     (0);
     /*<<pervasives.ml 282 13>>*/  /*<<pervasives.ml 282 13>>*/ caml_ml_open_descriptor_out
     (1);
     /*<<pervasives.ml 283 13>>*/  /*<<pervasives.ml 283 13>>*/ var
     stderr=
       /*<<pervasives.ml 283 13>>*/ caml_ml_open_descriptor_out(2);
     /*<<pervasives.ml 283 34>>*/ function output_string(oc,s)
     { /*<<pervasives.ml 330 2>>*/ return  /*<<pervasives.ml 330 2>>*/ caml_ml_output
              (oc,s,0, /*<<pervasives.ml 330 2>>*/ caml_ml_string_length(s)) /*<<pervasives.ml 330 47>>*/ }
     /*<<pervasives.ml 283 34>>*/ function prerr_string(s)
     { /*<<pervasives.ml 459 21>>*/ return  /*<<pervasives.ml 459 21>>*/ output_string
              (stderr,s) /*<<pervasives.ml 459 43>>*/ }
    function do_at_exit(param)
     { /*<<pervasives.ml 314 2>>*/ function iter(param)
       { /*<<?>>*/ var param$0=param;
         /*<<pervasives.ml 314 17>>*/ for(;;)
         { /*<<pervasives.ml 314 17>>*/ if(param$0)
           {var l=param$0[2],a=param$0[1];
             /*<<pervasives.ml 316 16>>*/ try
             { /*<<pervasives.ml 316 21>>*/  /*<<pervasives.ml 316 21>>*/ caml_ml_flush
               (a)}
            catch(_j__){}
            var param$0=l;
            continue}
           /*<<pervasives.ml 315 12>>*/ return 0} /*<<pervasives.ml 316 50>>*/ }
       /*<<pervasives.ml 317 32>>*/ return  /*<<pervasives.ml 317 32>>*/ iter
              ( /*<<pervasives.ml 317 10>>*/ caml_ml_out_channels_list(0)) /*<<pervasives.ml 517 39>>*/ }
    function rev(l$0)
     {var l1=l$0,l2=0;
       /*<<list.ml 45 2>>*/ for(;;)
       { /*<<list.ml 45 2>>*/ if(l1)
         { /*<<list.ml 47 14>>*/ var
           l=l1[2],
           a=l1[1],
            /*<<list.ml 47 14>>*/ l2$0=[0,a,l2],
           l1=l,
           l2=l2$0;
          continue}
         /*<<list.ml 46 10>>*/ return l2} /*<<list.ml 49 27>>*/ }
    function map(f,param)
     { /*<<?>>*/ if(param)
       { /*<<list.ml 59 20>>*/ var
         l=param[2],
         a=param[1],
          /*<<list.ml 59 20>>*/ r= /*<<list.ml 59 20>>*/ caml_call1(f,a);
         /*<<list.ml 59 39>>*/ return [0,r, /*<<list.ml 59 32>>*/ map(f,l)]}
       /*<<list.ml 58 10>>*/ return 0}
    function iter(f,param)
     { /*<<?>>*/ var param$0=param;
      for(;;)
       {if(param$0)
         {var l=param$0[2],a=param$0[1];
           /*<<list.ml 77 12>>*/  /*<<list.ml 77 12>>*/ caml_call1(f,a);
          var param$0=l;
          continue}
         /*<<list.ml 76 10>>*/ return 0}}
    function make(n,c)
     { /*<<bytes.ml 36 2>>*/  /*<<bytes.ml 36 2>>*/ var
       s=
         /*<<bytes.ml 36 2>>*/ caml_create_string(n);
       /*<<bytes.ml 37 2>>*/  /*<<bytes.ml 37 2>>*/ caml_fill_string(s,0,n,c);
       /*<<bytes.ml 37 21>>*/ return s /*<<bytes.ml 38 3>>*/ }
     /*<<bytes.ml 47 20>>*/ function sub_string(b,ofs,len)
     { /*<<bytes.ml 59 2>>*/ if(0<=ofs)
       if(0<=len)
        if(!((caml_ml_string_length(b)-len|0)<ofs))
         { /*<<bytes.ml 61 7>>*/  /*<<bytes.ml 61 7>>*/ var
           r=
             /*<<bytes.ml 61 7>>*/ caml_create_string(len);
           /*<<bytes.ml 63 4>>*/  /*<<bytes.ml 63 4>>*/ caml_blit_string
           (b,ofs,r,0,len);
           /*<<bytes.ml 63 29>>*/ return r}
       /*<<bytes.ml 60 7>>*/ return  /*<<bytes.ml 60 7>>*/ invalid_arg(_l_) /*<<bytes.ml 67 59>>*/ }
     /*<<bytes.ml 47 20>>*/ function blit(s1,ofs1,s2,ofs2,len)
     { /*<<bytes.ml 83 2>>*/ if(0<=len)
       if(0<=ofs1)
        if(!((caml_ml_string_length(s1)-len|0)<ofs1))
         if(0<=ofs2)
          if(!((caml_ml_string_length(s2)-len|0)<ofs2))
           return  /*<<bytes.ml 86 7>>*/ caml_blit_string(s1,ofs1,s2,ofs2,len);
       /*<<bytes.ml 85 7>>*/ return  /*<<bytes.ml 85 7>>*/ invalid_arg(_m_) /*<<bytes.ml 86 38>>*/ }
     /*<<bytes.ml 47 20>>*/ function blit$0(s1,ofs1,s2,ofs2,len)
     { /*<<bytes.ml 89 2>>*/ if(0<=len)
       if(0<=ofs1)
        if(!((caml_ml_string_length(s1)-len|0)<ofs1))
         if(0<=ofs2)
          if(!((caml_ml_string_length(s2)-len|0)<ofs2))
           return  /*<<bytes.ml 92 7>>*/ caml_blit_string(s1,ofs1,s2,ofs2,len);
       /*<<bytes.ml 91 7>>*/ return  /*<<bytes.ml 91 7>>*/ invalid_arg(_n_) /*<<bytes.ml 92 45>>*/ }
     /*<<sys.ml 33 34>>*/ var
      /*<<sys.ml 33 34>>*/ max_array_length=
       /*<<sys.ml 33 34>>*/ caml_sys_const_max_wosize(0),
      /*<<sys.ml 33 34>>*/ max_string_length=(4*max_array_length|0)-1|0;
     /*<<sys.ml 33 34>>*/  /*<<sys.ml 33 34>>*/ caml_fresh_oo_id(0);
    function map$0(f,a)
     { /*<<array.ml 89 2>>*/  /*<<array.ml 89 2>>*/ var l=a.length-1;
       /*<<array.ml 90 2>>*/ if(0===l)return [0];
       /*<<array.ml 89 2>>*/ var
        /*<<array.ml 91 40>>*/ r=
         /*<<array.ml 91 40>>*/ caml_make_vect
         (l, /*<<array.ml 91 21>>*/ caml_call1(f,a[1])),
        /*<<array.ml 92 4>>*/ _j8_=l-1|0,
        /*<<array.ml 91 40>>*/ _j7_=1;
       /*<<array.ml 92 4>>*/ if(!(_j8_<1))
       {var i=_j7_;
         /*<<array.ml 93 6>>*/ for(;;)
         { /*<<array.ml 93 40>>*/ r[i+1]=
           /*<<array.ml 93 21>>*/ caml_call1(f,a[i+1]);
           /*<<array.ml 93 40>>*/  /*<<array.ml 93 40>>*/ var _j9_=i+1|0;
          if(_j8_!==i){var i=_j9_;continue}
          break}}
       /*<<array.ml 95 4>>*/ return r /*<<array.ml 96 5>>*/ }
    caml_fresh_oo_id(0);
    function _B_(Ord)
     {function height(param)
       { /*<<map.ml 62 17>>*/ if(param)
         {var h=param[5]; /*<<map.ml 64 27>>*/ return h}
         /*<<map.ml 63 17>>*/ return 0 /*<<map.ml 64 28>>*/ }
      function create(l,x,d,r)
       { /*<<map.ml 67 15>>*/ var
          /*<<map.ml 67 15>>*/ hl= /*<<map.ml 67 15>>*/ height(l),
          /*<<map.ml 67 33>>*/ hr= /*<<map.ml 67 33>>*/ height(r),
          /*<<map.ml 68 6>>*/ _j6_=hr<=hl?hl+1|0:hr+1|0;
        return [0,l,x,d,r,_j6_] /*<<map.ml 68 61>>*/ }
      function singleton(x,d)
       { /*<<map.ml 70 24>>*/ return [0,0,x,d,0,1] /*<<map.ml 70 51>>*/ }
      function bal(l,x,d,r)
       { /*<<map.ml 73 6>>*/ if(l)var h=l[5],hl=h;else var hl=0;
         /*<<map.ml 74 6>>*/ if(r)var h$0=r[5],hr=h$0;else var hr=0;
         /*<<map.ml 75 6>>*/ if((hr+2|0)<hl)
         { /*<<map.ml 75 26>>*/ if(l)
           { /*<<map.ml 79 28>>*/ var
             lr=l[4],
             ld=l[3],
             lv=l[2],
             ll=l[1],
              /*<<map.ml 79 28>>*/ _j1_= /*<<map.ml 79 28>>*/ height(lr);
             /*<<map.ml 79 24>>*/ if(_j1_<= /*<<map.ml 79 15>>*/ height(ll))
             return  /*<<map.ml 80 47>>*/ create
                     (ll,lv,ld, /*<<map.ml 80 30>>*/ create(lr,x,d,r));
             /*<<map.ml 81 17>>*/ if(lr)
             { /*<<map.ml 85 55>>*/ var
               lrr=lr[4],
               lrd=lr[3],
               lrv=lr[2],
               lrl=lr[1],
                /*<<map.ml 85 55>>*/ _j2_=
                 /*<<map.ml 85 55>>*/ create(lrr,x,d,r);
               /*<<map.ml 85 46>>*/ return  /*<<map.ml 85 46>>*/ create
                      ( /*<<map.ml 85 25>>*/ create(ll,lv,ld,lrl),lrv,lrd,_j2_)}
             /*<<map.ml 83 25>>*/ return  /*<<map.ml 83 25>>*/ invalid_arg
                    (_t_)}
           /*<<map.ml 77 19>>*/ return  /*<<map.ml 77 19>>*/ invalid_arg(_u_)}
         /*<<map.ml 87 15>>*/ if((hl+2|0)<hr)
         { /*<<map.ml 87 35>>*/ if(r)
           { /*<<map.ml 91 28>>*/ var
             rr=r[4],
             rd=r[3],
             rv=r[2],
             rl=r[1],
              /*<<map.ml 91 28>>*/ _j3_= /*<<map.ml 91 28>>*/ height(rl);
             /*<<map.ml 91 24>>*/ if(_j3_<= /*<<map.ml 91 15>>*/ height(rr))
             return  /*<<map.ml 92 38>>*/ create
                     ( /*<<map.ml 92 21>>*/ create(l,x,d,rl),rv,rd,rr);
             /*<<map.ml 93 17>>*/ if(rl)
             { /*<<map.ml 97 52>>*/ var
               rlr=rl[4],
               rld=rl[3],
               rlv=rl[2],
               rll=rl[1],
                /*<<map.ml 97 52>>*/ _j4_=
                 /*<<map.ml 97 52>>*/ create(rlr,rv,rd,rr);
               /*<<map.ml 97 43>>*/ return  /*<<map.ml 97 43>>*/ create
                      ( /*<<map.ml 97 25>>*/ create(l,x,d,rll),rlv,rld,_j4_)}
             /*<<map.ml 95 25>>*/ return  /*<<map.ml 95 25>>*/ invalid_arg
                    (_v_)}
           /*<<map.ml 89 19>>*/ return  /*<<map.ml 89 19>>*/ invalid_arg(_w_)}
         /*<<map.ml 100 8>>*/  /*<<map.ml 100 8>>*/ var
         _j5_=
          hr<=hl?hl+1|0:hr+1|0;
        return [0,l,x,d,r,_j5_] /*<<map.ml 100 63>>*/ }
      var empty=0;
      function is_empty(param)
       { /*<<map.ml 104 19>>*/ return param?0:1 /*<<map.ml 104 54>>*/ }
      function add(x,data,m)
       { /*<<?>>*/ if(m)
         { /*<<map.ml 110 18>>*/ var
           h=m[5],
           r=m[4],
           d=m[3],
           v=m[2],
           l=m[1],
            /*<<map.ml 110 18>>*/ c=
             /*<<map.ml 110 18>>*/ caml_call2(Ord[1],x,v);
           /*<<map.ml 111 10>>*/ if(0===c)return d===data?m:[0,l,x,data,r,h];
           /*<<map.ml 113 15>>*/ if(0<=c)
           { /*<<map.ml 117 21>>*/  /*<<map.ml 117 21>>*/ var
             rr=
               /*<<map.ml 117 21>>*/ add(x,data,r);
             /*<<map.ml 118 12>>*/ return r===rr
                    ?m
                    : /*<<map.ml 118 35>>*/ bal(l,v,d,rr)}
           /*<<map.ml 110 18>>*/  /*<<map.ml 114 21>>*/ var
           ll=
             /*<<map.ml 114 21>>*/ add(x,data,l);
           /*<<map.ml 115 12>>*/ return l===ll
                  ?m
                  : /*<<map.ml 115 35>>*/ bal(ll,v,d,r)}
         /*<<map.ml 108 10>>*/ return [0,0,x,data,0,1]}
      function find(x,param)
       { /*<<?>>*/ var param$0=param;
        for(;;)
         {if(param$0)
           { /*<<map.ml 124 18>>*/ var
             r=param$0[4],
             d=param$0[3],
             v=param$0[2],
             l=param$0[1],
              /*<<map.ml 124 18>>*/ c=
               /*<<map.ml 124 18>>*/ caml_call2(Ord[1],x,v);
             /*<<map.ml 125 10>>*/ if(0===c)return d;
             /*<<map.ml 124 18>>*/ var
              /*<<map.ml 126 15>>*/ param$1=0<=c?r:l,
             param$0=param$1;
            continue}
           /*<<map.ml 122 25>>*/ throw Not_found}}
      function mem(x,param)
       { /*<<?>>*/ var param$0=param;
        for(;;)
         {if(param$0)
           { /*<<map.ml 132 18>>*/ var
             r=param$0[4],
             v=param$0[2],
             l=param$0[1],
              /*<<map.ml 132 18>>*/ c=
               /*<<map.ml 132 18>>*/ caml_call2(Ord[1],x,v),
              /*<<map.ml 133 10>>*/ _j0_=0===c?1:0;
             /*<<map.ml 133 10>>*/ if(_j0_)return _j0_;
             /*<<map.ml 132 18>>*/ var param$1=0<=c?r:l,param$0=param$1;
            continue}
           /*<<map.ml 130 10>>*/ return 0}}
      function min_binding(param)
       { /*<<?>>*/ var param$0=param;
         /*<<map.ml 135 26>>*/ for(;;)
         { /*<<map.ml 135 26>>*/ if(param$0)
           {var _jZ_=param$0[1];
            if(_jZ_){var param$0=_jZ_;continue}
            var d=param$0[3],x=param$0[2];
             /*<<map.ml 137 35>>*/ return [0,x,d]}
           /*<<map.ml 136 32>>*/ throw Not_found} /*<<map.ml 138 44>>*/ }
      function max_binding(param)
       { /*<<?>>*/ var param$0=param;
         /*<<map.ml 140 26>>*/ for(;;)
         { /*<<map.ml 140 26>>*/ if(param$0)
           {var _jW_=param$0[4],_jX_=param$0[3],_jY_=param$0[2];
            if(_jW_){var param$0=_jW_;continue}
             /*<<map.ml 142 35>>*/ return [0,_jY_,_jX_]}
           /*<<map.ml 141 32>>*/ throw Not_found} /*<<map.ml 143 44>>*/ }
      function remove_min_binding(param)
       { /*<<map.ml 145 33>>*/ if(param)
         {var _jV_=param[1];
          if(_jV_)
           {var r=param[4],d=param[3],x=param[2];
             /*<<map.ml 148 57>>*/ return  /*<<map.ml 148 57>>*/ bal
                    ( /*<<map.ml 148 35>>*/ remove_min_binding(_jV_),x,d,r)}
           /*<<map.ml 147 35>>*/  /*<<map.ml 147 35>>*/ var r$0=param[4];
           /*<<map.ml 147 35>>*/ return r$0}
         /*<<map.ml 146 17>>*/ return  /*<<map.ml 146 17>>*/ invalid_arg(_x_) /*<<map.ml 148 63>>*/ }
      function remove(x$0,t)
       { /*<<?>>*/ if(t)
         { /*<<map.ml 162 18>>*/ var
           r=t[4],
           d$0=t[3],
           v=t[2],
           l=t[1],
            /*<<map.ml 162 18>>*/ c=
             /*<<map.ml 162 18>>*/ caml_call2(Ord[1],x$0,v);
           /*<<map.ml 163 10>>*/ if(0===c)
           { /*<<map.ml 151 6>>*/ if(l)
             { /*<<map.ml 155 10>>*/ if(r)
               { /*<<map.ml 155 23>>*/ var
                  /*<<map.ml 155 23>>*/ match=
                   /*<<map.ml 155 23>>*/ min_binding(r),
                  /*<<map.ml 155 37>>*/ d=match[2],
                  /*<<map.ml 155 37>>*/ x=match[1];
                 /*<<map.ml 156 44>>*/ return  /*<<map.ml 156 44>>*/ bal
                        (l,x,d, /*<<map.ml 156 21>>*/ remove_min_binding(r))}
               /*<<map.ml 153 22>>*/ return l}
             /*<<map.ml 152 22>>*/ return r}
           /*<<map.ml 164 15>>*/ if(0<=c)
           { /*<<map.ml 167 21>>*/  /*<<map.ml 167 21>>*/ var
             rr=
               /*<<map.ml 167 21>>*/ remove(x$0,r);
             /*<<map.ml 167 35>>*/ return r===rr
                    ?t
                    : /*<<map.ml 167 58>>*/ bal(l,v,d$0,rr)}
           /*<<map.ml 162 18>>*/  /*<<map.ml 165 21>>*/ var
           ll=
             /*<<map.ml 165 21>>*/ remove(x$0,l);
           /*<<map.ml 165 35>>*/ return l===ll
                  ?t
                  : /*<<map.ml 165 58>>*/ bal(ll,v,d$0,r)}
         /*<<map.ml 160 10>>*/ return 0}
      function iter(f,param)
       { /*<<?>>*/ var param$0=param;
        for(;;)
         {if(param$0)
           {var r=param$0[4],d=param$0[3],v=param$0[2],l=param$0[1];
             /*<<map.ml 172 10>>*/  /*<<map.ml 172 10>>*/ iter(f,l);
             /*<<map.ml 172 20>>*/  /*<<map.ml 172 20>>*/ caml_call2(f,v,d);
            var param$0=r;
            continue}
           /*<<map.ml 170 17>>*/ return 0}}
      function map(f,param)
       { /*<<?>>*/ if(param)
         { /*<<map.ml 178 19>>*/ var
           h=param[5],
           r=param[4],
           d=param[3],
           v=param[2],
           l=param[1],
            /*<<map.ml 178 19>>*/ l$0= /*<<map.ml 178 19>>*/ map(f,l),
            /*<<map.ml 179 19>>*/ d$0= /*<<map.ml 179 19>>*/ caml_call1(f,d),
            /*<<map.ml 180 19>>*/ r$0= /*<<map.ml 180 19>>*/ map(f,r);
           /*<<map.ml 181 10>>*/ return [0,l$0,v,d$0,r$0,h]}
         /*<<map.ml 176 10>>*/ return 0}
      function mapi(f,param)
       { /*<<?>>*/ if(param)
         { /*<<map.ml 187 19>>*/ var
           h=param[5],
           r=param[4],
           d=param[3],
           v=param[2],
           l=param[1],
            /*<<map.ml 187 19>>*/ l$0= /*<<map.ml 187 19>>*/ mapi(f,l),
            /*<<map.ml 188 19>>*/ d$0= /*<<map.ml 188 19>>*/ caml_call2(f,v,d),
            /*<<map.ml 189 19>>*/ r$0= /*<<map.ml 189 19>>*/ mapi(f,r);
           /*<<map.ml 190 10>>*/ return [0,l$0,v,d$0,r$0,h]}
         /*<<map.ml 185 10>>*/ return 0}
      function fold(f,m,accu)
       {var m$0=m,accu$0=accu;
         /*<<map.ml 193 6>>*/ for(;;)
         { /*<<map.ml 193 6>>*/ if(m$0)
           { /*<<map.ml 196 19>>*/ var
             r=m$0[4],
             d=m$0[3],
             v=m$0[2],
             l=m$0[1],
              /*<<map.ml 196 19>>*/ accu$1=
               /*<<map.ml 196 19>>*/ caml_call3
               (f,v,d, /*<<map.ml 196 26>>*/ fold(f,l,accu$0)),
             m$0=r,
             accu$0=accu$1;
            continue}
           /*<<map.ml 194 17>>*/ return accu$0} /*<<map.ml 196 42>>*/ }
      function for_all(p,param)
       { /*<<?>>*/ var param$0=param;
        for(;;)
         {if(param$0)
           { /*<<map.ml 200 31>>*/ var
             r=param$0[4],
             d=param$0[3],
             v=param$0[2],
             l=param$0[1],
              /*<<map.ml 200 31>>*/ _jS_=
               /*<<map.ml 200 31>>*/ caml_call2(p,v,d);
             /*<<map.ml 200 36>>*/ if(_jS_)
             { /*<<map.ml 200 40>>*/  /*<<map.ml 200 40>>*/ var
               _jT_=
                 /*<<map.ml 200 40>>*/ for_all(p,l);
               /*<<map.ml 200 51>>*/ if(_jT_){var param$0=r;continue}
               /*<<map.ml 200 40>>*/ var _jU_=_jT_}
            else
             var _jU_=_jS_;
             /*<<map.ml 199 17>>*/ return _jU_}
           /*<<map.ml 199 17>>*/ return 1}}
      function exists(p,param)
       { /*<<?>>*/ var param$0=param;
        for(;;)
         {if(param$0)
           { /*<<map.ml 204 31>>*/ var
             r=param$0[4],
             d=param$0[3],
             v=param$0[2],
             l=param$0[1],
              /*<<map.ml 204 31>>*/ _jP_=
               /*<<map.ml 204 31>>*/ caml_call2(p,v,d);
             /*<<map.ml 204 36>>*/ if(_jP_)
             var _jQ_=_jP_;
            else
             { /*<<map.ml 204 40>>*/  /*<<map.ml 204 40>>*/ var
               _jR_=
                 /*<<map.ml 204 40>>*/ exists(p,l);
               /*<<map.ml 204 50>>*/ if(!_jR_){var param$0=r;continue}
               /*<<map.ml 204 40>>*/ var _jQ_=_jR_}
             /*<<map.ml 203 17>>*/ return _jQ_}
           /*<<map.ml 203 17>>*/ return 0}}
      function add_min_binding(k,v,param)
       { /*<<?>>*/ if(param)
         {var r=param[4],d=param[3],x=param[2],l=param[1];
           /*<<map.ml 217 35>>*/ return  /*<<map.ml 217 35>>*/ bal
                  ( /*<<map.ml 217 12>>*/ add_min_binding(k,v,l),x,d,r)}
         /*<<map.ml 215 17>>*/ return  /*<<map.ml 215 17>>*/ singleton(k,v)}
      function add_max_binding(k,v,param)
       { /*<<?>>*/ if(param)
         {var r=param[4],d=param[3],x=param[2],l=param[1];
           /*<<map.ml 222 41>>*/ return  /*<<map.ml 222 41>>*/ bal
                  (l,x,d, /*<<map.ml 222 18>>*/ add_max_binding(k,v,r))}
         /*<<map.ml 220 17>>*/ return  /*<<map.ml 220 17>>*/ singleton(k,v)}
      function join(l,v,d,r)
       { /*<<map.ml 228 6>>*/ if(l)
         {if(r)
           {var
             rh=r[5],
             rr=r[4],
             rd=r[3],
             rv=r[2],
             rl=r[1],
             lh=l[5],
             lr=l[4],
             ld=l[3],
             lv=l[2],
             ll=l[1];
             /*<<map.ml 232 10>>*/ return (rh+2|0)<lh
                    ? /*<<map.ml 232 58>>*/ bal
                      (ll,lv,ld, /*<<map.ml 232 43>>*/ join(lr,v,d,r))
                    :(lh+2|0)<rh
                      ? /*<<map.ml 233 49>>*/ bal
                        ( /*<<map.ml 233 34>>*/ join(l,v,d,rl),rv,rd,rr)
                      : /*<<map.ml 234 10>>*/ create(l,v,d,r)}
           /*<<map.ml 230 22>>*/ return  /*<<map.ml 230 22>>*/ add_max_binding
                  (v,d,l)}
         /*<<map.ml 229 22>>*/ return  /*<<map.ml 229 22>>*/ add_min_binding
                (v,d,r) /*<<map.ml 234 24>>*/ }
      function concat(t,match)
       { /*<<map.ml 241 6>>*/ if(t)
         { /*<<map.ml 245 10>>*/ if(match)
           { /*<<map.ml 245 23>>*/ var
              /*<<map.ml 245 23>>*/ match$0=
               /*<<map.ml 245 23>>*/ min_binding(match),
              /*<<map.ml 245 37>>*/ d=match$0[2],
              /*<<map.ml 245 37>>*/ x=match$0[1];
             /*<<map.ml 246 45>>*/ return  /*<<map.ml 246 45>>*/ join
                    (t,x,d, /*<<map.ml 246 22>>*/ remove_min_binding(match))}
           /*<<map.ml 243 22>>*/ return t}
         /*<<map.ml 242 22>>*/ return match /*<<map.ml 246 45>>*/ }
      function concat_or_join(t1,v,d,t2)
       { /*<<map.ml 249 6>>*/ if(d)
         { /*<<map.ml 250 18>>*/  /*<<map.ml 250 18>>*/ var d$0=d[1];
           /*<<map.ml 250 18>>*/ return  /*<<map.ml 250 18>>*/ join
                  (t1,v,d$0,t2)}
         /*<<map.ml 251 16>>*/ return  /*<<map.ml 251 16>>*/ concat(t1,t2) /*<<map.ml 251 28>>*/ }
      function split(x,param)
       { /*<<?>>*/ if(param)
         { /*<<map.ml 257 18>>*/ var
           r=param[4],
           d=param[3],
           v=param[2],
           l=param[1],
            /*<<map.ml 257 18>>*/ c=
             /*<<map.ml 257 18>>*/ caml_call2(Ord[1],x,v);
           /*<<map.ml 258 10>>*/ if(0===c)return [0,l,[0,d],r];
           /*<<map.ml 259 15>>*/ if(0<=c)
           { /*<<map.ml 262 33>>*/ var
              /*<<map.ml 262 33>>*/ match= /*<<map.ml 262 33>>*/ split(x,r),
              /*<<map.ml 262 42>>*/ rr=match[3],
              /*<<map.ml 262 42>>*/ pres=match[2],
              /*<<map.ml 262 42>>*/ lr=match[1];
             /*<<map.ml 262 60>>*/ return [0,
                     /*<<map.ml 262 47>>*/ join(l,v,d,lr),
                    pres,
                    rr]}
           /*<<map.ml 257 18>>*/ var
            /*<<map.ml 260 33>>*/ match$0= /*<<map.ml 260 33>>*/ split(x,l),
            /*<<map.ml 260 42>>*/ rl=match$0[3],
            /*<<map.ml 260 42>>*/ pres$0=match$0[2],
            /*<<map.ml 260 42>>*/ ll=match$0[1];
           /*<<map.ml 260 70>>*/ return [0,
                  ll,
                  pres$0,
                   /*<<map.ml 260 57>>*/ join(rl,v,d,r)]}
         /*<<map.ml 255 10>>*/ return _y_}
      function merge(f,s1,s2)
       { /*<<map.ml 265 6>>*/ if(s1)
         {var h1=s1[5],r1=s1[4],d1=s1[3],v1=s1[2],l1=s1[1];
           /*<<map.ml 267 59>>*/ if( /*<<map.ml 267 50>>*/ height(s2)<=h1)
           { /*<<map.ml 268 29>>*/ var
              /*<<map.ml 268 29>>*/ match= /*<<map.ml 268 29>>*/ split(v1,s2),
              /*<<map.ml 268 40>>*/ r2=match[3],
              /*<<map.ml 268 40>>*/ d2=match[2],
              /*<<map.ml 268 40>>*/ l2=match[1],
              /*<<map.ml 269 64>>*/ _jL_= /*<<map.ml 269 64>>*/ merge(f,r1,r2),
              /*<<map.ml 269 44>>*/ _jM_=
               /*<<map.ml 269 44>>*/ caml_call3(f,v1,[0,d1],d2);
             /*<<map.ml 269 40>>*/ return  /*<<map.ml 269 40>>*/ concat_or_join
                    ( /*<<map.ml 269 25>>*/ merge(f,l1,l2),v1,_jM_,_jL_)}}
        else
         if(!s2)return 0;
        if(s2)
         { /*<<map.ml 271 29>>*/ var
           r2$0=s2[4],
           d2$0=s2[3],
           v2=s2[2],
           l2$0=s2[1],
            /*<<map.ml 271 29>>*/ match$0= /*<<map.ml 271 29>>*/ split(v2,s1),
            /*<<map.ml 271 40>>*/ r1$0=match$0[3],
            /*<<map.ml 271 40>>*/ d1$0=match$0[2],
            /*<<map.ml 271 40>>*/ l1$0=match$0[1],
            /*<<map.ml 272 64>>*/ _jN_=
             /*<<map.ml 272 64>>*/ merge(f,r1$0,r2$0),
            /*<<map.ml 272 44>>*/ _jO_=
             /*<<map.ml 272 44>>*/ caml_call3(f,v2,d1$0,[0,d2$0]);
           /*<<map.ml 272 40>>*/ return  /*<<map.ml 272 40>>*/ concat_or_join
                  ( /*<<map.ml 272 25>>*/ merge(f,l1$0,l2$0),v2,_jO_,_jN_)}
         /*<<map.ml 274 22>>*/ throw [0,Assert_failure,_z_] /*<<map.ml 274 22>>*/ }
      function union(f,s1,s2)
       { /*<<map.ml 277 6>>*/ if(s1)
         {if(s2)
           {var
             h2=s2[5],
             r2=s2[4],
             d2=s2[3],
             v2=s2[2],
             l2=s2[1],
             h1=s1[5],
             r1=s1[4],
             d1=s1[3],
             v1=s1[2],
             l1=s1[1];
             /*<<map.ml 280 10>>*/ if(h2<=h1)
             { /*<<map.ml 281 31>>*/ var
                /*<<map.ml 281 31>>*/ match=
                 /*<<map.ml 281 31>>*/ split(v1,s2),
                /*<<map.ml 281 42>>*/ r2$0=match[3],
                /*<<map.ml 281 42>>*/ d2$0=match[2],
                /*<<map.ml 281 42>>*/ l2$0=match[1],
                /*<<map.ml 282 20>>*/ l=
                 /*<<map.ml 282 20>>*/ union(f,l1,l2$0),
                /*<<map.ml 282 42>>*/ r=
                 /*<<map.ml 282 42>>*/ union(f,r1,r2$0);
               /*<<map.ml 283 12>>*/ if(d2$0)
               { /*<<map.ml 285 25>>*/  /*<<map.ml 285 25>>*/ var
                 d2$1=
                  d2$0[1];
                 /*<<map.ml 285 57>>*/ return  /*<<map.ml 285 57>>*/ concat_or_join
                        (l,v1, /*<<map.ml 285 45>>*/ caml_call3(f,v1,d1,d2$1),r)}
               /*<<map.ml 284 22>>*/ return  /*<<map.ml 284 22>>*/ join
                      (l,v1,d1,r)}
             /*<<map.ml 287 31>>*/ var
              /*<<map.ml 287 31>>*/ match$0=
               /*<<map.ml 287 31>>*/ split(v2,s1),
              /*<<map.ml 287 42>>*/ r1$0=match$0[3],
              /*<<map.ml 287 42>>*/ d1$0=match$0[2],
              /*<<map.ml 287 42>>*/ l1$0=match$0[1],
              /*<<map.ml 288 20>>*/ l$0=
               /*<<map.ml 288 20>>*/ union(f,l1$0,l2),
              /*<<map.ml 288 42>>*/ r$0=
               /*<<map.ml 288 42>>*/ union(f,r1$0,r2);
             /*<<map.ml 289 12>>*/ if(d1$0)
             { /*<<map.ml 291 25>>*/  /*<<map.ml 291 25>>*/ var d1$1=d1$0[1];
               /*<<map.ml 291 57>>*/ return  /*<<map.ml 291 57>>*/ concat_or_join
                      (l$0,v2, /*<<map.ml 291 45>>*/ caml_call3(f,v2,d1$1,d2),r$0)}
             /*<<map.ml 290 22>>*/ return  /*<<map.ml 290 22>>*/ join
                    (l$0,v2,d2,r$0)}
          var s=s1}
        else
         var s=s2;
         /*<<map.ml 278 35>>*/ return s /*<<map.ml 291 59>>*/ }
      function filter(p,t)
       { /*<<?>>*/ if(t)
         { /*<<map.ml 297 19>>*/ var
           r=t[4],
           d=t[3],
           v=t[2],
           l=t[1],
            /*<<map.ml 297 19>>*/ l$0= /*<<map.ml 297 19>>*/ filter(p,l),
            /*<<map.ml 298 20>>*/ pvd= /*<<map.ml 298 20>>*/ caml_call2(p,v,d),
            /*<<map.ml 299 19>>*/ r$0= /*<<map.ml 299 19>>*/ filter(p,r);
           /*<<map.ml 300 10>>*/ if(pvd)
           { /*<<map.ml 300 22>>*/ if(l===l$0)if(r===r$0)return t;
             /*<<map.ml 300 52>>*/ return  /*<<map.ml 300 52>>*/ join
                    (l$0,v,d,r$0)}
           /*<<map.ml 301 15>>*/ return  /*<<map.ml 301 15>>*/ concat(l$0,r$0)}
         /*<<map.ml 294 17>>*/ return 0}
      function partition(p,param)
       { /*<<?>>*/ if(param)
         { /*<<map.ml 307 25>>*/ var
           r=param[4],
           d=param[3],
           v=param[2],
           l=param[1],
            /*<<map.ml 307 25>>*/ match= /*<<map.ml 307 25>>*/ partition(p,l),
            /*<<map.ml 307 38>>*/ lf=match[2],
            /*<<map.ml 307 38>>*/ lt=match[1],
            /*<<map.ml 308 20>>*/ pvd= /*<<map.ml 308 20>>*/ caml_call2(p,v,d),
            /*<<map.ml 309 25>>*/ match$0=
             /*<<map.ml 309 25>>*/ partition(p,r),
            /*<<map.ml 309 38>>*/ rf=match$0[2],
            /*<<map.ml 309 38>>*/ rt=match$0[1];
           /*<<map.ml 310 10>>*/ if(pvd)
           { /*<<map.ml 311 32>>*/  /*<<map.ml 311 32>>*/ var
             _jJ_=
               /*<<map.ml 311 32>>*/ concat(lf,rf);
             /*<<map.ml 311 30>>*/ return [0,
                     /*<<map.ml 311 16>>*/ join(lt,v,d,rt),
                    _jJ_]}
           /*<<map.ml 307 25>>*/  /*<<map.ml 312 30>>*/ var
           _jK_=
             /*<<map.ml 312 30>>*/ join(lf,v,d,rf);
           /*<<map.ml 312 28>>*/ return [0,
                   /*<<map.ml 312 16>>*/ concat(lt,rt),
                  _jK_]}
         /*<<map.ml 304 17>>*/ return _A_}
      function cons_enum(m,e)
       {var m$0=m,e$0=e;
         /*<<map.ml 317 6>>*/ for(;;)
         { /*<<map.ml 317 6>>*/ if(m$0)
           { /*<<map.ml 319 31>>*/ var
             r=m$0[4],
             d=m$0[3],
             v=m$0[2],
             l=m$0[1],
              /*<<map.ml 319 31>>*/ e$1=[0,v,d,r,e$0],
             m$0=l,
             e$0=e$1;
            continue}
           /*<<map.ml 318 17>>*/ return e$0} /*<<map.ml 319 61>>*/ }
      function compare(cmp,m1,m2)
       { /*<<map.ml 333 40>>*/ var
          /*<<map.ml 333 40>>*/ e2$2= /*<<map.ml 333 40>>*/ cons_enum(m2,0),
          /*<<map.ml 333 21>>*/ e1$2= /*<<map.ml 333 21>>*/ cons_enum(m1,0),
         e1=e1$2,
         e2=e2$2;
         /*<<map.ml 323 10>>*/ for(;;)
         { /*<<map.ml 323 10>>*/ if(e1)
           {if(e2)
             { /*<<map.ml 328 20>>*/ var
               e2$0=e2[4],
               r2=e2[3],
               d2=e2[2],
               v2=e2[1],
               e1$0=e1[4],
               r1=e1[3],
               d1=e1[2],
               v1=e1[1],
                /*<<map.ml 328 20>>*/ c=
                 /*<<map.ml 328 20>>*/ caml_call2(Ord[1],v1,v2);
               /*<<map.ml 329 12>>*/ if(0===c)
               { /*<<map.ml 330 20>>*/  /*<<map.ml 330 20>>*/ var
                 c$0=
                   /*<<map.ml 330 20>>*/ caml_call2(cmp,d1,d2);
                 /*<<map.ml 331 12>>*/ if(0===c$0)
                 { /*<<map.ml 332 42>>*/ var
                    /*<<map.ml 332 42>>*/ e2$1=
                     /*<<map.ml 332 42>>*/ cons_enum(r2,e2$0),
                    /*<<map.ml 332 24>>*/ e1$1=
                     /*<<map.ml 332 24>>*/ cons_enum(r1,e1$0),
                   e1=e1$1,
                   e2=e2$1;
                  continue}
                 /*<<map.ml 331 27>>*/ return c$0}
               /*<<map.ml 329 27>>*/ return c}
             /*<<map.ml 326 22>>*/ return 1}
           /*<<map.ml 325 23>>*/ return e2?-1:0} /*<<map.ml 333 58>>*/ }
      function equal(cmp,m1,m2)
       { /*<<map.ml 344 38>>*/ var
          /*<<map.ml 344 38>>*/ e2$2= /*<<map.ml 344 38>>*/ cons_enum(m2,0),
          /*<<map.ml 344 19>>*/ e1$2= /*<<map.ml 344 19>>*/ cons_enum(m1,0),
         e1=e1$2,
         e2=e2$2;
         /*<<map.ml 337 10>>*/ for(;;)
         { /*<<map.ml 337 10>>*/ if(e1)
           {if(e2)
             { /*<<map.ml 342 29>>*/ var
               e2$0=e2[4],
               r2=e2[3],
               d2=e2[2],
               v2=e2[1],
               e1$0=e1[4],
               r1=e1[3],
               d1=e1[2],
               v1=e1[1],
                /*<<map.ml 342 29>>*/ _jG_=
                0=== /*<<map.ml 342 12>>*/ caml_call2(Ord[1],v1,v2)?1:0;
               /*<<map.ml 342 29>>*/ if(_jG_)
               { /*<<map.ml 342 37>>*/  /*<<map.ml 342 37>>*/ var
                 _jH_=
                   /*<<map.ml 342 37>>*/ caml_call2(cmp,d1,d2);
                 /*<<map.ml 342 46>>*/ if(_jH_)
                 { /*<<map.ml 343 40>>*/ var
                    /*<<map.ml 343 40>>*/ e2$1=
                     /*<<map.ml 343 40>>*/ cons_enum(r2,e2$0),
                    /*<<map.ml 343 22>>*/ e1$1=
                     /*<<map.ml 343 22>>*/ cons_enum(r1,e1$0),
                   e1=e1$1,
                   e2=e2$1;
                  continue}
                 /*<<map.ml 342 37>>*/ var _jI_=_jH_}
              else
               var _jI_=_jG_;
               /*<<map.ml 340 22>>*/ return _jI_}
             /*<<map.ml 340 22>>*/ return 0}
           /*<<map.ml 339 23>>*/ return e2?0:1} /*<<map.ml 344 56>>*/ }
      function cardinal(param)
       { /*<<map.ml 346 23>>*/ if(param)
         { /*<<map.ml 348 48>>*/ var
           r=param[4],
           l=param[1],
            /*<<map.ml 348 48>>*/ _jF_= /*<<map.ml 348 48>>*/ cardinal(r);
           /*<<map.ml 348 41>>*/ return ( /*<<map.ml 348 31>>*/ cardinal(l)+
                  1|
                  0)+
                 _jF_|
                 0}
         /*<<map.ml 347 17>>*/ return 0 /*<<map.ml 348 58>>*/ }
      function bindings_aux(accu,param)
       {var accu$0=accu,param$0=param;
        for(;;)
         {if(param$0)
           { /*<<map.ml 352 74>>*/ var
             r=param$0[4],
             d=param$0[3],
             v=param$0[2],
             l=param$0[1],
              /*<<map.ml 352 74>>*/ accu$1=
              [0,[0,v,d], /*<<map.ml 352 55>>*/ bindings_aux(accu$0,r)],
             accu$0=accu$1,
             param$0=l;
            continue}
           /*<<map.ml 351 17>>*/ return accu$0}}
      function bindings(s)
       { /*<<map.ml 355 6>>*/ return  /*<<map.ml 355 6>>*/ bindings_aux(0,s) /*<<map.ml 355 23>>*/ }
      return [0,
              empty,
              is_empty,
              mem,
              add,
              singleton,
              remove,
              merge,
              union,
              compare,
              equal,
              iter,
              fold,
              for_all,
              exists,
              filter,
              partition,
              cardinal,
              bindings,
              min_binding,
              max_binding,
              min_binding,
              split,
              find,
              map,
              mapi]}
    var Empty=[248,_C_,caml_fresh_oo_id(0)];
    caml_fresh_oo_id(0);
    function resize(b,more)
     { /*<<buffer.ml 62 2>>*/ var
        /*<<buffer.ml 62 2>>*/ len=b[3],
        /*<<buffer.ml 63 2>>*/ new_len=[0,len];
      for(;;)
       {if(new_len[1]<(b[2]+more|0))
         { /*<<buffer.ml 64 40>>*/ new_len[1]=2*new_len[1]|0;continue}
         /*<<buffer.ml 65 2>>*/ if(max_string_length<new_len[1])
         { /*<<buffer.ml 65 43>>*/ if(!((b[2]+more|0)<=max_string_length))
           throw [0,Failure,s];
           /*<<buffer.ml 67 9>>*/ new_len[1]=max_string_length}
         /*<<buffer.ml 68 50>>*/  /*<<buffer.ml 68 50>>*/ var
         new_buffer=
           /*<<buffer.ml 68 50>>*/ caml_create_string(new_len[1]);
         /*<<buffer.ml 73 2>>*/  /*<<buffer.ml 73 2>>*/ blit
         (b[1],0,new_buffer,0,b[2]);
         /*<<buffer.ml 73 47>>*/ b[1]=new_buffer;
         /*<<buffer.ml 75 2>>*/ b[3]=new_len[1];
         /*<<buffer.ml 75 2>>*/ return 0} /*<<buffer.ml 75 22>>*/ }
    function add_string(b,s)
     { /*<<buffer.ml 95 2>>*/ var
        /*<<buffer.ml 95 2>>*/ len=
         /*<<buffer.ml 95 2>>*/ caml_ml_string_length(s),
        /*<<buffer.ml 96 2>>*/ new_position=b[2]+len|0;
       /*<<buffer.ml 97 2>>*/ if(b[3]<new_position)
        /*<<buffer.ml 97 34>>*/ resize(b,len);
       /*<<buffer.ml 98 2>>*/  /*<<buffer.ml 98 2>>*/ blit$0
       (s,0,b[1],b[2],len);
       /*<<buffer.ml 98 47>>*/ b[2]=new_position;
       /*<<buffer.ml 98 47>>*/ return 0 /*<<buffer.ml 99 28>>*/ }
    var default_float_precision=-6;
    function buffer_create(init_size)
     { /*<<camlinternalFormat.ml 250 71>>*/ return [0,
              0,
               /*<<camlinternalFormat.ml 250 49>>*/ caml_create_string
               (init_size)] /*<<camlinternalFormat.ml 250 73>>*/ }
    function buffer_check_size(buf,overhead)
     { /*<<camlinternalFormat.ml 254 2>>*/ var
        /*<<camlinternalFormat.ml 254 2>>*/ len=
         /*<<camlinternalFormat.ml 254 2>>*/ caml_ml_string_length(buf[2]),
        /*<<camlinternalFormat.ml 255 2>>*/ y=buf[1]+overhead|0,
        /*<<camlinternalFormat.ml 256 2>>*/ _jD_=len<y?1:0;
       /*<<camlinternalFormat.ml 256 2>>*/ if(_jD_)
       { /*<<camlinternalFormat.ml 256 24>>*/ var
          /*<<camlinternalFormat.ml 256 24>>*/ x=len*2|0,
          /*<<pervasives.ml 65 23>>*/ new_len=
           /*<<pervasives.ml 65 17>>*/ caml_greaterequal(x,y)?x:y,
          /*<<camlinternalFormat.ml 258 4>>*/ new_str=
           /*<<camlinternalFormat.ml 258 4>>*/ caml_create_string(new_len);
         /*<<camlinternalFormat.ml 259 4>>*/  /*<<camlinternalFormat.ml 259 4>>*/ blit
         (buf[2],0,new_str,0,len);
         /*<<camlinternalFormat.ml 259 40>>*/ buf[2]=new_str;
         /*<<camlinternalFormat.ml 256 24>>*/ var _jE_=0}
      else
       var _jE_=_jD_;
       /*<<camlinternalFormat.ml 250 30>>*/ return _jE_ /*<<camlinternalFormat.ml 261 3>>*/ }
    function buffer_add_char(buf,c)
     { /*<<camlinternalFormat.ml 265 2>>*/  /*<<camlinternalFormat.ml 265 2>>*/ buffer_check_size
       (buf,1);
       /*<<camlinternalFormat.ml 266 2>>*/  /*<<camlinternalFormat.ml 266 2>>*/ caml_string_set
       (buf[2],buf[1],c);
       /*<<camlinternalFormat.ml 266 31>>*/ buf[1]=buf[1]+1|0;
       /*<<camlinternalFormat.ml 266 31>>*/ return 0 /*<<camlinternalFormat.ml 267 24>>*/ }
    function buffer_add_string(buf,s)
     { /*<<camlinternalFormat.ml 271 2>>*/  /*<<camlinternalFormat.ml 271 2>>*/ var
       str_len=
         /*<<camlinternalFormat.ml 271 2>>*/ caml_ml_string_length(s);
       /*<<camlinternalFormat.ml 272 2>>*/  /*<<camlinternalFormat.ml 272 2>>*/ buffer_check_size
       (buf,str_len);
       /*<<camlinternalFormat.ml 273 2>>*/  /*<<camlinternalFormat.ml 273 2>>*/ blit$0
       (s,0,buf[2],buf[1],str_len);
       /*<<camlinternalFormat.ml 273 43>>*/ buf[1]=buf[1]+str_len|0;
       /*<<camlinternalFormat.ml 273 43>>*/ return 0 /*<<camlinternalFormat.ml 274 30>>*/ }
    function buffer_contents(buf)
     { /*<<camlinternalFormat.ml 278 2>>*/ return  /*<<camlinternalFormat.ml 278 2>>*/ sub_string
              (buf[2],0,buf[1]) /*<<camlinternalFormat.ml 278 38>>*/ }
    function string_of_formatting_lit(formatting_lit)
     { /*<<camlinternalFormat.ml 457 46>>*/ if
       (typeof formatting_lit==="number")
        /*<<camlinternalFormat.ml 457 46>>*/ switch(formatting_lit)
        {case 0: /*<<camlinternalFormat.ml 458 28>>*/ return _D_;
         case 1: /*<<camlinternalFormat.ml 459 28>>*/ return _E_;
         case 2: /*<<camlinternalFormat.ml 461 28>>*/ return _F_;
         case 3: /*<<camlinternalFormat.ml 462 28>>*/ return _G_;
         case 4: /*<<camlinternalFormat.ml 463 28>>*/ return _H_;
         case 5: /*<<camlinternalFormat.ml 465 28>>*/ return _I_;
         default: /*<<camlinternalFormat.ml 466 28>>*/ return _J_}
      else
        /*<<camlinternalFormat.ml 457 46>>*/ switch(formatting_lit[0])
        {case 0:
           /*<<camlinternalFormat.ml 460 28>>*/  /*<<camlinternalFormat.ml 460 28>>*/ var
           str=
            formatting_lit[1];
           /*<<camlinternalFormat.ml 460 28>>*/ return str;
         case 1:
           /*<<camlinternalFormat.ml 464 28>>*/  /*<<camlinternalFormat.ml 464 28>>*/ var
           str$0=
            formatting_lit[1];
           /*<<camlinternalFormat.ml 464 28>>*/ return str$0;
         default:
           /*<<camlinternalFormat.ml 467 20>>*/  /*<<camlinternalFormat.ml 467 20>>*/ var
           c=
            formatting_lit[1];
           /*<<camlinternalFormat.ml 467 43>>*/ return  /*<<camlinternalFormat.ml 467 43>>*/ _a_
                  (_K_, /*<<string.ml 35 2>>*/ make(1,c))} /*<<camlinternalFormat.ml 467 43>>*/ }
    function bprint_fmtty(buf,fmtty)
     { /*<<?>>*/ var fmtty$0=fmtty;
       /*<<camlinternalFormat.ml 496 17>>*/ for(;;)
       if(typeof fmtty$0==="number")
         /*<<camlinternalFormat.ml 521 20>>*/ return 0;
       else
         /*<<camlinternalFormat.ml 496 17>>*/ switch(fmtty$0[0])
         {case 0:
           var rest=fmtty$0[1];
            /*<<camlinternalFormat.ml 497 25>>*/  /*<<camlinternalFormat.ml 497 25>>*/ buffer_add_string
            (buf,_L_);
           var fmtty$0=rest;
           continue;
          case 1:
           var rest$0=fmtty$0[1];
            /*<<camlinternalFormat.ml 498 25>>*/  /*<<camlinternalFormat.ml 498 25>>*/ buffer_add_string
            (buf,_M_);
           var fmtty$0=rest$0;
           continue;
          case 2:
           var rest$1=fmtty$0[1];
            /*<<camlinternalFormat.ml 499 25>>*/  /*<<camlinternalFormat.ml 499 25>>*/ buffer_add_string
            (buf,_N_);
           var fmtty$0=rest$1;
           continue;
          case 3:
           var rest$2=fmtty$0[1];
            /*<<camlinternalFormat.ml 500 25>>*/  /*<<camlinternalFormat.ml 500 25>>*/ buffer_add_string
            (buf,_O_);
           var fmtty$0=rest$2;
           continue;
          case 4:
           var rest$3=fmtty$0[1];
            /*<<camlinternalFormat.ml 501 25>>*/  /*<<camlinternalFormat.ml 501 25>>*/ buffer_add_string
            (buf,_P_);
           var fmtty$0=rest$3;
           continue;
          case 5:
           var rest$4=fmtty$0[1];
            /*<<camlinternalFormat.ml 502 25>>*/  /*<<camlinternalFormat.ml 502 25>>*/ buffer_add_string
            (buf,_Q_);
           var fmtty$0=rest$4;
           continue;
          case 6:
           var rest$5=fmtty$0[1];
            /*<<camlinternalFormat.ml 503 25>>*/  /*<<camlinternalFormat.ml 503 25>>*/ buffer_add_string
            (buf,_R_);
           var fmtty$0=rest$5;
           continue;
          case 7:
           var rest$6=fmtty$0[1];
            /*<<camlinternalFormat.ml 504 25>>*/  /*<<camlinternalFormat.ml 504 25>>*/ buffer_add_string
            (buf,_S_);
           var fmtty$0=rest$6;
           continue;
          case 8:
           var rest$7=fmtty$0[2],sub_fmtty=fmtty$0[1];
            /*<<camlinternalFormat.ml 515 4>>*/  /*<<camlinternalFormat.ml 515 4>>*/ buffer_add_string
            (buf,_T_);
            /*<<camlinternalFormat.ml 515 32>>*/  /*<<camlinternalFormat.ml 515 32>>*/ bprint_fmtty
            (buf,sub_fmtty);
            /*<<camlinternalFormat.ml 516 4>>*/  /*<<camlinternalFormat.ml 516 4>>*/ buffer_add_string
            (buf,_U_);
           var fmtty$0=rest$7;
           continue;
          case 9:
           var rest$8=fmtty$0[3],sub_fmtty$0=fmtty$0[1];
            /*<<camlinternalFormat.ml 518 4>>*/  /*<<camlinternalFormat.ml 518 4>>*/ buffer_add_string
            (buf,_V_);
            /*<<camlinternalFormat.ml 518 32>>*/  /*<<camlinternalFormat.ml 518 32>>*/ bprint_fmtty
            (buf,sub_fmtty$0);
            /*<<camlinternalFormat.ml 519 4>>*/  /*<<camlinternalFormat.ml 519 4>>*/ buffer_add_string
            (buf,_W_);
           var fmtty$0=rest$8;
           continue;
          case 10:
           var rest$9=fmtty$0[1];
            /*<<camlinternalFormat.ml 505 25>>*/  /*<<camlinternalFormat.ml 505 25>>*/ buffer_add_string
            (buf,_X_);
           var fmtty$0=rest$9;
           continue;
          case 11:
           var rest$10=fmtty$0[1];
            /*<<camlinternalFormat.ml 506 25>>*/  /*<<camlinternalFormat.ml 506 25>>*/ buffer_add_string
            (buf,_Y_);
           var fmtty$0=rest$10;
           continue;
          case 12:
           var rest$11=fmtty$0[1];
            /*<<camlinternalFormat.ml 507 25>>*/  /*<<camlinternalFormat.ml 507 25>>*/ buffer_add_string
            (buf,_Z_);
           var fmtty$0=rest$11;
           continue;
          case 13:
           var rest$12=fmtty$0[1];
            /*<<camlinternalFormat.ml 508 25>>*/  /*<<camlinternalFormat.ml 508 25>>*/ buffer_add_string
            (buf,___);
           var fmtty$0=rest$12;
           continue;
          default:
           var rest$13=fmtty$0[1];
            /*<<camlinternalFormat.ml 511 4>>*/  /*<<camlinternalFormat.ml 511 4>>*/ buffer_add_string
            (buf,_$_);
           var fmtty$0=rest$13;
           continue} /*<<camlinternalFormat.ml 521 22>>*/ }
    function symm(param)
     { /*<<camlinternalFormat.ml 652 8>>*/ if(typeof param==="number")
        /*<<camlinternalFormat.ml 675 20>>*/ return 0;
      else
        /*<<camlinternalFormat.ml 652 8>>*/ switch(param[0])
        {case 0:
           /*<<camlinternalFormat.ml 658 20>>*/  /*<<camlinternalFormat.ml 658 20>>*/ var
           rest=
            param[1];
           /*<<camlinternalFormat.ml 658 39>>*/ return [0,
                   /*<<camlinternalFormat.ml 658 28>>*/ symm(rest)];
         case 1:
           /*<<camlinternalFormat.ml 665 22>>*/  /*<<camlinternalFormat.ml 665 22>>*/ var
           rest$0=
            param[1];
           /*<<camlinternalFormat.ml 665 43>>*/ return [1,
                   /*<<camlinternalFormat.ml 665 32>>*/ symm(rest$0)];
         case 2:
           /*<<camlinternalFormat.ml 659 19>>*/  /*<<camlinternalFormat.ml 659 19>>*/ var
           rest$1=
            param[1];
           /*<<camlinternalFormat.ml 659 37>>*/ return [2,
                   /*<<camlinternalFormat.ml 659 26>>*/ symm(rest$1)];
         case 3:
           /*<<camlinternalFormat.ml 660 21>>*/  /*<<camlinternalFormat.ml 660 21>>*/ var
           rest$2=
            param[1];
           /*<<camlinternalFormat.ml 660 41>>*/ return [3,
                   /*<<camlinternalFormat.ml 660 30>>*/ symm(rest$2)];
         case 4:
           /*<<camlinternalFormat.ml 662 25>>*/  /*<<camlinternalFormat.ml 662 25>>*/ var
           rest$3=
            param[1];
           /*<<camlinternalFormat.ml 662 49>>*/ return [4,
                   /*<<camlinternalFormat.ml 662 38>>*/ symm(rest$3)];
         case 5:
           /*<<camlinternalFormat.ml 661 21>>*/  /*<<camlinternalFormat.ml 661 21>>*/ var
           rest$4=
            param[1];
           /*<<camlinternalFormat.ml 661 41>>*/ return [5,
                   /*<<camlinternalFormat.ml 661 30>>*/ symm(rest$4)];
         case 6:
           /*<<camlinternalFormat.ml 663 21>>*/  /*<<camlinternalFormat.ml 663 21>>*/ var
           rest$5=
            param[1];
           /*<<camlinternalFormat.ml 663 41>>*/ return [6,
                   /*<<camlinternalFormat.ml 663 30>>*/ symm(rest$5)];
         case 7:
           /*<<camlinternalFormat.ml 664 20>>*/  /*<<camlinternalFormat.ml 664 20>>*/ var
           rest$6=
            param[1];
           /*<<camlinternalFormat.ml 664 39>>*/ return [7,
                   /*<<camlinternalFormat.ml 664 28>>*/ symm(rest$6)];
         case 8:
          var rest$7=param[2],ty=param[1];
           /*<<camlinternalFormat.ml 672 32>>*/ return [8,
                  ty,
                   /*<<camlinternalFormat.ml 672 23>>*/ symm(rest$7)];
         case 9:
          var rest$8=param[3],ty2=param[2],ty1=param[1];
           /*<<camlinternalFormat.ml 674 40>>*/ return [9,
                  ty2,
                  ty1,
                   /*<<camlinternalFormat.ml 674 31>>*/ symm(rest$8)];
         case 10:
           /*<<camlinternalFormat.ml 667 21>>*/  /*<<camlinternalFormat.ml 667 21>>*/ var
           rest$9=
            param[1];
           /*<<camlinternalFormat.ml 667 41>>*/ return [10,
                   /*<<camlinternalFormat.ml 667 30>>*/ symm(rest$9)];
         case 11:
           /*<<camlinternalFormat.ml 666 21>>*/  /*<<camlinternalFormat.ml 666 21>>*/ var
           rest$10=
            param[1];
           /*<<camlinternalFormat.ml 666 41>>*/ return [11,
                   /*<<camlinternalFormat.ml 666 30>>*/ symm(rest$10)];
         case 12:
           /*<<camlinternalFormat.ml 668 19>>*/  /*<<camlinternalFormat.ml 668 19>>*/ var
           rest$11=
            param[1];
           /*<<camlinternalFormat.ml 668 37>>*/ return [12,
                   /*<<camlinternalFormat.ml 668 26>>*/ symm(rest$11)];
         case 13:
           /*<<camlinternalFormat.ml 669 22>>*/  /*<<camlinternalFormat.ml 669 22>>*/ var
           rest$12=
            param[1];
           /*<<camlinternalFormat.ml 669 43>>*/ return [13,
                   /*<<camlinternalFormat.ml 669 32>>*/ symm(rest$12)];
         default:
           /*<<camlinternalFormat.ml 670 30>>*/  /*<<camlinternalFormat.ml 670 30>>*/ var
           rest$13=
            param[1];
           /*<<camlinternalFormat.ml 670 59>>*/ return [14,
                   /*<<camlinternalFormat.ml 670 48>>*/ symm(rest$13)]} /*<<camlinternalFormat.ml 675 32>>*/ }
    function fmtty_rel_det(param)
     { /*<<camlinternalFormat.ml 677 8>>*/ if(typeof param==="number")
       { /*<<camlinternalFormat.ml 686 4>>*/ var
          /*<<camlinternalFormat.ml 686 4>>*/ _jf_=
          function(param)
           { /*<<camlinternalFormat.ml 689 17>>*/ return 0 /*<<camlinternalFormat.ml 689 21>>*/ },
          /*<<camlinternalFormat.ml 686 4>>*/ _jg_=
          function(param)
           { /*<<camlinternalFormat.ml 688 17>>*/ return 0 /*<<camlinternalFormat.ml 688 21>>*/ },
          /*<<camlinternalFormat.ml 686 4>>*/ _jh_=
          function(param)
           { /*<<camlinternalFormat.ml 687 17>>*/ return 0 /*<<camlinternalFormat.ml 687 21>>*/ };
         /*<<camlinternalFormat.ml 686 4>>*/ return [0,
                function(param)
                 { /*<<camlinternalFormat.ml 686 17>>*/ return 0 /*<<camlinternalFormat.ml 686 21>>*/ },
                _jh_,
                _jg_,
                _jf_]}
      else
        /*<<camlinternalFormat.ml 677 8>>*/ switch(param[0])
        {case 0:
           /*<<camlinternalFormat.ml 691 4>>*/ var
            /*<<camlinternalFormat.ml 691 4>>*/ rest=param[1],
            /*<<camlinternalFormat.ml 691 25>>*/ match=
             /*<<camlinternalFormat.ml 691 25>>*/ fmtty_rel_det(rest),
            /*<<camlinternalFormat.ml 691 43>>*/ de=match[4],
            /*<<camlinternalFormat.ml 691 43>>*/ ed=match[3],
            /*<<camlinternalFormat.ml 691 43>>*/ af=match[2],
            /*<<camlinternalFormat.ml 691 43>>*/ fa=match[1],
            /*<<camlinternalFormat.ml 692 4>>*/ _ji_=
            function(param)
             { /*<<camlinternalFormat.ml 693 28>>*/  /*<<camlinternalFormat.ml 693 28>>*/ caml_call1
               (af,0);
               /*<<camlinternalFormat.ml 693 39>>*/ return 0 /*<<camlinternalFormat.ml 693 43>>*/ };
           /*<<camlinternalFormat.ml 692 4>>*/ return [0,
                  function(param)
                   { /*<<camlinternalFormat.ml 692 28>>*/  /*<<camlinternalFormat.ml 692 28>>*/ caml_call1
                     (fa,0);
                     /*<<camlinternalFormat.ml 692 39>>*/ return 0 /*<<camlinternalFormat.ml 692 43>>*/ },
                  _ji_,
                  ed,
                  de];
         case 1:
           /*<<camlinternalFormat.ml 696 4>>*/ var
            /*<<camlinternalFormat.ml 696 4>>*/ rest$0=param[1],
            /*<<camlinternalFormat.ml 696 25>>*/ match$0=
             /*<<camlinternalFormat.ml 696 25>>*/ fmtty_rel_det(rest$0),
            /*<<camlinternalFormat.ml 696 43>>*/ de$0=match$0[4],
            /*<<camlinternalFormat.ml 696 43>>*/ ed$0=match$0[3],
            /*<<camlinternalFormat.ml 696 43>>*/ af$0=match$0[2],
            /*<<camlinternalFormat.ml 696 43>>*/ fa$0=match$0[1],
            /*<<camlinternalFormat.ml 697 4>>*/ _jj_=
            function(param)
             { /*<<camlinternalFormat.ml 698 28>>*/  /*<<camlinternalFormat.ml 698 28>>*/ caml_call1
               (af$0,0);
               /*<<camlinternalFormat.ml 698 39>>*/ return 0 /*<<camlinternalFormat.ml 698 43>>*/ };
           /*<<camlinternalFormat.ml 697 4>>*/ return [0,
                  function(param)
                   { /*<<camlinternalFormat.ml 697 28>>*/  /*<<camlinternalFormat.ml 697 28>>*/ caml_call1
                     (fa$0,0);
                     /*<<camlinternalFormat.ml 697 39>>*/ return 0 /*<<camlinternalFormat.ml 697 43>>*/ },
                  _jj_,
                  ed$0,
                  de$0];
         case 2:
           /*<<camlinternalFormat.ml 701 4>>*/ var
            /*<<camlinternalFormat.ml 701 4>>*/ rest$1=param[1],
            /*<<camlinternalFormat.ml 701 25>>*/ match$1=
             /*<<camlinternalFormat.ml 701 25>>*/ fmtty_rel_det(rest$1),
            /*<<camlinternalFormat.ml 701 43>>*/ de$1=match$1[4],
            /*<<camlinternalFormat.ml 701 43>>*/ ed$1=match$1[3],
            /*<<camlinternalFormat.ml 701 43>>*/ af$1=match$1[2],
            /*<<camlinternalFormat.ml 701 43>>*/ fa$1=match$1[1],
            /*<<camlinternalFormat.ml 702 4>>*/ _jk_=
            function(param)
             { /*<<camlinternalFormat.ml 703 28>>*/  /*<<camlinternalFormat.ml 703 28>>*/ caml_call1
               (af$1,0);
               /*<<camlinternalFormat.ml 703 39>>*/ return 0 /*<<camlinternalFormat.ml 703 43>>*/ };
           /*<<camlinternalFormat.ml 702 4>>*/ return [0,
                  function(param)
                   { /*<<camlinternalFormat.ml 702 28>>*/  /*<<camlinternalFormat.ml 702 28>>*/ caml_call1
                     (fa$1,0);
                     /*<<camlinternalFormat.ml 702 39>>*/ return 0 /*<<camlinternalFormat.ml 702 43>>*/ },
                  _jk_,
                  ed$1,
                  de$1];
         case 3:
           /*<<camlinternalFormat.ml 706 4>>*/ var
            /*<<camlinternalFormat.ml 706 4>>*/ rest$2=param[1],
            /*<<camlinternalFormat.ml 706 25>>*/ match$2=
             /*<<camlinternalFormat.ml 706 25>>*/ fmtty_rel_det(rest$2),
            /*<<camlinternalFormat.ml 706 43>>*/ de$2=match$2[4],
            /*<<camlinternalFormat.ml 706 43>>*/ ed$2=match$2[3],
            /*<<camlinternalFormat.ml 706 43>>*/ af$2=match$2[2],
            /*<<camlinternalFormat.ml 706 43>>*/ fa$2=match$2[1],
            /*<<camlinternalFormat.ml 707 4>>*/ _jl_=
            function(param)
             { /*<<camlinternalFormat.ml 708 28>>*/  /*<<camlinternalFormat.ml 708 28>>*/ caml_call1
               (af$2,0);
               /*<<camlinternalFormat.ml 708 39>>*/ return 0 /*<<camlinternalFormat.ml 708 43>>*/ };
           /*<<camlinternalFormat.ml 707 4>>*/ return [0,
                  function(param)
                   { /*<<camlinternalFormat.ml 707 28>>*/  /*<<camlinternalFormat.ml 707 28>>*/ caml_call1
                     (fa$2,0);
                     /*<<camlinternalFormat.ml 707 39>>*/ return 0 /*<<camlinternalFormat.ml 707 43>>*/ },
                  _jl_,
                  ed$2,
                  de$2];
         case 4:
           /*<<camlinternalFormat.ml 716 4>>*/ var
            /*<<camlinternalFormat.ml 716 4>>*/ rest$3=param[1],
            /*<<camlinternalFormat.ml 716 25>>*/ match$3=
             /*<<camlinternalFormat.ml 716 25>>*/ fmtty_rel_det(rest$3),
            /*<<camlinternalFormat.ml 716 43>>*/ de$3=match$3[4],
            /*<<camlinternalFormat.ml 716 43>>*/ ed$3=match$3[3],
            /*<<camlinternalFormat.ml 716 43>>*/ af$3=match$3[2],
            /*<<camlinternalFormat.ml 716 43>>*/ fa$3=match$3[1],
            /*<<camlinternalFormat.ml 717 4>>*/ _jm_=
            function(param)
             { /*<<camlinternalFormat.ml 718 28>>*/  /*<<camlinternalFormat.ml 718 28>>*/ caml_call1
               (af$3,0);
               /*<<camlinternalFormat.ml 718 39>>*/ return 0 /*<<camlinternalFormat.ml 718 43>>*/ };
           /*<<camlinternalFormat.ml 717 4>>*/ return [0,
                  function(param)
                   { /*<<camlinternalFormat.ml 717 28>>*/  /*<<camlinternalFormat.ml 717 28>>*/ caml_call1
                     (fa$3,0);
                     /*<<camlinternalFormat.ml 717 39>>*/ return 0 /*<<camlinternalFormat.ml 717 43>>*/ },
                  _jm_,
                  ed$3,
                  de$3];
         case 5:
           /*<<camlinternalFormat.ml 711 4>>*/ var
            /*<<camlinternalFormat.ml 711 4>>*/ rest$4=param[1],
            /*<<camlinternalFormat.ml 711 25>>*/ match$4=
             /*<<camlinternalFormat.ml 711 25>>*/ fmtty_rel_det(rest$4),
            /*<<camlinternalFormat.ml 711 43>>*/ de$4=match$4[4],
            /*<<camlinternalFormat.ml 711 43>>*/ ed$4=match$4[3],
            /*<<camlinternalFormat.ml 711 43>>*/ af$4=match$4[2],
            /*<<camlinternalFormat.ml 711 43>>*/ fa$4=match$4[1],
            /*<<camlinternalFormat.ml 712 4>>*/ _jn_=
            function(param)
             { /*<<camlinternalFormat.ml 713 28>>*/  /*<<camlinternalFormat.ml 713 28>>*/ caml_call1
               (af$4,0);
               /*<<camlinternalFormat.ml 713 39>>*/ return 0 /*<<camlinternalFormat.ml 713 43>>*/ };
           /*<<camlinternalFormat.ml 712 4>>*/ return [0,
                  function(param)
                   { /*<<camlinternalFormat.ml 712 28>>*/  /*<<camlinternalFormat.ml 712 28>>*/ caml_call1
                     (fa$4,0);
                     /*<<camlinternalFormat.ml 712 39>>*/ return 0 /*<<camlinternalFormat.ml 712 43>>*/ },
                  _jn_,
                  ed$4,
                  de$4];
         case 6:
           /*<<camlinternalFormat.ml 721 4>>*/ var
            /*<<camlinternalFormat.ml 721 4>>*/ rest$5=param[1],
            /*<<camlinternalFormat.ml 721 25>>*/ match$5=
             /*<<camlinternalFormat.ml 721 25>>*/ fmtty_rel_det(rest$5),
            /*<<camlinternalFormat.ml 721 43>>*/ de$5=match$5[4],
            /*<<camlinternalFormat.ml 721 43>>*/ ed$5=match$5[3],
            /*<<camlinternalFormat.ml 721 43>>*/ af$5=match$5[2],
            /*<<camlinternalFormat.ml 721 43>>*/ fa$5=match$5[1],
            /*<<camlinternalFormat.ml 722 4>>*/ _jo_=
            function(param)
             { /*<<camlinternalFormat.ml 723 28>>*/  /*<<camlinternalFormat.ml 723 28>>*/ caml_call1
               (af$5,0);
               /*<<camlinternalFormat.ml 723 39>>*/ return 0 /*<<camlinternalFormat.ml 723 43>>*/ };
           /*<<camlinternalFormat.ml 722 4>>*/ return [0,
                  function(param)
                   { /*<<camlinternalFormat.ml 722 28>>*/  /*<<camlinternalFormat.ml 722 28>>*/ caml_call1
                     (fa$5,0);
                     /*<<camlinternalFormat.ml 722 39>>*/ return 0 /*<<camlinternalFormat.ml 722 43>>*/ },
                  _jo_,
                  ed$5,
                  de$5];
         case 7:
           /*<<camlinternalFormat.ml 726 4>>*/ var
            /*<<camlinternalFormat.ml 726 4>>*/ rest$6=param[1],
            /*<<camlinternalFormat.ml 726 25>>*/ match$6=
             /*<<camlinternalFormat.ml 726 25>>*/ fmtty_rel_det(rest$6),
            /*<<camlinternalFormat.ml 726 43>>*/ de$6=match$6[4],
            /*<<camlinternalFormat.ml 726 43>>*/ ed$6=match$6[3],
            /*<<camlinternalFormat.ml 726 43>>*/ af$6=match$6[2],
            /*<<camlinternalFormat.ml 726 43>>*/ fa$6=match$6[1],
            /*<<camlinternalFormat.ml 727 4>>*/ _jp_=
            function(param)
             { /*<<camlinternalFormat.ml 728 28>>*/  /*<<camlinternalFormat.ml 728 28>>*/ caml_call1
               (af$6,0);
               /*<<camlinternalFormat.ml 728 39>>*/ return 0 /*<<camlinternalFormat.ml 728 43>>*/ };
           /*<<camlinternalFormat.ml 727 4>>*/ return [0,
                  function(param)
                   { /*<<camlinternalFormat.ml 727 28>>*/  /*<<camlinternalFormat.ml 727 28>>*/ caml_call1
                     (fa$6,0);
                     /*<<camlinternalFormat.ml 727 39>>*/ return 0 /*<<camlinternalFormat.ml 727 43>>*/ },
                  _jp_,
                  ed$6,
                  de$6];
         case 8:
           /*<<camlinternalFormat.ml 759 4>>*/ var
            /*<<camlinternalFormat.ml 759 4>>*/ rest$7=param[2],
            /*<<camlinternalFormat.ml 759 25>>*/ match$7=
             /*<<camlinternalFormat.ml 759 25>>*/ fmtty_rel_det(rest$7),
            /*<<camlinternalFormat.ml 759 43>>*/ de$7=match$7[4],
            /*<<camlinternalFormat.ml 759 43>>*/ ed$7=match$7[3],
            /*<<camlinternalFormat.ml 759 43>>*/ af$7=match$7[2],
            /*<<camlinternalFormat.ml 759 43>>*/ fa$7=match$7[1],
            /*<<camlinternalFormat.ml 760 4>>*/ _jq_=
            function(param)
             { /*<<camlinternalFormat.ml 761 28>>*/  /*<<camlinternalFormat.ml 761 28>>*/ caml_call1
               (af$7,0);
               /*<<camlinternalFormat.ml 761 39>>*/ return 0 /*<<camlinternalFormat.ml 761 43>>*/ };
           /*<<camlinternalFormat.ml 760 4>>*/ return [0,
                  function(param)
                   { /*<<camlinternalFormat.ml 760 28>>*/  /*<<camlinternalFormat.ml 760 28>>*/ caml_call1
                     (fa$7,0);
                     /*<<camlinternalFormat.ml 760 39>>*/ return 0 /*<<camlinternalFormat.ml 760 43>>*/ },
                  _jq_,
                  ed$7,
                  de$7];
         case 9:
           /*<<camlinternalFormat.ml 764 25>>*/ var
           rest$8=param[3],
           ty2=param[2],
           ty1=param[1],
            /*<<camlinternalFormat.ml 764 25>>*/ match$8=
             /*<<camlinternalFormat.ml 764 25>>*/ fmtty_rel_det(rest$8),
            /*<<camlinternalFormat.ml 764 43>>*/ de$8=match$8[4],
            /*<<camlinternalFormat.ml 764 43>>*/ ed$8=match$8[3],
            /*<<camlinternalFormat.ml 764 43>>*/ af$8=match$8[2],
            /*<<camlinternalFormat.ml 764 43>>*/ fa$8=match$8[1],
            /*<<camlinternalFormat.ml 765 13>>*/ ty=
             /*<<camlinternalFormat.ml 765 13>>*/ trans
             ( /*<<camlinternalFormat.ml 765 19>>*/ symm(ty1),ty2),
            /*<<camlinternalFormat.ml 766 25>>*/ match$9=
             /*<<camlinternalFormat.ml 766 25>>*/ fmtty_rel_det(ty),
            /*<<camlinternalFormat.ml 766 41>>*/ jd=match$9[4],
            /*<<camlinternalFormat.ml 766 41>>*/ dj=match$9[3],
            /*<<camlinternalFormat.ml 766 41>>*/ ga=match$9[2],
            /*<<camlinternalFormat.ml 766 41>>*/ ag=match$9[1],
            /*<<camlinternalFormat.ml 767 4>>*/ _jr_=
            function(param)
             { /*<<camlinternalFormat.ml 770 28>>*/  /*<<camlinternalFormat.ml 770 28>>*/ caml_call1
               (jd,0);
               /*<<camlinternalFormat.ml 770 50>>*/  /*<<camlinternalFormat.ml 770 50>>*/ caml_call1
               (de$8,0);
               /*<<camlinternalFormat.ml 770 61>>*/ return 0 /*<<camlinternalFormat.ml 770 65>>*/ },
            /*<<camlinternalFormat.ml 767 4>>*/ _js_=
            function(param)
             { /*<<camlinternalFormat.ml 769 28>>*/  /*<<camlinternalFormat.ml 769 28>>*/ caml_call1
               (ed$8,0);
               /*<<camlinternalFormat.ml 769 50>>*/  /*<<camlinternalFormat.ml 769 50>>*/ caml_call1
               (dj,0);
               /*<<camlinternalFormat.ml 769 61>>*/ return 0 /*<<camlinternalFormat.ml 769 65>>*/ },
            /*<<camlinternalFormat.ml 767 4>>*/ _jt_=
            function(param)
             { /*<<camlinternalFormat.ml 768 28>>*/  /*<<camlinternalFormat.ml 768 28>>*/ caml_call1
               (ga,0);
               /*<<camlinternalFormat.ml 768 50>>*/  /*<<camlinternalFormat.ml 768 50>>*/ caml_call1
               (af$8,0);
               /*<<camlinternalFormat.ml 768 61>>*/ return 0 /*<<camlinternalFormat.ml 768 65>>*/ };
           /*<<camlinternalFormat.ml 767 4>>*/ return [0,
                  function(param)
                   { /*<<camlinternalFormat.ml 767 28>>*/  /*<<camlinternalFormat.ml 767 28>>*/ caml_call1
                     (fa$8,0);
                     /*<<camlinternalFormat.ml 767 50>>*/  /*<<camlinternalFormat.ml 767 50>>*/ caml_call1
                     (ag,0);
                     /*<<camlinternalFormat.ml 767 61>>*/ return 0 /*<<camlinternalFormat.ml 767 65>>*/ },
                  _jt_,
                  _js_,
                  _jr_];
         case 10:
           /*<<camlinternalFormat.ml 737 4>>*/ var
            /*<<camlinternalFormat.ml 737 4>>*/ rest$9=param[1],
            /*<<camlinternalFormat.ml 737 25>>*/ match$10=
             /*<<camlinternalFormat.ml 737 25>>*/ fmtty_rel_det(rest$9),
            /*<<camlinternalFormat.ml 737 43>>*/ de$9=match$10[4],
            /*<<camlinternalFormat.ml 737 43>>*/ ed$9=match$10[3],
            /*<<camlinternalFormat.ml 737 43>>*/ af$9=match$10[2],
            /*<<camlinternalFormat.ml 737 43>>*/ fa$9=match$10[1],
            /*<<camlinternalFormat.ml 738 4>>*/ _ju_=
            function(param)
             { /*<<camlinternalFormat.ml 739 28>>*/  /*<<camlinternalFormat.ml 739 28>>*/ caml_call1
               (af$9,0);
               /*<<camlinternalFormat.ml 739 39>>*/ return 0 /*<<camlinternalFormat.ml 739 43>>*/ };
           /*<<camlinternalFormat.ml 738 4>>*/ return [0,
                  function(param)
                   { /*<<camlinternalFormat.ml 738 28>>*/  /*<<camlinternalFormat.ml 738 28>>*/ caml_call1
                     (fa$9,0);
                     /*<<camlinternalFormat.ml 738 39>>*/ return 0 /*<<camlinternalFormat.ml 738 43>>*/ },
                  _ju_,
                  ed$9,
                  de$9];
         case 11:
           /*<<camlinternalFormat.ml 732 4>>*/ var
            /*<<camlinternalFormat.ml 732 4>>*/ rest$10=param[1],
            /*<<camlinternalFormat.ml 732 25>>*/ match$11=
             /*<<camlinternalFormat.ml 732 25>>*/ fmtty_rel_det(rest$10),
            /*<<camlinternalFormat.ml 732 43>>*/ de$10=match$11[4],
            /*<<camlinternalFormat.ml 732 43>>*/ ed$10=match$11[3],
            /*<<camlinternalFormat.ml 732 43>>*/ af$10=match$11[2],
            /*<<camlinternalFormat.ml 732 43>>*/ fa$10=match$11[1],
            /*<<camlinternalFormat.ml 733 4>>*/ _jv_=
            function(param)
             { /*<<camlinternalFormat.ml 734 28>>*/  /*<<camlinternalFormat.ml 734 28>>*/ caml_call1
               (af$10,0);
               /*<<camlinternalFormat.ml 734 39>>*/ return 0 /*<<camlinternalFormat.ml 734 43>>*/ };
           /*<<camlinternalFormat.ml 733 4>>*/ return [0,
                  function(param)
                   { /*<<camlinternalFormat.ml 733 28>>*/  /*<<camlinternalFormat.ml 733 28>>*/ caml_call1
                     (fa$10,0);
                     /*<<camlinternalFormat.ml 733 39>>*/ return 0 /*<<camlinternalFormat.ml 733 43>>*/ },
                  _jv_,
                  ed$10,
                  de$10];
         case 12:
           /*<<camlinternalFormat.ml 742 4>>*/ var
            /*<<camlinternalFormat.ml 742 4>>*/ rest$11=param[1],
            /*<<camlinternalFormat.ml 742 25>>*/ match$12=
             /*<<camlinternalFormat.ml 742 25>>*/ fmtty_rel_det(rest$11),
            /*<<camlinternalFormat.ml 742 43>>*/ de$11=match$12[4],
            /*<<camlinternalFormat.ml 742 43>>*/ ed$11=match$12[3],
            /*<<camlinternalFormat.ml 742 43>>*/ af$11=match$12[2],
            /*<<camlinternalFormat.ml 742 43>>*/ fa$11=match$12[1],
            /*<<camlinternalFormat.ml 743 4>>*/ _jw_=
            function(param)
             { /*<<camlinternalFormat.ml 744 28>>*/  /*<<camlinternalFormat.ml 744 28>>*/ caml_call1
               (af$11,0);
               /*<<camlinternalFormat.ml 744 39>>*/ return 0 /*<<camlinternalFormat.ml 744 43>>*/ };
           /*<<camlinternalFormat.ml 743 4>>*/ return [0,
                  function(param)
                   { /*<<camlinternalFormat.ml 743 28>>*/  /*<<camlinternalFormat.ml 743 28>>*/ caml_call1
                     (fa$11,0);
                     /*<<camlinternalFormat.ml 743 39>>*/ return 0 /*<<camlinternalFormat.ml 743 43>>*/ },
                  _jw_,
                  ed$11,
                  de$11];
         case 13:
           /*<<camlinternalFormat.ml 747 4>>*/ var
            /*<<camlinternalFormat.ml 747 4>>*/ rest$12=param[1],
            /*<<camlinternalFormat.ml 747 25>>*/ match$13=
             /*<<camlinternalFormat.ml 747 25>>*/ fmtty_rel_det(rest$12),
            /*<<camlinternalFormat.ml 747 43>>*/ de$12=match$13[4],
            /*<<camlinternalFormat.ml 747 43>>*/ ed$12=match$13[3],
            /*<<camlinternalFormat.ml 747 43>>*/ af$12=match$13[2],
            /*<<camlinternalFormat.ml 747 43>>*/ fa$12=match$13[1],
            /*<<camlinternalFormat.ml 748 4>>*/ _jx_=
            function(param)
             { /*<<camlinternalFormat.ml 751 28>>*/  /*<<camlinternalFormat.ml 751 28>>*/ caml_call1
               (de$12,0);
               /*<<camlinternalFormat.ml 751 39>>*/ return 0 /*<<camlinternalFormat.ml 751 43>>*/ },
            /*<<camlinternalFormat.ml 748 4>>*/ _jy_=
            function(param)
             { /*<<camlinternalFormat.ml 750 28>>*/  /*<<camlinternalFormat.ml 750 28>>*/ caml_call1
               (ed$12,0);
               /*<<camlinternalFormat.ml 750 39>>*/ return 0 /*<<camlinternalFormat.ml 750 43>>*/ },
            /*<<camlinternalFormat.ml 748 4>>*/ _jz_=
            function(param)
             { /*<<camlinternalFormat.ml 749 28>>*/  /*<<camlinternalFormat.ml 749 28>>*/ caml_call1
               (af$12,0);
               /*<<camlinternalFormat.ml 749 39>>*/ return 0 /*<<camlinternalFormat.ml 749 43>>*/ };
           /*<<camlinternalFormat.ml 748 4>>*/ return [0,
                  function(param)
                   { /*<<camlinternalFormat.ml 748 28>>*/  /*<<camlinternalFormat.ml 748 28>>*/ caml_call1
                     (fa$12,0);
                     /*<<camlinternalFormat.ml 748 39>>*/ return 0 /*<<camlinternalFormat.ml 748 43>>*/ },
                  _jz_,
                  _jy_,
                  _jx_];
         default:
           /*<<camlinternalFormat.ml 753 4>>*/ var
            /*<<camlinternalFormat.ml 753 4>>*/ rest$13=param[1],
            /*<<camlinternalFormat.ml 753 25>>*/ match$14=
             /*<<camlinternalFormat.ml 753 25>>*/ fmtty_rel_det(rest$13),
            /*<<camlinternalFormat.ml 753 43>>*/ de$13=match$14[4],
            /*<<camlinternalFormat.ml 753 43>>*/ ed$13=match$14[3],
            /*<<camlinternalFormat.ml 753 43>>*/ af$13=match$14[2],
            /*<<camlinternalFormat.ml 753 43>>*/ fa$13=match$14[1],
            /*<<camlinternalFormat.ml 754 4>>*/ _jA_=
            function(param)
             { /*<<camlinternalFormat.ml 757 28>>*/  /*<<camlinternalFormat.ml 757 28>>*/ caml_call1
               (de$13,0);
               /*<<camlinternalFormat.ml 757 39>>*/ return 0 /*<<camlinternalFormat.ml 757 43>>*/ },
            /*<<camlinternalFormat.ml 754 4>>*/ _jB_=
            function(param)
             { /*<<camlinternalFormat.ml 756 28>>*/  /*<<camlinternalFormat.ml 756 28>>*/ caml_call1
               (ed$13,0);
               /*<<camlinternalFormat.ml 756 39>>*/ return 0 /*<<camlinternalFormat.ml 756 43>>*/ },
            /*<<camlinternalFormat.ml 754 4>>*/ _jC_=
            function(param)
             { /*<<camlinternalFormat.ml 755 28>>*/  /*<<camlinternalFormat.ml 755 28>>*/ caml_call1
               (af$13,0);
               /*<<camlinternalFormat.ml 755 39>>*/ return 0 /*<<camlinternalFormat.ml 755 43>>*/ };
           /*<<camlinternalFormat.ml 754 4>>*/ return [0,
                  function(param)
                   { /*<<camlinternalFormat.ml 754 28>>*/  /*<<camlinternalFormat.ml 754 28>>*/ caml_call1
                     (fa$13,0);
                     /*<<camlinternalFormat.ml 754 39>>*/ return 0 /*<<camlinternalFormat.ml 754 43>>*/ },
                  _jC_,
                  _jB_,
                  _jA_]} /*<<camlinternalFormat.ml 770 66>>*/ }
    function trans(ty1,match)
     { /*<<camlinternalFormat.ml 798 17>>*/ if(typeof ty1==="number")
       if(typeof match==="number")
         /*<<camlinternalFormat.ml 844 34>>*/ return 0;
       else
        switch(match[0])
         {case 10:var switch$0=0;break;
          case 11:var switch$0=1;break;
          case 12:var switch$0=2;break;
          case 13:var switch$0=3;break;
          case 14:var switch$0=4;break;
          case 8:var switch$0=5;break;
          case 9:var switch$0=6;break;
          default:
            /*<<camlinternalFormat.ml 845 35>>*/ throw [0,Assert_failure,_aa_]}
      else
        /*<<camlinternalFormat.ml 798 17>>*/ switch(ty1[0])
        {case 0:
          var _iY_=ty1[1];
          if(typeof match==="number")
           var switch$1=1;
          else
           switch(match[0])
            {case 0:
               /*<<camlinternalFormat.ml 799 36>>*/  /*<<camlinternalFormat.ml 799 36>>*/ var
               rest2=
                match[1];
               /*<<camlinternalFormat.ml 799 63>>*/ return [0,
                       /*<<camlinternalFormat.ml 799 44>>*/ trans(_iY_,rest2)];
             case 8:var switch$0=5,switch$1=0;break;
             case 9:var switch$0=6,switch$1=0;break;
             case 10:var switch$0=0,switch$1=0;break;
             case 11:var switch$0=1,switch$1=0;break;
             case 12:var switch$0=2,switch$1=0;break;
             case 13:var switch$0=3,switch$1=0;break;
             case 14:var switch$0=4,switch$1=0;break;
             default:var switch$1=1}
          if(switch$1)var switch$0=7;
          break;
         case 1:
          var _iZ_=ty1[1];
          if(typeof match==="number")
           var switch$2=1;
          else
           switch(match[0])
            {case 1:
               /*<<camlinternalFormat.ml 800 40>>*/  /*<<camlinternalFormat.ml 800 40>>*/ var
               rest2$0=
                match[1];
               /*<<camlinternalFormat.ml 800 69>>*/ return [1,
                       /*<<camlinternalFormat.ml 800 50>>*/ trans(_iZ_,rest2$0)];
             case 8:var switch$0=5,switch$2=0;break;
             case 9:var switch$0=6,switch$2=0;break;
             case 10:var switch$0=0,switch$2=0;break;
             case 11:var switch$0=1,switch$2=0;break;
             case 12:var switch$0=2,switch$2=0;break;
             case 13:var switch$0=3,switch$2=0;break;
             case 14:var switch$0=4,switch$2=0;break;
             default:var switch$2=1}
          if(switch$2)var switch$0=7;
          break;
         case 2:
          var _i0_=ty1[1];
          if(typeof match==="number")
           var switch$3=1;
          else
           switch(match[0])
            {case 2:
               /*<<camlinternalFormat.ml 802 34>>*/  /*<<camlinternalFormat.ml 802 34>>*/ var
               rest2$1=
                match[1];
               /*<<camlinternalFormat.ml 802 60>>*/ return [2,
                       /*<<camlinternalFormat.ml 802 41>>*/ trans(_i0_,rest2$1)];
             case 8:var switch$0=5,switch$3=0;break;
             case 9:var switch$0=6,switch$3=0;break;
             case 10:var switch$0=0,switch$3=0;break;
             case 11:var switch$0=1,switch$3=0;break;
             case 12:var switch$0=2,switch$3=0;break;
             case 13:var switch$0=3,switch$3=0;break;
             case 14:var switch$0=4,switch$3=0;break;
             default:var switch$3=1}
          if(switch$3)var switch$0=7;
          break;
         case 3:
          var _i1_=ty1[1];
          if(typeof match==="number")
           var switch$4=1;
          else
           switch(match[0])
            {case 3:
               /*<<camlinternalFormat.ml 803 38>>*/  /*<<camlinternalFormat.ml 803 38>>*/ var
               rest2$2=
                match[1];
               /*<<camlinternalFormat.ml 803 66>>*/ return [3,
                       /*<<camlinternalFormat.ml 803 47>>*/ trans(_i1_,rest2$2)];
             case 8:var switch$0=5,switch$4=0;break;
             case 9:var switch$0=6,switch$4=0;break;
             case 10:var switch$0=0,switch$4=0;break;
             case 11:var switch$0=1,switch$4=0;break;
             case 12:var switch$0=2,switch$4=0;break;
             case 13:var switch$0=3,switch$4=0;break;
             case 14:var switch$0=4,switch$4=0;break;
             default:var switch$4=1}
          if(switch$4)var switch$0=7;
          break;
         case 4:
          var _i2_=ty1[1];
          if(typeof match==="number")
           var switch$5=1;
          else
           switch(match[0])
            {case 4:
               /*<<camlinternalFormat.ml 805 46>>*/  /*<<camlinternalFormat.ml 805 46>>*/ var
               rest2$3=
                match[1];
               /*<<camlinternalFormat.ml 805 78>>*/ return [4,
                       /*<<camlinternalFormat.ml 805 59>>*/ trans(_i2_,rest2$3)];
             case 8:var switch$0=5,switch$5=0;break;
             case 9:var switch$0=6,switch$5=0;break;
             case 10:var switch$0=0,switch$5=0;break;
             case 11:var switch$0=1,switch$5=0;break;
             case 12:var switch$0=2,switch$5=0;break;
             case 13:var switch$0=3,switch$5=0;break;
             case 14:var switch$0=4,switch$5=0;break;
             default:var switch$5=1}
          if(switch$5)var switch$0=7;
          break;
         case 5:
          var _i3_=ty1[1];
          if(typeof match==="number")
           var switch$6=1;
          else
           switch(match[0])
            {case 5:
               /*<<camlinternalFormat.ml 804 38>>*/  /*<<camlinternalFormat.ml 804 38>>*/ var
               rest2$4=
                match[1];
               /*<<camlinternalFormat.ml 804 66>>*/ return [5,
                       /*<<camlinternalFormat.ml 804 47>>*/ trans(_i3_,rest2$4)];
             case 8:var switch$0=5,switch$6=0;break;
             case 9:var switch$0=6,switch$6=0;break;
             case 10:var switch$0=0,switch$6=0;break;
             case 11:var switch$0=1,switch$6=0;break;
             case 12:var switch$0=2,switch$6=0;break;
             case 13:var switch$0=3,switch$6=0;break;
             case 14:var switch$0=4,switch$6=0;break;
             default:var switch$6=1}
          if(switch$6)var switch$0=7;
          break;
         case 6:
          var _i4_=ty1[1];
          if(typeof match==="number")
           var switch$7=1;
          else
           switch(match[0])
            {case 6:
               /*<<camlinternalFormat.ml 806 38>>*/  /*<<camlinternalFormat.ml 806 38>>*/ var
               rest2$5=
                match[1];
               /*<<camlinternalFormat.ml 806 66>>*/ return [6,
                       /*<<camlinternalFormat.ml 806 47>>*/ trans(_i4_,rest2$5)];
             case 8:var switch$0=5,switch$7=0;break;
             case 9:var switch$0=6,switch$7=0;break;
             case 10:var switch$0=0,switch$7=0;break;
             case 11:var switch$0=1,switch$7=0;break;
             case 12:var switch$0=2,switch$7=0;break;
             case 13:var switch$0=3,switch$7=0;break;
             case 14:var switch$0=4,switch$7=0;break;
             default:var switch$7=1}
          if(switch$7)var switch$0=7;
          break;
         case 7:
          var _i5_=ty1[1];
          if(typeof match==="number")
           var switch$8=1;
          else
           switch(match[0])
            {case 7:
               /*<<camlinternalFormat.ml 801 36>>*/  /*<<camlinternalFormat.ml 801 36>>*/ var
               rest2$6=
                match[1];
               /*<<camlinternalFormat.ml 801 63>>*/ return [7,
                       /*<<camlinternalFormat.ml 801 44>>*/ trans(_i5_,rest2$6)];
             case 8:var switch$0=5,switch$8=0;break;
             case 9:var switch$0=6,switch$8=0;break;
             case 10:var switch$0=0,switch$8=0;break;
             case 11:var switch$0=1,switch$8=0;break;
             case 12:var switch$0=2,switch$8=0;break;
             case 13:var switch$0=3,switch$8=0;break;
             case 14:var switch$0=4,switch$8=0;break;
             default:var switch$8=1}
          if(switch$8)var switch$0=7;
          break;
         case 8:
          var _i6_=ty1[2],_i7_=ty1[1];
          if(typeof match==="number")
           var switch$9=1;
          else
           switch(match[0])
            {case 8:
               /*<<camlinternalFormat.ml 830 34>>*/ var
               rest2$7=match[2],
               ty2=match[1],
                /*<<camlinternalFormat.ml 830 34>>*/ _i8_=
                 /*<<camlinternalFormat.ml 830 34>>*/ trans(_i6_,rest2$7);
               /*<<camlinternalFormat.ml 830 32>>*/ return [8,
                       /*<<camlinternalFormat.ml 830 19>>*/ trans(_i7_,ty2),
                      _i8_];
             case 10:var switch$0=0,switch$9=0;break;
             case 11:var switch$0=1,switch$9=0;break;
             case 12:var switch$0=2,switch$9=0;break;
             case 13:var switch$0=3,switch$9=0;break;
             case 14:var switch$0=4,switch$9=0;break;
             default:var switch$9=1}
          if(switch$9)throw [0,Assert_failure,_aj_];
          break;
         case 9:
          var _i9_=ty1[3],_i__=ty1[2],_i$_=ty1[1];
          if(typeof match==="number")
           var switch$10=1;
          else
           switch(match[0])
            {case 8:var switch$0=5,switch$10=0;break;
             case 9:
               /*<<camlinternalFormat.ml 836 13>>*/ var
               rest2$8=match[3],
               ty22=match[2],
               ty21=match[1],
                /*<<camlinternalFormat.ml 836 13>>*/ ty=
                 /*<<camlinternalFormat.ml 836 13>>*/ trans
                 ( /*<<camlinternalFormat.ml 836 19>>*/ symm(_i__),ty21),
                /*<<camlinternalFormat.ml 837 23>>*/ match$0=
                 /*<<camlinternalFormat.ml 837 23>>*/ fmtty_rel_det(ty),
                /*<<camlinternalFormat.ml 837 39>>*/ f4=match$0[4],
                /*<<camlinternalFormat.ml 837 39>>*/ f2=match$0[2];
               /*<<camlinternalFormat.ml 838 15>>*/  /*<<camlinternalFormat.ml 838 15>>*/ caml_call1
               (f2,0);
               /*<<camlinternalFormat.ml 839 15>>*/  /*<<camlinternalFormat.ml 839 15>>*/ caml_call1
               (f4,0);
               /*<<camlinternalFormat.ml 840 50>>*/ return [9,
                      _i$_,
                      ty22,
                       /*<<camlinternalFormat.ml 840 33>>*/ trans(_i9_,rest2$8)];
             case 10:var switch$0=0,switch$10=0;break;
             case 11:var switch$0=1,switch$10=0;break;
             case 12:var switch$0=2,switch$10=0;break;
             case 13:var switch$0=3,switch$10=0;break;
             case 14:var switch$0=4,switch$10=0;break;
             default:var switch$10=1}
          if(switch$10)throw [0,Assert_failure,_ak_];
          break;
         case 10:
          var _ja_=ty1[1];
          if(typeof match!=="number"&&10===match[0])
           { /*<<camlinternalFormat.ml 808 38>>*/  /*<<camlinternalFormat.ml 808 38>>*/ var
             rest2$9=
              match[1];
             /*<<camlinternalFormat.ml 808 66>>*/ return [10,
                     /*<<camlinternalFormat.ml 808 47>>*/ trans(_ja_,rest2$9)]}
           /*<<camlinternalFormat.ml 809 33>>*/ throw [0,Assert_failure,_al_];
         case 11:
          var _jb_=ty1[1];
          if(typeof match==="number")
           var switch$11=1;
          else
           switch(match[0])
            {case 10:var switch$0=0,switch$11=0;break;
             case 11:
               /*<<camlinternalFormat.ml 812 38>>*/  /*<<camlinternalFormat.ml 812 38>>*/ var
               rest2$10=
                match[1];
               /*<<camlinternalFormat.ml 812 66>>*/ return [11,
                       /*<<camlinternalFormat.ml 812 47>>*/ trans(_jb_,rest2$10)];
             default:var switch$11=1}
          if(switch$11)throw [0,Assert_failure,_am_];
          break;
         case 12:
          var _jc_=ty1[1];
          if(typeof match==="number")
           var switch$12=1;
          else
           switch(match[0])
            {case 10:var switch$0=0,switch$12=0;break;
             case 11:var switch$0=1,switch$12=0;break;
             case 12:
               /*<<camlinternalFormat.ml 816 34>>*/  /*<<camlinternalFormat.ml 816 34>>*/ var
               rest2$11=
                match[1];
               /*<<camlinternalFormat.ml 816 60>>*/ return [12,
                       /*<<camlinternalFormat.ml 816 41>>*/ trans(_jc_,rest2$11)];
             default:var switch$12=1}
          if(switch$12)throw [0,Assert_failure,_an_];
          break;
         case 13:
          var _jd_=ty1[1];
          if(typeof match==="number")
           var switch$13=1;
          else
           switch(match[0])
            {case 10:var switch$0=0,switch$13=0;break;
             case 11:var switch$0=1,switch$13=0;break;
             case 12:var switch$0=2,switch$13=0;break;
             case 13:
               /*<<camlinternalFormat.ml 820 40>>*/  /*<<camlinternalFormat.ml 820 40>>*/ var
               rest2$12=
                match[1];
               /*<<camlinternalFormat.ml 820 69>>*/ return [13,
                       /*<<camlinternalFormat.ml 820 50>>*/ trans(_jd_,rest2$12)];
             default:var switch$13=1}
          if(switch$13)throw [0,Assert_failure,_ao_];
          break;
         default:
          var _je_=ty1[1];
          if(typeof match==="number")
           var switch$14=1;
          else
           switch(match[0])
            {case 10:var switch$0=0,switch$14=0;break;
             case 11:var switch$0=1,switch$14=0;break;
             case 12:var switch$0=2,switch$14=0;break;
             case 13:var switch$0=3,switch$14=0;break;
             case 14:
               /*<<camlinternalFormat.ml 825 4>>*/  /*<<camlinternalFormat.ml 825 4>>*/ var
               rest2$13=
                match[1];
               /*<<camlinternalFormat.ml 825 41>>*/ return [14,
                       /*<<camlinternalFormat.ml 825 22>>*/ trans(_je_,rest2$13)];
             default:var switch$14=1}
          if(switch$14)throw [0,Assert_failure,_ap_]}
       /*<<camlinternalFormatBasics.ml 521 8>>*/ switch(switch$0)
       {case 0:
          /*<<camlinternalFormat.ml 810 33>>*/ throw [0,Assert_failure,_ad_];
        case 1:
          /*<<camlinternalFormat.ml 814 33>>*/ throw [0,Assert_failure,_ae_];
        case 2:
          /*<<camlinternalFormat.ml 818 31>>*/ throw [0,Assert_failure,_af_];
        case 3:
          /*<<camlinternalFormat.ml 822 34>>*/ throw [0,Assert_failure,_ag_];
        case 4:
          /*<<camlinternalFormat.ml 827 42>>*/ throw [0,Assert_failure,_ah_];
        case 5:
          /*<<camlinternalFormat.ml 832 38>>*/ throw [0,Assert_failure,_ab_];
        case 6:
          /*<<camlinternalFormat.ml 842 40>>*/ throw [0,Assert_failure,_ac_];
        default:
          /*<<camlinternalFormat.ml 846 35>>*/ throw [0,Assert_failure,_ai_]} /*<<camlinternalFormat.ml 846 35>>*/ }
    var Type_mismatch=[248,_aq_,caml_fresh_oo_id(0)];
    function type_padding(pad,match)
     { /*<<camlinternalFormat.ml 971 17>>*/ if(typeof pad==="number")
        /*<<camlinternalFormat.ml 972 21>>*/ return [0,0,match];
      else
       { /*<<camlinternalFormat.ml 971 17>>*/ if(0===pad[0])
         {var w=pad[2],padty=pad[1];
           /*<<camlinternalFormat.ml 973 33>>*/ return [0,[0,padty,w],match]}
        if(typeof match!=="number"&&2===match[0])
         {var rest=match[1],padty$0=pad[1];
           /*<<camlinternalFormat.ml 974 38>>*/ return [0,[1,padty$0],rest]}
         /*<<camlinternalFormat.ml 975 28>>*/ throw Type_mismatch} /*<<camlinternalFormat.ml 975 28>>*/ }
    function type_padprec(pad,prec,fmtty)
     { /*<<camlinternalFormat.ml 983 34>>*/  /*<<camlinternalFormat.ml 983 34>>*/ var
       match=
         /*<<camlinternalFormat.ml 983 34>>*/ type_padding(pad,fmtty);
       /*<<camlinternalFormat.ml 983 56>>*/ if(typeof prec==="number")
       {if(0===prec)
         {var rest=match[2],pad$0=match[1];
           /*<<camlinternalFormat.ml 985 4>>*/ return [0,pad$0,0,rest]}
        var _iX_=match[2];
        if(typeof _iX_!=="number"&&2===_iX_[0])
         {var rest$0=_iX_[1],pad$1=match[1];
           /*<<camlinternalFormat.ml 989 4>>*/ return [0,pad$1,1,rest$0]}
         /*<<camlinternalFormat.ml 990 54>>*/ throw Type_mismatch}
       /*<<camlinternalFormat.ml 983 34>>*/ var
       rest$1=match[2],
       pad$2=match[1],
       p=prec[1];
       /*<<camlinternalFormat.ml 987 4>>*/ return [0,pad$2,[0,p],rest$1] /*<<camlinternalFormat.ml 990 54>>*/ }
    function type_format_gen(fmt,fmtty)
     { /*<<camlinternalFormat.ml 1012 19>>*/ if(typeof fmt==="number")
        /*<<camlinternalFormat.ml 1123 33>>*/ return [0,0,fmtty];
      else
        /*<<camlinternalFormat.ml 1012 19>>*/ switch(fmt[0])
        {case 0:
          if(typeof fmtty!=="number"&&0===fmtty[0])
           { /*<<camlinternalFormat.ml 1014 39>>*/ var
             fmtty_rest=fmtty[1],
             fmt_rest=fmt[1],
              /*<<camlinternalFormat.ml 1014 39>>*/ match=
               /*<<camlinternalFormat.ml 1014 39>>*/ type_format_gen
               (fmt_rest,fmtty_rest),
              /*<<camlinternalFormat.ml 1014 74>>*/ fmtty$0=match[2],
              /*<<camlinternalFormat.ml 1014 74>>*/ fmt$0=match[1];
             /*<<camlinternalFormat.ml 1015 4>>*/ return [0,[0,fmt$0],fmtty$0]}
          break;
         case 1:
          if(typeof fmtty!=="number"&&0===fmtty[0])
           { /*<<camlinternalFormat.ml 1017 39>>*/ var
             fmtty_rest$0=fmtty[1],
             fmt_rest$0=fmt[1],
              /*<<camlinternalFormat.ml 1017 39>>*/ match$0=
               /*<<camlinternalFormat.ml 1017 39>>*/ type_format_gen
               (fmt_rest$0,fmtty_rest$0),
              /*<<camlinternalFormat.ml 1017 74>>*/ fmtty$1=match$0[2],
              /*<<camlinternalFormat.ml 1017 74>>*/ fmt$1=match$0[1];
             /*<<camlinternalFormat.ml 1018 4>>*/ return [0,[1,fmt$1],fmtty$1]}
          break;
         case 2:
           /*<<camlinternalFormat.ml 1020 10>>*/ var
           fmt_rest$1=fmt[2],
           pad=fmt[1],
            /*<<camlinternalFormat.ml 1020 10>>*/ _iv_=
             /*<<camlinternalFormat.ml 1020 10>>*/ type_padding(pad,fmtty),
            /*<<camlinternalFormat.ml 1020 32>>*/ _iw_=_iv_[2],
            /*<<camlinternalFormat.ml 1020 32>>*/ _ix_=_iv_[1];
           /*<<camlinternalFormat.ml 1020 32>>*/ if
           (typeof _iw_!=="number"&&1===_iw_[0])
           { /*<<camlinternalFormat.ml 1022 6>>*/ var
              /*<<camlinternalFormat.ml 1022 6>>*/ fmtty_rest$1=_iw_[1],
              /*<<camlinternalFormat.ml 1022 41>>*/ match$1=
               /*<<camlinternalFormat.ml 1022 41>>*/ type_format_gen
               (fmt_rest$1,fmtty_rest$1),
              /*<<camlinternalFormat.ml 1022 76>>*/ fmtty$2=match$1[2],
              /*<<camlinternalFormat.ml 1022 76>>*/ fmt$2=match$1[1];
             /*<<camlinternalFormat.ml 1023 6>>*/ return [0,
                    [2,_ix_,fmt$2],
                    fmtty$2]}
           /*<<camlinternalFormat.ml 1024 53>>*/ throw Type_mismatch;
         case 3:
           /*<<camlinternalFormat.ml 1027 10>>*/ var
           fmt_rest$2=fmt[2],
           pad$0=fmt[1],
            /*<<camlinternalFormat.ml 1027 10>>*/ _iy_=
             /*<<camlinternalFormat.ml 1027 10>>*/ type_padding(pad$0,fmtty),
            /*<<camlinternalFormat.ml 1027 32>>*/ _iz_=_iy_[2],
            /*<<camlinternalFormat.ml 1027 32>>*/ _iA_=_iy_[1];
           /*<<camlinternalFormat.ml 1027 32>>*/ if
           (typeof _iz_!=="number"&&1===_iz_[0])
           { /*<<camlinternalFormat.ml 1029 6>>*/ var
              /*<<camlinternalFormat.ml 1029 6>>*/ fmtty_rest$2=_iz_[1],
              /*<<camlinternalFormat.ml 1029 41>>*/ match$2=
               /*<<camlinternalFormat.ml 1029 41>>*/ type_format_gen
               (fmt_rest$2,fmtty_rest$2),
              /*<<camlinternalFormat.ml 1029 76>>*/ fmtty$3=match$2[2],
              /*<<camlinternalFormat.ml 1029 76>>*/ fmt$3=match$2[1];
             /*<<camlinternalFormat.ml 1030 6>>*/ return [0,
                    [3,_iA_,fmt$3],
                    fmtty$3]}
           /*<<camlinternalFormat.ml 1031 53>>*/ throw Type_mismatch;
         case 4:
           /*<<camlinternalFormat.ml 1034 10>>*/ var
           fmt_rest$3=fmt[4],
           prec=fmt[3],
           pad$1=fmt[2],
           iconv=fmt[1],
            /*<<camlinternalFormat.ml 1034 10>>*/ _iB_=
             /*<<camlinternalFormat.ml 1034 10>>*/ type_padprec
             (pad$1,prec,fmtty),
            /*<<camlinternalFormat.ml 1034 37>>*/ _iC_=_iB_[3],
            /*<<camlinternalFormat.ml 1034 37>>*/ _iD_=_iB_[2],
            /*<<camlinternalFormat.ml 1034 37>>*/ _iE_=_iB_[1];
           /*<<camlinternalFormat.ml 1034 37>>*/ if
           (typeof _iC_!=="number"&&2===_iC_[0])
           { /*<<camlinternalFormat.ml 1036 6>>*/ var
              /*<<camlinternalFormat.ml 1036 6>>*/ fmtty_rest$3=_iC_[1],
              /*<<camlinternalFormat.ml 1036 41>>*/ match$3=
               /*<<camlinternalFormat.ml 1036 41>>*/ type_format_gen
               (fmt_rest$3,fmtty_rest$3),
              /*<<camlinternalFormat.ml 1036 76>>*/ fmtty$4=match$3[2],
              /*<<camlinternalFormat.ml 1036 76>>*/ fmt$4=match$3[1];
             /*<<camlinternalFormat.ml 1037 6>>*/ return [0,
                    [4,iconv,_iE_,_iD_,fmt$4],
                    fmtty$4]}
           /*<<camlinternalFormat.ml 1038 56>>*/ throw Type_mismatch;
         case 5:
           /*<<camlinternalFormat.ml 1041 10>>*/ var
           fmt_rest$4=fmt[4],
           prec$0=fmt[3],
           pad$2=fmt[2],
           iconv$0=fmt[1],
            /*<<camlinternalFormat.ml 1041 10>>*/ _iF_=
             /*<<camlinternalFormat.ml 1041 10>>*/ type_padprec
             (pad$2,prec$0,fmtty),
            /*<<camlinternalFormat.ml 1041 37>>*/ _iG_=_iF_[3],
            /*<<camlinternalFormat.ml 1041 37>>*/ _iH_=_iF_[2],
            /*<<camlinternalFormat.ml 1041 37>>*/ _iI_=_iF_[1];
           /*<<camlinternalFormat.ml 1041 37>>*/ if
           (typeof _iG_!=="number"&&3===_iG_[0])
           { /*<<camlinternalFormat.ml 1043 6>>*/ var
              /*<<camlinternalFormat.ml 1043 6>>*/ fmtty_rest$4=_iG_[1],
              /*<<camlinternalFormat.ml 1043 41>>*/ match$4=
               /*<<camlinternalFormat.ml 1043 41>>*/ type_format_gen
               (fmt_rest$4,fmtty_rest$4),
              /*<<camlinternalFormat.ml 1043 76>>*/ fmtty$5=match$4[2],
              /*<<camlinternalFormat.ml 1043 76>>*/ fmt$5=match$4[1];
             /*<<camlinternalFormat.ml 1044 6>>*/ return [0,
                    [5,iconv$0,_iI_,_iH_,fmt$5],
                    fmtty$5]}
           /*<<camlinternalFormat.ml 1045 56>>*/ throw Type_mismatch;
         case 6:
           /*<<camlinternalFormat.ml 1048 10>>*/ var
           fmt_rest$5=fmt[4],
           prec$1=fmt[3],
           pad$3=fmt[2],
           iconv$1=fmt[1],
            /*<<camlinternalFormat.ml 1048 10>>*/ _iJ_=
             /*<<camlinternalFormat.ml 1048 10>>*/ type_padprec
             (pad$3,prec$1,fmtty),
            /*<<camlinternalFormat.ml 1048 37>>*/ _iK_=_iJ_[3],
            /*<<camlinternalFormat.ml 1048 37>>*/ _iL_=_iJ_[2],
            /*<<camlinternalFormat.ml 1048 37>>*/ _iM_=_iJ_[1];
           /*<<camlinternalFormat.ml 1048 37>>*/ if
           (typeof _iK_!=="number"&&4===_iK_[0])
           { /*<<camlinternalFormat.ml 1050 6>>*/ var
              /*<<camlinternalFormat.ml 1050 6>>*/ fmtty_rest$5=_iK_[1],
              /*<<camlinternalFormat.ml 1050 41>>*/ match$5=
               /*<<camlinternalFormat.ml 1050 41>>*/ type_format_gen
               (fmt_rest$5,fmtty_rest$5),
              /*<<camlinternalFormat.ml 1050 76>>*/ fmtty$6=match$5[2],
              /*<<camlinternalFormat.ml 1050 76>>*/ fmt$6=match$5[1];
             /*<<camlinternalFormat.ml 1051 6>>*/ return [0,
                    [6,iconv$1,_iM_,_iL_,fmt$6],
                    fmtty$6]}
           /*<<camlinternalFormat.ml 1052 56>>*/ throw Type_mismatch;
         case 7:
           /*<<camlinternalFormat.ml 1055 10>>*/ var
           fmt_rest$6=fmt[4],
           prec$2=fmt[3],
           pad$4=fmt[2],
           iconv$2=fmt[1],
            /*<<camlinternalFormat.ml 1055 10>>*/ _iN_=
             /*<<camlinternalFormat.ml 1055 10>>*/ type_padprec
             (pad$4,prec$2,fmtty),
            /*<<camlinternalFormat.ml 1055 37>>*/ _iO_=_iN_[3],
            /*<<camlinternalFormat.ml 1055 37>>*/ _iP_=_iN_[2],
            /*<<camlinternalFormat.ml 1055 37>>*/ _iQ_=_iN_[1];
           /*<<camlinternalFormat.ml 1055 37>>*/ if
           (typeof _iO_!=="number"&&5===_iO_[0])
           { /*<<camlinternalFormat.ml 1057 6>>*/ var
              /*<<camlinternalFormat.ml 1057 6>>*/ fmtty_rest$6=_iO_[1],
              /*<<camlinternalFormat.ml 1057 41>>*/ match$6=
               /*<<camlinternalFormat.ml 1057 41>>*/ type_format_gen
               (fmt_rest$6,fmtty_rest$6),
              /*<<camlinternalFormat.ml 1057 76>>*/ fmtty$7=match$6[2],
              /*<<camlinternalFormat.ml 1057 76>>*/ fmt$7=match$6[1];
             /*<<camlinternalFormat.ml 1058 6>>*/ return [0,
                    [7,iconv$2,_iQ_,_iP_,fmt$7],
                    fmtty$7]}
           /*<<camlinternalFormat.ml 1059 56>>*/ throw Type_mismatch;
         case 8:
           /*<<camlinternalFormat.ml 1062 10>>*/ var
           fmt_rest$7=fmt[4],
           prec$3=fmt[3],
           pad$5=fmt[2],
           fconv=fmt[1],
            /*<<camlinternalFormat.ml 1062 10>>*/ _iR_=
             /*<<camlinternalFormat.ml 1062 10>>*/ type_padprec
             (pad$5,prec$3,fmtty),
            /*<<camlinternalFormat.ml 1062 37>>*/ _iS_=_iR_[3],
            /*<<camlinternalFormat.ml 1062 37>>*/ _iT_=_iR_[2],
            /*<<camlinternalFormat.ml 1062 37>>*/ _iU_=_iR_[1];
           /*<<camlinternalFormat.ml 1062 37>>*/ if
           (typeof _iS_!=="number"&&6===_iS_[0])
           { /*<<camlinternalFormat.ml 1064 6>>*/ var
              /*<<camlinternalFormat.ml 1064 6>>*/ fmtty_rest$7=_iS_[1],
              /*<<camlinternalFormat.ml 1064 41>>*/ match$7=
               /*<<camlinternalFormat.ml 1064 41>>*/ type_format_gen
               (fmt_rest$7,fmtty_rest$7),
              /*<<camlinternalFormat.ml 1064 76>>*/ fmtty$8=match$7[2],
              /*<<camlinternalFormat.ml 1064 76>>*/ fmt$8=match$7[1];
             /*<<camlinternalFormat.ml 1065 6>>*/ return [0,
                    [8,fconv,_iU_,_iT_,fmt$8],
                    fmtty$8]}
           /*<<camlinternalFormat.ml 1066 56>>*/ throw Type_mismatch;
         case 9:
          if(typeof fmtty!=="number"&&7===fmtty[0])
           { /*<<camlinternalFormat.ml 1069 39>>*/ var
             fmtty_rest$8=fmtty[1],
             fmt_rest$8=fmt[1],
              /*<<camlinternalFormat.ml 1069 39>>*/ match$8=
               /*<<camlinternalFormat.ml 1069 39>>*/ type_format_gen
               (fmt_rest$8,fmtty_rest$8),
              /*<<camlinternalFormat.ml 1069 74>>*/ fmtty$9=match$8[2],
              /*<<camlinternalFormat.ml 1069 74>>*/ fmt$9=match$8[1];
             /*<<camlinternalFormat.ml 1070 4>>*/ return [0,[9,fmt$9],fmtty$9]}
          break;
         case 10:
           /*<<camlinternalFormat.ml 1072 39>>*/ var
           fmt_rest$9=fmt[1],
            /*<<camlinternalFormat.ml 1072 39>>*/ match$9=
             /*<<camlinternalFormat.ml 1072 39>>*/ type_format_gen
             (fmt_rest$9,fmtty),
            /*<<camlinternalFormat.ml 1072 74>>*/ fmtty$10=match$9[2],
            /*<<camlinternalFormat.ml 1072 74>>*/ fmt$10=match$9[1];
           /*<<camlinternalFormat.ml 1073 4>>*/ return [0,
                  [10,fmt$10],
                  fmtty$10];
         case 11:
           /*<<camlinternalFormat.ml 1076 39>>*/ var
           fmt_rest$10=fmt[2],
           str=fmt[1],
            /*<<camlinternalFormat.ml 1076 39>>*/ match$10=
             /*<<camlinternalFormat.ml 1076 39>>*/ type_format_gen
             (fmt_rest$10,fmtty),
            /*<<camlinternalFormat.ml 1076 74>>*/ fmtty$11=match$10[2],
            /*<<camlinternalFormat.ml 1076 74>>*/ fmt$11=match$10[1];
           /*<<camlinternalFormat.ml 1077 4>>*/ return [0,
                  [11,str,fmt$11],
                  fmtty$11];
         case 12:
           /*<<camlinternalFormat.ml 1079 39>>*/ var
           fmt_rest$11=fmt[2],
           chr=fmt[1],
            /*<<camlinternalFormat.ml 1079 39>>*/ match$11=
             /*<<camlinternalFormat.ml 1079 39>>*/ type_format_gen
             (fmt_rest$11,fmtty),
            /*<<camlinternalFormat.ml 1079 74>>*/ fmtty$12=match$11[2],
            /*<<camlinternalFormat.ml 1079 74>>*/ fmt$12=match$11[1];
           /*<<camlinternalFormat.ml 1080 4>>*/ return [0,
                  [12,chr,fmt$12],
                  fmtty$12];
         case 13:
          if(typeof fmtty!=="number"&&8===fmtty[0])
           {var
             fmtty_rest$9=fmtty[2],
             sub_fmtty=fmtty[1],
             fmt_rest$12=fmt[3],
             sub_fmtty$0=fmt[2],
             pad_opt=fmt[1];
             /*<<camlinternalFormat.ml 1084 50>>*/ if
             ( /*<<camlinternalFormat.ml 1084 7>>*/ caml_notequal
               ([0,sub_fmtty$0],[0,sub_fmtty]))
             throw Type_mismatch;
             /*<<camlinternalFormat.ml 1085 39>>*/ var
              /*<<camlinternalFormat.ml 1085 39>>*/ match$12=
               /*<<camlinternalFormat.ml 1085 39>>*/ type_format_gen
               (fmt_rest$12,fmtty_rest$9),
              /*<<camlinternalFormat.ml 1085 74>>*/ fmtty$13=match$12[2],
              /*<<camlinternalFormat.ml 1085 74>>*/ fmt$13=match$12[1];
             /*<<camlinternalFormat.ml 1086 4>>*/ return [0,
                    [13,pad_opt,sub_fmtty,fmt$13],
                    fmtty$13]}
          break;
         case 14:
          if(typeof fmtty!=="number"&&9===fmtty[0])
           { /*<<camlinternalFormat.ml 1089 74>>*/ var
             fmtty_rest$10=fmtty[3],
             sub_fmtty1=fmtty[1],
             fmt_rest$13=fmt[3],
             sub_fmtty$1=fmt[2],
             pad_opt$0=fmt[1],
              /*<<camlinternalFormat.ml 1089 74>>*/ _iV_=
              [0, /*<<camlinternalFormat.ml 1089 52>>*/ erase_rel(sub_fmtty1)];
             /*<<camlinternalFormat.ml 1089 74>>*/ if
             ( /*<<camlinternalFormat.ml 1089 7>>*/ caml_notequal
               ([0,
                  /*<<camlinternalFormat.ml 1089 17>>*/ erase_rel(sub_fmtty$1)],
                _iV_))
             throw Type_mismatch;
             /*<<camlinternalFormat.ml 1089 74>>*/ var
              /*<<camlinternalFormat.ml 1092 6>>*/ match$13=
               /*<<camlinternalFormat.ml 1092 6>>*/ type_format_gen
               (fmt_rest$13,
                 /*<<camlinternalFormat.ml 1092 31>>*/ erase_rel
                 (fmtty_rest$10)),
              /*<<camlinternalFormat.ml 1092 53>>*/ fmtty$14=match$13[2],
              /*<<camlinternalFormat.ml 1092 53>>*/ fmt$14=match$13[1];
             /*<<camlinternalFormat.ml 1094 4>>*/ return [0,
                    [14,pad_opt$0,sub_fmtty1,fmt$14],
                    fmtty$14]}
          break;
         case 15:
          if(typeof fmtty!=="number"&&10===fmtty[0])
           { /*<<camlinternalFormat.ml 1097 39>>*/ var
             fmtty_rest$11=fmtty[1],
             fmt_rest$14=fmt[1],
              /*<<camlinternalFormat.ml 1097 39>>*/ match$14=
               /*<<camlinternalFormat.ml 1097 39>>*/ type_format_gen
               (fmt_rest$14,fmtty_rest$11),
              /*<<camlinternalFormat.ml 1097 74>>*/ fmtty$15=match$14[2],
              /*<<camlinternalFormat.ml 1097 74>>*/ fmt$15=match$14[1];
             /*<<camlinternalFormat.ml 1098 4>>*/ return [0,
                    [15,fmt$15],
                    fmtty$15]}
          break;
         case 16:
          if(typeof fmtty!=="number"&&11===fmtty[0])
           { /*<<camlinternalFormat.ml 1100 39>>*/ var
             fmtty_rest$12=fmtty[1],
             fmt_rest$15=fmt[1],
              /*<<camlinternalFormat.ml 1100 39>>*/ match$15=
               /*<<camlinternalFormat.ml 1100 39>>*/ type_format_gen
               (fmt_rest$15,fmtty_rest$12),
              /*<<camlinternalFormat.ml 1100 74>>*/ fmtty$16=match$15[2],
              /*<<camlinternalFormat.ml 1100 74>>*/ fmt$16=match$15[1];
             /*<<camlinternalFormat.ml 1101 4>>*/ return [0,
                    [16,fmt$16],
                    fmtty$16]}
          break;
         case 17:
           /*<<camlinternalFormat.ml 1105 39>>*/ var
           fmt_rest$16=fmt[2],
           formatting_lit=fmt[1],
            /*<<camlinternalFormat.ml 1105 39>>*/ match$16=
             /*<<camlinternalFormat.ml 1105 39>>*/ type_format_gen
             (fmt_rest$16,fmtty),
            /*<<camlinternalFormat.ml 1105 74>>*/ fmtty$17=match$16[2],
            /*<<camlinternalFormat.ml 1105 74>>*/ fmt$17=match$16[1];
           /*<<camlinternalFormat.ml 1106 4>>*/ return [0,
                  [17,formatting_lit,fmt$17],
                  fmtty$17];
         case 18:
          var fmt_rest$17=fmt[2],formatting_gen=fmt[1];
           /*<<camlinternalFormat.ml 1132 34>>*/ if(0===formatting_gen[0])
           { /*<<camlinternalFormat.ml 1134 39>>*/ var
             match$20=formatting_gen[1],
             str$0=match$20[2],
             fmt1=match$20[1],
              /*<<camlinternalFormat.ml 1134 39>>*/ match$21=
               /*<<camlinternalFormat.ml 1134 39>>*/ type_format_gen
               (fmt1,fmtty),
              /*<<camlinternalFormat.ml 1134 66>>*/ fmtty2=match$21[2],
              /*<<camlinternalFormat.ml 1134 66>>*/ fmt2=match$21[1],
              /*<<camlinternalFormat.ml 1135 39>>*/ match$22=
               /*<<camlinternalFormat.ml 1135 39>>*/ type_format_gen
               (fmt_rest$17,fmtty2),
              /*<<camlinternalFormat.ml 1135 66>>*/ fmtty3=match$22[2],
              /*<<camlinternalFormat.ml 1135 66>>*/ fmt3=match$22[1];
             /*<<camlinternalFormat.ml 1136 4>>*/ return [0,
                    [18,[0,[0,fmt2,str$0]],fmt3],
                    fmtty3]}
           /*<<camlinternalFormat.ml 1138 39>>*/ var
           match$23=formatting_gen[1],
           str$1=match$23[2],
           fmt1$0=match$23[1],
            /*<<camlinternalFormat.ml 1138 39>>*/ match$24=
             /*<<camlinternalFormat.ml 1138 39>>*/ type_format_gen
             (fmt1$0,fmtty),
            /*<<camlinternalFormat.ml 1138 66>>*/ fmtty2$0=match$24[2],
            /*<<camlinternalFormat.ml 1138 66>>*/ fmt2$0=match$24[1],
            /*<<camlinternalFormat.ml 1139 39>>*/ match$25=
             /*<<camlinternalFormat.ml 1139 39>>*/ type_format_gen
             (fmt_rest$17,fmtty2$0),
            /*<<camlinternalFormat.ml 1139 66>>*/ fmtty3$0=match$25[2],
            /*<<camlinternalFormat.ml 1139 66>>*/ fmt3$0=match$25[1];
           /*<<camlinternalFormat.ml 1140 4>>*/ return [0,
                  [18,[1,[0,fmt2$0,str$1]],fmt3$0],
                  fmtty3$0];
         case 19:
          if(typeof fmtty!=="number"&&13===fmtty[0])
           { /*<<camlinternalFormat.ml 1112 39>>*/ var
             fmtty_rest$13=fmtty[1],
             fmt_rest$18=fmt[1],
              /*<<camlinternalFormat.ml 1112 39>>*/ match$17=
               /*<<camlinternalFormat.ml 1112 39>>*/ type_format_gen
               (fmt_rest$18,fmtty_rest$13),
              /*<<camlinternalFormat.ml 1112 74>>*/ fmtty$18=match$17[2],
              /*<<camlinternalFormat.ml 1112 74>>*/ fmt$18=match$17[1];
             /*<<camlinternalFormat.ml 1113 4>>*/ return [0,
                    [19,fmt$18],
                    fmtty$18]}
          break;
         case 20:
          if(typeof fmtty!=="number"&&1===fmtty[0])
           { /*<<camlinternalFormat.ml 1115 39>>*/ var
             fmtty_rest$14=fmtty[1],
             fmt_rest$19=fmt[3],
             char_set=fmt[2],
             width_opt=fmt[1],
              /*<<camlinternalFormat.ml 1115 39>>*/ match$18=
               /*<<camlinternalFormat.ml 1115 39>>*/ type_format_gen
               (fmt_rest$19,fmtty_rest$14),
              /*<<camlinternalFormat.ml 1115 74>>*/ fmtty$19=match$18[2],
              /*<<camlinternalFormat.ml 1115 74>>*/ fmt$19=match$18[1];
             /*<<camlinternalFormat.ml 1116 4>>*/ return [0,
                    [20,width_opt,char_set,fmt$19],
                    fmtty$19]}
          break;
         case 21:
          if(typeof fmtty!=="number"&&2===fmtty[0])
           { /*<<camlinternalFormat.ml 1118 39>>*/ var
             fmtty_rest$15=fmtty[1],
             fmt_rest$20=fmt[2],
             counter=fmt[1],
              /*<<camlinternalFormat.ml 1118 39>>*/ match$19=
               /*<<camlinternalFormat.ml 1118 39>>*/ type_format_gen
               (fmt_rest$20,fmtty_rest$15),
              /*<<camlinternalFormat.ml 1118 74>>*/ fmtty$20=match$19[2],
              /*<<camlinternalFormat.ml 1118 74>>*/ fmt$20=match$19[1];
             /*<<camlinternalFormat.ml 1119 4>>*/ return [0,
                    [21,counter,fmt$20],
                    fmtty$20]}
          break;
         case 23:
          var rest=fmt[2],ign=fmt[1];
           /*<<camlinternalFormat.ml 1148 21>>*/ if(typeof ign==="number")
            /*<<camlinternalFormat.ml 1148 21>>*/ switch(ign)
            {case 0:
               /*<<camlinternalFormat.ml 1149 42>>*/ return  /*<<camlinternalFormat.ml 1149 42>>*/ type_ignored_param_one
                      (ign,rest,fmtty);
             case 1:
               /*<<camlinternalFormat.ml 1150 42>>*/ return  /*<<camlinternalFormat.ml 1150 42>>*/ type_ignored_param_one
                      (ign,rest,fmtty);
             case 2:
               /*<<camlinternalFormat.ml 1158 42>>*/ return  /*<<camlinternalFormat.ml 1158 42>>*/ type_ignored_param_one
                      (ign,rest,fmtty);
             case 3:
               /*<<camlinternalFormat.ml 1170 22>>*/ if
               (typeof fmtty!=="number"&&14===fmtty[0])
               { /*<<camlinternalFormat.ml 1173 6>>*/ var
                  /*<<camlinternalFormat.ml 1173 6>>*/ fmtty_rest$16=fmtty[1],
                  /*<<camlinternalFormat.ml 1173 41>>*/ match$26=
                   /*<<camlinternalFormat.ml 1173 41>>*/ type_format_gen
                   (rest,fmtty_rest$16),
                  /*<<camlinternalFormat.ml 1173 71>>*/ fmtty$21=match$26[2],
                  /*<<camlinternalFormat.ml 1173 71>>*/ fmt$21=match$26[1];
                 /*<<camlinternalFormat.ml 1174 6>>*/ return [0,
                        [23,3,fmt$21],
                        fmtty$21]}
               /*<<camlinternalFormat.ml 1175 30>>*/ throw Type_mismatch;
             default:
               /*<<camlinternalFormat.ml 1161 42>>*/ return  /*<<camlinternalFormat.ml 1161 42>>*/ type_ignored_param_one
                      (ign,rest,fmtty)}
          else
            /*<<camlinternalFormat.ml 1148 21>>*/ switch(ign[0])
            {case 0:
               /*<<camlinternalFormat.ml 1151 42>>*/ return  /*<<camlinternalFormat.ml 1151 42>>*/ type_ignored_param_one
                      (ign,rest,fmtty);
             case 1:
               /*<<camlinternalFormat.ml 1152 42>>*/ return  /*<<camlinternalFormat.ml 1152 42>>*/ type_ignored_param_one
                      (ign,rest,fmtty);
             case 2:
               /*<<camlinternalFormat.ml 1153 42>>*/ return  /*<<camlinternalFormat.ml 1153 42>>*/ type_ignored_param_one
                      (ign,rest,fmtty);
             case 3:
               /*<<camlinternalFormat.ml 1154 42>>*/ return  /*<<camlinternalFormat.ml 1154 42>>*/ type_ignored_param_one
                      (ign,rest,fmtty);
             case 4:
               /*<<camlinternalFormat.ml 1155 42>>*/ return  /*<<camlinternalFormat.ml 1155 42>>*/ type_ignored_param_one
                      (ign,rest,fmtty);
             case 5:
               /*<<camlinternalFormat.ml 1156 42>>*/ return  /*<<camlinternalFormat.ml 1156 42>>*/ type_ignored_param_one
                      (ign,rest,fmtty);
             case 6:
               /*<<camlinternalFormat.ml 1157 42>>*/ return  /*<<camlinternalFormat.ml 1157 42>>*/ type_ignored_param_one
                      (ign,rest,fmtty);
             case 7:
              var sub_fmtty$2=ign[2],pad_opt$1=ign[1];
               /*<<camlinternalFormat.ml 1163 4>>*/ return  /*<<camlinternalFormat.ml 1163 4>>*/ type_ignored_param_one
                      ([7,pad_opt$1,sub_fmtty$2],rest,fmtty);
             case 8:
               /*<<camlinternalFormat.ml 1166 6>>*/ var
               sub_fmtty$3=ign[2],
               pad_opt$2=ign[1],
                /*<<camlinternalFormat.ml 1166 6>>*/ _iW_=
                 /*<<camlinternalFormat.ml 1166 6>>*/ type_ignored_format_substitution
                 (sub_fmtty$3,rest,fmtty),
                /*<<camlinternalFormat.ml 1166 58>>*/ match$27=_iW_[2],
                /*<<camlinternalFormat.ml 1166 58>>*/ fmtty$22=match$27[2],
                /*<<camlinternalFormat.ml 1166 58>>*/ fmt$22=match$27[1],
                /*<<camlinternalFormat.ml 1166 58>>*/ sub_fmtty$4=_iW_[1];
               /*<<camlinternalFormat.ml 1167 4>>*/ return [0,
                      [23,[8,pad_opt$2,sub_fmtty$4],fmt$22],
                      fmtty$22];
             case 9:
               /*<<camlinternalFormat.ml 1159 42>>*/ return  /*<<camlinternalFormat.ml 1159 42>>*/ type_ignored_param_one
                      (ign,rest,fmtty);
             default:
               /*<<camlinternalFormat.ml 1160 42>>*/ return  /*<<camlinternalFormat.ml 1160 42>>*/ type_ignored_param_one
                      (ign,rest,fmtty)}
         }
       /*<<camlinternalFormat.ml 1125 28>>*/ throw Type_mismatch /*<<camlinternalFormat.ml 1125 28>>*/ }
    function type_ignored_param_one(ign,fmt,fmtty)
     { /*<<camlinternalFormat.ml 1184 37>>*/ var
        /*<<camlinternalFormat.ml 1184 37>>*/ match=
         /*<<camlinternalFormat.ml 1184 37>>*/ type_format_gen(fmt,fmtty),
        /*<<camlinternalFormat.ml 1184 62>>*/ fmtty$0=match[2],
        /*<<camlinternalFormat.ml 1184 62>>*/ fmt$0=match[1];
       /*<<camlinternalFormat.ml 1185 2>>*/ return [0,[23,ign,fmt$0],fmtty$0] /*<<camlinternalFormat.ml 1185 51>>*/ }
    function type_ignored_format_substitution(sub_fmtty,fmt,match)
     { /*<<camlinternalFormat.ml 1192 27>>*/ if(typeof sub_fmtty==="number")
        /*<<camlinternalFormat.ml 1266 58>>*/ return [0,
               0,
                /*<<camlinternalFormat.ml 1266 33>>*/ type_format_gen
                (fmt,match)];
      else
        /*<<camlinternalFormat.ml 1192 27>>*/ switch(sub_fmtty[0])
        {case 0:
          if(typeof match!=="number"&&0===match[0])
           { /*<<camlinternalFormat.ml 1195 6>>*/ var
             fmtty_rest=match[1],
             sub_fmtty_rest=sub_fmtty[1],
              /*<<camlinternalFormat.ml 1195 6>>*/ match$0=
               /*<<camlinternalFormat.ml 1195 6>>*/ type_ignored_format_substitution
               (sub_fmtty_rest,fmt,fmtty_rest),
              /*<<camlinternalFormat.ml 1195 68>>*/ fmt$0=match$0[2],
              /*<<camlinternalFormat.ml 1195 68>>*/ sub_fmtty_rest$0=
              match$0[1];
             /*<<camlinternalFormat.ml 1196 4>>*/ return [0,
                    [0,sub_fmtty_rest$0],
                    fmt$0]}
          break;
         case 1:
          if(typeof match!=="number"&&1===match[0])
           { /*<<camlinternalFormat.ml 1199 6>>*/ var
             fmtty_rest$0=match[1],
             sub_fmtty_rest$1=sub_fmtty[1],
              /*<<camlinternalFormat.ml 1199 6>>*/ match$1=
               /*<<camlinternalFormat.ml 1199 6>>*/ type_ignored_format_substitution
               (sub_fmtty_rest$1,fmt,fmtty_rest$0),
              /*<<camlinternalFormat.ml 1199 68>>*/ fmt$1=match$1[2],
              /*<<camlinternalFormat.ml 1199 68>>*/ sub_fmtty_rest$2=
              match$1[1];
             /*<<camlinternalFormat.ml 1200 4>>*/ return [0,
                    [1,sub_fmtty_rest$2],
                    fmt$1]}
          break;
         case 2:
          if(typeof match!=="number"&&2===match[0])
           { /*<<camlinternalFormat.ml 1203 6>>*/ var
             fmtty_rest$1=match[1],
             sub_fmtty_rest$3=sub_fmtty[1],
              /*<<camlinternalFormat.ml 1203 6>>*/ match$2=
               /*<<camlinternalFormat.ml 1203 6>>*/ type_ignored_format_substitution
               (sub_fmtty_rest$3,fmt,fmtty_rest$1),
              /*<<camlinternalFormat.ml 1203 68>>*/ fmt$2=match$2[2],
              /*<<camlinternalFormat.ml 1203 68>>*/ sub_fmtty_rest$4=
              match$2[1];
             /*<<camlinternalFormat.ml 1204 4>>*/ return [0,
                    [2,sub_fmtty_rest$4],
                    fmt$2]}
          break;
         case 3:
          if(typeof match!=="number"&&3===match[0])
           { /*<<camlinternalFormat.ml 1207 6>>*/ var
             fmtty_rest$2=match[1],
             sub_fmtty_rest$5=sub_fmtty[1],
              /*<<camlinternalFormat.ml 1207 6>>*/ match$3=
               /*<<camlinternalFormat.ml 1207 6>>*/ type_ignored_format_substitution
               (sub_fmtty_rest$5,fmt,fmtty_rest$2),
              /*<<camlinternalFormat.ml 1207 68>>*/ fmt$3=match$3[2],
              /*<<camlinternalFormat.ml 1207 68>>*/ sub_fmtty_rest$6=
              match$3[1];
             /*<<camlinternalFormat.ml 1208 4>>*/ return [0,
                    [3,sub_fmtty_rest$6],
                    fmt$3]}
          break;
         case 4:
          if(typeof match!=="number"&&4===match[0])
           { /*<<camlinternalFormat.ml 1211 6>>*/ var
             fmtty_rest$3=match[1],
             sub_fmtty_rest$7=sub_fmtty[1],
              /*<<camlinternalFormat.ml 1211 6>>*/ match$4=
               /*<<camlinternalFormat.ml 1211 6>>*/ type_ignored_format_substitution
               (sub_fmtty_rest$7,fmt,fmtty_rest$3),
              /*<<camlinternalFormat.ml 1211 68>>*/ fmt$4=match$4[2],
              /*<<camlinternalFormat.ml 1211 68>>*/ sub_fmtty_rest$8=
              match$4[1];
             /*<<camlinternalFormat.ml 1212 4>>*/ return [0,
                    [4,sub_fmtty_rest$8],
                    fmt$4]}
          break;
         case 5:
          if(typeof match!=="number"&&5===match[0])
           { /*<<camlinternalFormat.ml 1215 6>>*/ var
             fmtty_rest$4=match[1],
             sub_fmtty_rest$9=sub_fmtty[1],
              /*<<camlinternalFormat.ml 1215 6>>*/ match$5=
               /*<<camlinternalFormat.ml 1215 6>>*/ type_ignored_format_substitution
               (sub_fmtty_rest$9,fmt,fmtty_rest$4),
              /*<<camlinternalFormat.ml 1215 68>>*/ fmt$5=match$5[2],
              /*<<camlinternalFormat.ml 1215 68>>*/ sub_fmtty_rest$10=
              match$5[1];
             /*<<camlinternalFormat.ml 1216 4>>*/ return [0,
                    [5,sub_fmtty_rest$10],
                    fmt$5]}
          break;
         case 6:
          if(typeof match!=="number"&&6===match[0])
           { /*<<camlinternalFormat.ml 1219 6>>*/ var
             fmtty_rest$5=match[1],
             sub_fmtty_rest$11=sub_fmtty[1],
              /*<<camlinternalFormat.ml 1219 6>>*/ match$6=
               /*<<camlinternalFormat.ml 1219 6>>*/ type_ignored_format_substitution
               (sub_fmtty_rest$11,fmt,fmtty_rest$5),
              /*<<camlinternalFormat.ml 1219 68>>*/ fmt$6=match$6[2],
              /*<<camlinternalFormat.ml 1219 68>>*/ sub_fmtty_rest$12=
              match$6[1];
             /*<<camlinternalFormat.ml 1220 4>>*/ return [0,
                    [6,sub_fmtty_rest$12],
                    fmt$6]}
          break;
         case 7:
          if(typeof match!=="number"&&7===match[0])
           { /*<<camlinternalFormat.ml 1223 6>>*/ var
             fmtty_rest$6=match[1],
             sub_fmtty_rest$13=sub_fmtty[1],
              /*<<camlinternalFormat.ml 1223 6>>*/ match$7=
               /*<<camlinternalFormat.ml 1223 6>>*/ type_ignored_format_substitution
               (sub_fmtty_rest$13,fmt,fmtty_rest$6),
              /*<<camlinternalFormat.ml 1223 68>>*/ fmt$7=match$7[2],
              /*<<camlinternalFormat.ml 1223 68>>*/ sub_fmtty_rest$14=
              match$7[1];
             /*<<camlinternalFormat.ml 1224 4>>*/ return [0,
                    [7,sub_fmtty_rest$14],
                    fmt$7]}
          break;
         case 8:
          if(typeof match!=="number"&&8===match[0])
           {var
             fmtty_rest$7=match[2],
             sub2_fmtty=match[1],
             sub_fmtty_rest$15=sub_fmtty[2],
             sub2_fmtty$0=sub_fmtty[1];
             /*<<camlinternalFormat.ml 1244 52>>*/ if
             ( /*<<camlinternalFormat.ml 1244 7>>*/ caml_notequal
               ([0,sub2_fmtty$0],[0,sub2_fmtty]))
             throw Type_mismatch;
             /*<<camlinternalFormat.ml 1246 6>>*/ var
              /*<<camlinternalFormat.ml 1246 6>>*/ match$8=
               /*<<camlinternalFormat.ml 1246 6>>*/ type_ignored_format_substitution
               (sub_fmtty_rest$15,fmt,fmtty_rest$7),
              /*<<camlinternalFormat.ml 1246 68>>*/ fmt$8=match$8[2],
              /*<<camlinternalFormat.ml 1246 68>>*/ sub_fmtty_rest$16=
              match$8[1];
             /*<<camlinternalFormat.ml 1247 4>>*/ return [0,
                    [8,sub2_fmtty,sub_fmtty_rest$16],
                    fmt$8]}
          break;
         case 9:
          if(typeof match!=="number"&&9===match[0])
           { /*<<camlinternalFormat.ml 1251 76>>*/ var
             fmtty_rest$8=match[3],
             sub2_fmtty$1=match[2],
             sub1_fmtty=match[1],
             sub_fmtty_rest$17=sub_fmtty[3],
             sub2_fmtty$2=sub_fmtty[2],
             sub1_fmtty$0=sub_fmtty[1],
              /*<<camlinternalFormat.ml 1251 76>>*/ _it_=
              [0, /*<<camlinternalFormat.ml 1251 53>>*/ erase_rel(sub1_fmtty)];
             /*<<camlinternalFormat.ml 1251 76>>*/ if
             ( /*<<camlinternalFormat.ml 1251 7>>*/ caml_notequal
               ([0,
                  /*<<camlinternalFormat.ml 1251 17>>*/ erase_rel
                  (sub1_fmtty$0)],
                _it_))
             throw Type_mismatch;
             /*<<camlinternalFormat.ml 1251 76>>*/  /*<<camlinternalFormat.ml 1253 76>>*/ var
             _iu_=
              [0,
                /*<<camlinternalFormat.ml 1253 53>>*/ erase_rel(sub2_fmtty$1)];
             /*<<camlinternalFormat.ml 1253 76>>*/ if
             ( /*<<camlinternalFormat.ml 1253 7>>*/ caml_notequal
               ([0,
                  /*<<camlinternalFormat.ml 1253 17>>*/ erase_rel
                  (sub2_fmtty$2)],
                _iu_))
             throw Type_mismatch;
             /*<<camlinternalFormat.ml 1251 76>>*/ var
              /*<<camlinternalFormat.ml 1255 21>>*/ sub_fmtty$0=
               /*<<camlinternalFormat.ml 1255 21>>*/ trans
               ( /*<<camlinternalFormat.ml 1255 27>>*/ symm(sub1_fmtty),
                sub2_fmtty$1),
              /*<<camlinternalFormat.ml 1256 23>>*/ match$9=
               /*<<camlinternalFormat.ml 1256 23>>*/ fmtty_rel_det
               (sub_fmtty$0),
              /*<<camlinternalFormat.ml 1256 47>>*/ f4=match$9[4],
              /*<<camlinternalFormat.ml 1256 47>>*/ f2=match$9[2];
             /*<<camlinternalFormat.ml 1257 15>>*/  /*<<camlinternalFormat.ml 1257 15>>*/ caml_call1
             (f2,0);
             /*<<camlinternalFormat.ml 1258 15>>*/  /*<<camlinternalFormat.ml 1258 15>>*/ caml_call1
             (f4,0);
             /*<<camlinternalFormat.ml 1251 76>>*/ var
              /*<<camlinternalFormat.ml 1260 6>>*/ match$10=
               /*<<camlinternalFormat.ml 1260 6>>*/ type_ignored_format_substitution
               ( /*<<camlinternalFormat.ml 1260 39>>*/ erase_rel
                 (sub_fmtty_rest$17),
                fmt,
                fmtty_rest$8),
              /*<<camlinternalFormat.ml 1260 80>>*/ fmt$9=match$10[2],
              /*<<camlinternalFormat.ml 1260 80>>*/ sub_fmtty_rest$18=
              match$10[1];
             /*<<camlinternalFormat.ml 1263 56>>*/ return [0,
                    [9,
                     sub1_fmtty,
                     sub2_fmtty$1,
                      /*<<camlinternalFormat.ml 1263 36>>*/ symm
                      (sub_fmtty_rest$18)],
                    fmt$9]}
          break;
         case 10:
          if(typeof match!=="number"&&10===match[0])
           { /*<<camlinternalFormat.ml 1227 6>>*/ var
             fmtty_rest$9=match[1],
             sub_fmtty_rest$19=sub_fmtty[1],
              /*<<camlinternalFormat.ml 1227 6>>*/ match$11=
               /*<<camlinternalFormat.ml 1227 6>>*/ type_ignored_format_substitution
               (sub_fmtty_rest$19,fmt,fmtty_rest$9),
              /*<<camlinternalFormat.ml 1227 68>>*/ fmt$10=match$11[2],
              /*<<camlinternalFormat.ml 1227 68>>*/ sub_fmtty_rest$20=
              match$11[1];
             /*<<camlinternalFormat.ml 1228 4>>*/ return [0,
                    [10,sub_fmtty_rest$20],
                    fmt$10]}
          break;
         case 11:
          if(typeof match!=="number"&&11===match[0])
           { /*<<camlinternalFormat.ml 1231 6>>*/ var
             fmtty_rest$10=match[1],
             sub_fmtty_rest$21=sub_fmtty[1],
              /*<<camlinternalFormat.ml 1231 6>>*/ match$12=
               /*<<camlinternalFormat.ml 1231 6>>*/ type_ignored_format_substitution
               (sub_fmtty_rest$21,fmt,fmtty_rest$10),
              /*<<camlinternalFormat.ml 1231 68>>*/ fmt$11=match$12[2],
              /*<<camlinternalFormat.ml 1231 68>>*/ sub_fmtty_rest$22=
              match$12[1];
             /*<<camlinternalFormat.ml 1232 4>>*/ return [0,
                    [11,sub_fmtty_rest$22],
                    fmt$11]}
          break;
         case 13:
          if(typeof match!=="number"&&13===match[0])
           { /*<<camlinternalFormat.ml 1235 6>>*/ var
             fmtty_rest$11=match[1],
             sub_fmtty_rest$23=sub_fmtty[1],
              /*<<camlinternalFormat.ml 1235 6>>*/ match$13=
               /*<<camlinternalFormat.ml 1235 6>>*/ type_ignored_format_substitution
               (sub_fmtty_rest$23,fmt,fmtty_rest$11),
              /*<<camlinternalFormat.ml 1235 68>>*/ fmt$12=match$13[2],
              /*<<camlinternalFormat.ml 1235 68>>*/ sub_fmtty_rest$24=
              match$13[1];
             /*<<camlinternalFormat.ml 1236 4>>*/ return [0,
                    [13,sub_fmtty_rest$24],
                    fmt$12]}
          break;
         case 14:
          if(typeof match!=="number"&&14===match[0])
           { /*<<camlinternalFormat.ml 1239 6>>*/ var
             fmtty_rest$12=match[1],
             sub_fmtty_rest$25=sub_fmtty[1],
              /*<<camlinternalFormat.ml 1239 6>>*/ match$14=
               /*<<camlinternalFormat.ml 1239 6>>*/ type_ignored_format_substitution
               (sub_fmtty_rest$25,fmt,fmtty_rest$12),
              /*<<camlinternalFormat.ml 1239 68>>*/ fmt$13=match$14[2],
              /*<<camlinternalFormat.ml 1239 68>>*/ sub_fmtty_rest$26=
              match$14[1];
             /*<<camlinternalFormat.ml 1240 4>>*/ return [0,
                    [14,sub_fmtty_rest$26],
                    fmt$13]}
          break
         }
       /*<<camlinternalFormat.ml 1267 28>>*/ throw Type_mismatch /*<<camlinternalFormat.ml 1267 28>>*/ }
    function fix_padding(padty,width,str)
     { /*<<camlinternalFormat.ml 1309 2>>*/ var
        /*<<camlinternalFormat.ml 1309 2>>*/ len=
         /*<<camlinternalFormat.ml 1309 2>>*/ caml_ml_string_length(str),
        /*<<camlinternalFormat.ml 1310 2>>*/ padty$0=0<=width?padty:0,
        /*<<camlinternalFormat.ml 1311 4>>*/ width$0=
         /*<<camlinternalFormat.ml 1311 4>>*/ abs(width);
       /*<<camlinternalFormat.ml 1322 2>>*/ if(width$0<=len)return str;
       /*<<camlinternalFormat.ml 1309 2>>*/ var
        /*<<camlinternalFormat.ml 1323 4>>*/ _is_=2===padty$0?48:32,
        /*<<camlinternalFormat.ml 1323 14>>*/ res=
         /*<<camlinternalFormat.ml 1323 14>>*/ make(width$0,_is_);
       /*<<camlinternalFormat.ml 1324 4>>*/ switch(padty$0)
       {case 0:
          /*<<camlinternalFormat.ml 1325 15>>*/  /*<<camlinternalFormat.ml 1325 15>>*/ blit$0
          (str,0,res,0,len);
         break;
        case 1:
          /*<<camlinternalFormat.ml 1326 15>>*/  /*<<camlinternalFormat.ml 1326 15>>*/ blit$0
          (str,0,res,width$0-len|0,len);
         break;
        default:
          /*<<camlinternalFormat.ml 1327 17>>*/ if(0<len)
          { /*<<camlinternalFormat.ml 1327 36>>*/ if
            (43===
              /*<<camlinternalFormat.ml 1327 29>>*/ caml_string_get(str,0))
            var switch$1=1;
           else
            if
             (45===
               /*<<camlinternalFormat.ml 1327 46>>*/ caml_string_get(str,0))
             var switch$1=1;
            else
             if
              (32===
                /*<<camlinternalFormat.ml 1327 63>>*/ caml_string_get(str,0))
              var switch$1=1;
             else
              var switch$0=0,switch$1=0;
           if(switch$1)
            { /*<<camlinternalFormat.ml 1328 6>>*/  /*<<camlinternalFormat.ml 1328 6>>*/ caml_string_set
              (res,
               0,
                /*<<camlinternalFormat.ml 1328 22>>*/ caml_string_get(str,0));
              /*<<camlinternalFormat.ml 1329 6>>*/  /*<<camlinternalFormat.ml 1329 6>>*/ blit$0
              (str,1,res,(width$0-len|0)+1|0,len-1|0);
             var switch$0=1}}
         else
          var switch$0=0;
          /*<<camlinternalFormatBasics.ml 521 8>>*/ if(!switch$0)
          { /*<<camlinternalFormat.ml 1330 17>>*/ if(1<len)
            if
             (48===
               /*<<camlinternalFormat.ml 1330 28>>*/ caml_string_get(str,0))
             { /*<<camlinternalFormat.ml 1330 53>>*/ if
               (120===
                 /*<<camlinternalFormat.ml 1330 46>>*/ caml_string_get(str,1))
               var switch$3=1;
              else
               if
                (88===
                  /*<<camlinternalFormat.ml 1330 63>>*/ caml_string_get(str,1))
                var switch$3=1;
               else
                var switch$2=0,switch$3=0;
              if(switch$3)
               { /*<<camlinternalFormat.ml 1331 6>>*/  /*<<camlinternalFormat.ml 1331 6>>*/ caml_string_set
                 (res,
                  1,
                   /*<<camlinternalFormat.ml 1331 22>>*/ caml_string_get
                   (str,1));
                 /*<<camlinternalFormat.ml 1332 6>>*/  /*<<camlinternalFormat.ml 1332 6>>*/ blit$0
                 (str,2,res,(width$0-len|0)+2|0,len-2|0);
                var switch$2=1}}
            else
             var switch$2=0;
           else
            var switch$2=0;
           if(!switch$2)
             /*<<camlinternalFormat.ml 1334 6>>*/ blit$0
             (str,0,res,width$0-len|0,len)}}
       /*<<camlinternalFormat.ml 1336 4>>*/ return res /*<<camlinternalFormat.ml 1336 30>>*/ }
    function fix_int_precision(prec,str)
     { /*<<camlinternalFormat.ml 1340 13>>*/ var
        /*<<camlinternalFormat.ml 1340 13>>*/ prec$0=
         /*<<camlinternalFormat.ml 1340 13>>*/ abs(prec),
        /*<<camlinternalFormat.ml 1341 2>>*/ len=
         /*<<camlinternalFormat.ml 1341 2>>*/ caml_ml_string_length(str),
        /*<<camlinternalFormat.ml 1342 8>>*/ c=
         /*<<camlinternalFormat.ml 1342 8>>*/ caml_string_get(str,0);
       /*<<camlinternalFormat.ml 1342 15>>*/ if(58<=c)
       var switch$0=71<=c?5<(c-97|0)>>>0?1:0:65<=c?0:1;
      else
       {if(32===c)
         var switch$1=1;
        else
         if(43<=c)
          {var switcher=c-43|0;
           switch(switcher)
            {case 5:
               /*<<camlinternalFormat.ml 1348 13>>*/ if(len<(prec$0+2|0))
               if(1<len)
                { /*<<camlinternalFormat.ml 1348 50>>*/  /*<<camlinternalFormat.ml 1348 50>>*/ var
                  switch$2=
                   120===
                     /*<<camlinternalFormat.ml 1348 43>>*/ caml_string_get
                     (str,1)
                    ?0
                    :88===
                       /*<<camlinternalFormat.ml 1348 60>>*/ caml_string_get
                       (str,1)
                      ?0
                      :1;
                 if(!switch$2)
                  { /*<<camlinternalFormat.ml 1349 14>>*/  /*<<camlinternalFormat.ml 1349 14>>*/ var
                    res$1=
                      /*<<camlinternalFormat.ml 1349 14>>*/ make(prec$0+2|0,48);
                    /*<<camlinternalFormat.ml 1350 4>>*/  /*<<camlinternalFormat.ml 1350 4>>*/ caml_string_set
                    (res$1,
                     1,
                      /*<<camlinternalFormat.ml 1350 20>>*/ caml_string_get
                      (str,1));
                    /*<<camlinternalFormat.ml 1351 4>>*/  /*<<camlinternalFormat.ml 1351 4>>*/ blit$0
                    (str,2,res$1,(prec$0-len|0)+4|0,len-2|0);
                    /*<<camlinternalFormat.ml 1351 52>>*/ return res$1}}
              var switch$0=0,switch$1=0;
              break;
             case 0:
             case 2:var switch$1=1;break;
             case 1:
             case 3:
             case 4:var switch$0=1,switch$1=0;break;
             default:var switch$0=0,switch$1=0}}
         else
          var switch$0=1,switch$1=0;
        if(switch$1)
         { /*<<camlinternalFormat.ml 1343 32>>*/ if(len<(prec$0+1|0))
           { /*<<camlinternalFormat.ml 1344 14>>*/  /*<<camlinternalFormat.ml 1344 14>>*/ var
             res$0=
               /*<<camlinternalFormat.ml 1344 14>>*/ make(prec$0+1|0,48);
             /*<<camlinternalFormat.ml 1345 4>>*/  /*<<camlinternalFormat.ml 1345 4>>*/ caml_string_set
             (res$0,0,c);
             /*<<camlinternalFormat.ml 1346 4>>*/  /*<<camlinternalFormat.ml 1346 4>>*/ blit$0
             (str,1,res$0,(prec$0-len|0)+2|0,len-1|0);
             /*<<camlinternalFormat.ml 1346 52>>*/ return res$0}
          var switch$0=1}}
       /*<<camlinternalFormatBasics.ml 521 8>>*/ if(!switch$0)
       if(len<prec$0)
        { /*<<camlinternalFormat.ml 1354 14>>*/  /*<<camlinternalFormat.ml 1354 14>>*/ var
          res=
            /*<<camlinternalFormat.ml 1354 14>>*/ make(prec$0,48);
          /*<<camlinternalFormat.ml 1355 4>>*/  /*<<camlinternalFormat.ml 1355 4>>*/ blit$0
          (str,0,res,prec$0-len|0,len);
          /*<<camlinternalFormat.ml 1355 42>>*/ return res}
       /*<<camlinternalFormat.ml 1358 4>>*/ return str /*<<camlinternalFormat.ml 1358 7>>*/ }
    function string_to_caml_string(str)
     { /*<<?>>*/ var i$1=0;
       /*<<string.ml 90 4>>*/ for(;;)
       { /*<<string.ml 90 4>>*/ if
         ( /*<<string.ml 90 4>>*/ caml_ml_string_length(str)<=i$1)
         var _iq_=0;
        else
         { /*<<string.ml 91 6>>*/  /*<<string.ml 91 6>>*/ var
           match$0=
             /*<<string.ml 91 6>>*/ caml_string_unsafe_get(str,i$1);
           /*<<string.ml 91 6>>*/ if(32<=match$0)
           {var _ip_=match$0-34|0;
            if(58<_ip_>>>0)
             if(93<=_ip_)var switch$0=0,switch$1=0;else var switch$1=1;
            else
             if(56<(_ip_-1|0)>>>0)
              var switch$0=1,switch$1=0;
             else
              var switch$1=1;
            if(switch$1)
             { /*<<string.ml 93 22>>*/ var
                /*<<string.ml 93 22>>*/ i$2=i$1+1|0,
               i$1=i$2;
              continue}}
          else
           var switch$0=11<=match$0?13===match$0?1:0:8<=match$0?1:0;
           /*<<string.ml 91 6>>*/  /*<<camlinternalFormatBasics.ml 521 8>>*/ var
           _iq_=
            switch$0?1:1}
         /*<<string.ml 96 19>>*/ if(_iq_)
         { /*<<bytes.ml 150 2>>*/ var
            /*<<bytes.ml 150 2>>*/ n=[0,0],
            /*<<bytes.ml 151 2>>*/ _ii_=
             /*<<bytes.ml 151 2>>*/ caml_ml_string_length(str)-
            1|
            0,
            /*<<bytes.ml 150 2>>*/ _ih_=0;
           /*<<bytes.ml 151 2>>*/ if(!(_ii_<0))
           {var i$0=_ih_;
             /*<<bytes.ml 152 4>>*/ for(;;)
             { /*<<bytes.ml 152 4>>*/  /*<<bytes.ml 152 4>>*/ var
               match=
                 /*<<bytes.ml 152 4>>*/ caml_string_unsafe_get(str,i$0);
               /*<<bytes.ml 152 4>>*/ if(32<=match)
               {var _im_=match-34|0;
                if(58<_im_>>>0)
                 if(93<=_im_)var switch$2=0,switch$3=0;else var switch$3=1;
                else
                 if(56<(_im_-1|0)>>>0)
                  var switch$2=1,switch$3=0;
                 else
                  var switch$3=1;
                if(switch$3)var _in_=1,switch$2=2}
              else
               var switch$2=11<=match?13===match?1:0:8<=match?1:0;
              switch(switch$2)
               {case 0:var _in_=4;break;case 1:var _in_=2;break}
              n[1]=n[1]+_in_|0;
               /*<<bytes.ml 152 4>>*/ var _io_=i$0+1|0;
              if(_ii_!==i$0){var i$0=_io_;continue}
              break}}
           /*<<bytes.ml 158 2>>*/ if
           (n[1]=== /*<<bytes.ml 158 2>>*/ caml_ml_string_length(str))
           { /*<<bytes.ml 50 2>>*/ var
              /*<<bytes.ml 50 2>>*/ len=
               /*<<bytes.ml 50 2>>*/ caml_ml_string_length(str),
              /*<<bytes.ml 51 2>>*/ r=
               /*<<bytes.ml 51 2>>*/ caml_create_string(len);
             /*<<bytes.ml 52 2>>*/  /*<<bytes.ml 52 2>>*/ caml_blit_string
             (str,0,r,0,len);
             /*<<bytes.ml 50 2>>*/ var _ir_=r}
          else
           { /*<<bytes.ml 158 36>>*/  /*<<bytes.ml 158 36>>*/ var
             s=
               /*<<bytes.ml 158 36>>*/ caml_create_string(n[1]);
             /*<<bytes.ml 160 4>>*/ n[1]=0;
             /*<<bytes.ml 158 36>>*/ var
              /*<<bytes.ml 161 4>>*/ _ik_=
               /*<<bytes.ml 161 4>>*/ caml_ml_string_length(str)-
              1|
              0,
              /*<<bytes.ml 161 4>>*/ _ij_=0;
             /*<<bytes.ml 161 4>>*/ if(!(_ik_<0))
             {var i=_ij_;
               /*<<bytes.ml 162 6>>*/ for(;;)
               { /*<<bytes.ml 162 6>>*/  /*<<bytes.ml 162 6>>*/ var
                 c=
                   /*<<bytes.ml 162 6>>*/ caml_string_unsafe_get(str,i);
                 /*<<bytes.ml 162 6>>*/ if(35<=c)
                 var switch$4=92===c?1:127<=c?0:2;
                else
                 if(32<=c)
                  var switch$4=34<=c?1:2;
                 else
                  if(14<=c)
                   var switch$4=0;
                  else
                   switch(c)
                    {case 8:
                       /*<<bytes.ml 172 10>>*/  /*<<bytes.ml 172 10>>*/ caml_string_unsafe_set
                       (s,n[1],92);
                       /*<<bytes.ml 172 33>>*/ n[1]++;
                       /*<<bytes.ml 172 41>>*/  /*<<bytes.ml 172 41>>*/ caml_string_unsafe_set
                       (s,n[1],98);
                      var switch$4=3;
                      break;
                     case 9:
                       /*<<bytes.ml 168 10>>*/  /*<<bytes.ml 168 10>>*/ caml_string_unsafe_set
                       (s,n[1],92);
                       /*<<bytes.ml 168 33>>*/ n[1]++;
                       /*<<bytes.ml 168 41>>*/  /*<<bytes.ml 168 41>>*/ caml_string_unsafe_set
                       (s,n[1],116);
                      var switch$4=3;
                      break;
                     case 10:
                       /*<<bytes.ml 166 10>>*/  /*<<bytes.ml 166 10>>*/ caml_string_unsafe_set
                       (s,n[1],92);
                       /*<<bytes.ml 166 33>>*/ n[1]++;
                       /*<<bytes.ml 166 41>>*/  /*<<bytes.ml 166 41>>*/ caml_string_unsafe_set
                       (s,n[1],110);
                      var switch$4=3;
                      break;
                     case 13:
                       /*<<bytes.ml 170 10>>*/  /*<<bytes.ml 170 10>>*/ caml_string_unsafe_set
                       (s,n[1],92);
                       /*<<bytes.ml 170 33>>*/ n[1]++;
                       /*<<bytes.ml 170 41>>*/  /*<<bytes.ml 170 41>>*/ caml_string_unsafe_set
                       (s,n[1],114);
                      var switch$4=3;
                      break;
                     default:var switch$4=0}
                switch(switch$4)
                 {case 0:
                    /*<<bytes.ml 176 10>>*/  /*<<bytes.ml 176 10>>*/ caml_string_unsafe_set
                    (s,n[1],92);
                    /*<<bytes.ml 177 10>>*/ n[1]++;
                    /*<<bytes.ml 178 10>>*/  /*<<bytes.ml 178 10>>*/ caml_string_unsafe_set
                    (s,n[1],48+(c/100|0)|0);
                    /*<<bytes.ml 179 10>>*/ n[1]++;
                    /*<<bytes.ml 180 10>>*/  /*<<bytes.ml 180 10>>*/ caml_string_unsafe_set
                    (s,n[1],48+((c/10|0)%10|0)|0);
                    /*<<bytes.ml 181 10>>*/ n[1]++;
                    /*<<bytes.ml 182 10>>*/  /*<<bytes.ml 182 10>>*/ caml_string_unsafe_set
                    (s,n[1],48+(c%10|0)|0);
                   break;
                  case 1:
                    /*<<bytes.ml 164 10>>*/  /*<<bytes.ml 164 10>>*/ caml_string_unsafe_set
                    (s,n[1],92);
                    /*<<bytes.ml 164 33>>*/ n[1]++;
                    /*<<bytes.ml 164 41>>*/  /*<<bytes.ml 164 41>>*/ caml_string_unsafe_set
                    (s,n[1],c);
                   break;
                  case 2:
                    /*<<bytes.ml 173 29>>*/  /*<<bytes.ml 173 29>>*/ caml_string_unsafe_set
                    (s,n[1],c);
                   break
                  }
                 /*<<bytes.ml 184 6>>*/ n[1]++;
                 /*<<bytes.ml 162 6>>*/  /*<<bytes.ml 184 6>>*/ var
                 _il_=
                  i+1|0;
                if(_ik_!==i){var i=_il_;continue}
                break}}
             /*<<bytes.ml 158 36>>*/ var _ir_=s}
           /*<<bytes.ml 150 2>>*/ var str$0=_ir_}
        else
         var str$0=str;
         /*<<camlinternalFormat.ml 1363 2>>*/ var
          /*<<camlinternalFormat.ml 1363 2>>*/ l=
           /*<<camlinternalFormat.ml 1363 2>>*/ caml_ml_string_length(str$0),
          /*<<camlinternalFormat.ml 1364 12>>*/ res=
           /*<<camlinternalFormat.ml 1364 12>>*/ make(l+2|0,34);
         /*<<camlinternalFormat.ml 1365 2>>*/  /*<<camlinternalFormat.ml 1365 2>>*/ caml_blit_string
         (str$0,0,res,1,l);
         /*<<camlinternalFormat.ml 1365 34>>*/ return res} /*<<camlinternalFormat.ml 1366 28>>*/ }
    function convert_int(iconv,n)
     { /*<<camlinternalFormat.ml 1370 22>>*/ switch(iconv)
       {case 0:var _ig_=_ar_;break;
        case 1:var _ig_=_as_;break;
        case 2:var _ig_=_at_;break;
        case 3:var _ig_=_au_;break;
        case 4:var _ig_=_av_;break;
        case 5:var _ig_=_aw_;break;
        case 6:var _ig_=_ax_;break;
        case 7:var _ig_=_ay_;break;
        case 8:var _ig_=_az_;break;
        case 9:var _ig_=_aA_;break;
        case 10:var _ig_=_aB_;break;
        case 11:var _ig_=_aC_;break;
        default:var _ig_=_aD_}
       /*<<camlinternalFormat.ml 1416 60>>*/ return  /*<<camlinternalFormat.ml 1416 60>>*/ caml_format_int
              (_ig_,n) /*<<camlinternalFormat.ml 1416 62>>*/ }
    function convert_int32(iconv,n)
     { /*<<camlinternalFormat.ml 1386 23>>*/ switch(iconv)
       {case 0:var _if_=_aR_;break;
        case 1:var _if_=_aS_;break;
        case 2:var _if_=_aT_;break;
        case 3:var _if_=_aU_;break;
        case 4:var _if_=_aV_;break;
        case 5:var _if_=_aW_;break;
        case 6:var _if_=_aX_;break;
        case 7:var _if_=_aY_;break;
        case 8:var _if_=_aZ_;break;
        case 9:var _if_=_a0_;break;
        case 10:var _if_=_a1_;break;
        case 11:var _if_=_a2_;break;
        default:var _if_=_a3_}
       /*<<camlinternalFormat.ml 1417 65>>*/ return  /*<<camlinternalFormat.ml 1417 65>>*/ caml_format_int
              (_if_,n) /*<<camlinternalFormat.ml 1417 67>>*/ }
    function convert_nativeint(iconv,n)
     { /*<<camlinternalFormat.ml 1394 23>>*/ switch(iconv)
       {case 0:var _ie_=_a4_;break;
        case 1:var _ie_=_a5_;break;
        case 2:var _ie_=_a6_;break;
        case 3:var _ie_=_a7_;break;
        case 4:var _ie_=_a8_;break;
        case 5:var _ie_=_a9_;break;
        case 6:var _ie_=_a__;break;
        case 7:var _ie_=_a$_;break;
        case 8:var _ie_=_ba_;break;
        case 9:var _ie_=_bb_;break;
        case 10:var _ie_=_bc_;break;
        case 11:var _ie_=_bd_;break;
        default:var _ie_=_be_}
       /*<<camlinternalFormat.ml 1418 73>>*/ return  /*<<camlinternalFormat.ml 1418 73>>*/ caml_format_int
              (_ie_,n) /*<<camlinternalFormat.ml 1418 75>>*/ }
    function convert_int64(iconv,n)
     { /*<<camlinternalFormat.ml 1378 23>>*/ switch(iconv)
       {case 0:var _id_=_aE_;break;
        case 1:var _id_=_aF_;break;
        case 2:var _id_=_aG_;break;
        case 3:var _id_=_aH_;break;
        case 4:var _id_=_aI_;break;
        case 5:var _id_=_aJ_;break;
        case 6:var _id_=_aK_;break;
        case 7:var _id_=_aL_;break;
        case 8:var _id_=_aM_;break;
        case 9:var _id_=_aN_;break;
        case 10:var _id_=_aO_;break;
        case 11:var _id_=_aP_;break;
        default:var _id_=_aQ_}
       /*<<camlinternalFormat.ml 1419 65>>*/ return  /*<<camlinternalFormat.ml 1419 65>>*/ caml_int64_format
              (_id_,n) /*<<camlinternalFormat.ml 1419 67>>*/ }
    function convert_float(fconv,prec$0,x)
     { /*<<camlinternalFormat.ml 1424 2>>*/ if(16<=fconv)
       { /*<<camlinternalFormat.ml 1426 4>>*/ if(17<=fconv)
         switch(fconv-17|0)
          {case 2:var switch$0=0;break;
           case 0:
           case 3:var sign=43,switch$0=1;break;
           default:var sign=32,switch$0=1}
        else
         var switch$0=0;
         /*<<camlinternalFormatBasics.ml 521 8>>*/ if(!switch$0)var sign=45;
         /*<<camlinternalFormat.ml 1431 4>>*/  /*<<camlinternalFormat.ml 1431 4>>*/ var
         s=
           /*<<camlinternalFormat.ml 1431 4>>*/ caml_hexstring_of_float
           (x,prec$0,sign);
         /*<<camlinternalFormat.ml 1432 4>>*/ if(19<=fconv)
         { /*<<bytes.ml 190 2>>*/  /*<<bytes.ml 190 2>>*/ var
           l=
             /*<<bytes.ml 190 2>>*/ caml_ml_string_length(s);
           /*<<bytes.ml 191 2>>*/ if(0===l)
           var _h$_=s;
          else
           { /*<<bytes.ml 191 23>>*/ var
              /*<<bytes.ml 191 23>>*/ r=
               /*<<bytes.ml 191 23>>*/ caml_create_string(l),
              /*<<bytes.ml 193 4>>*/ _h8_=l-1|0,
              /*<<bytes.ml 191 23>>*/ _h7_=0;
             /*<<bytes.ml 193 4>>*/ if(!(_h8_<0))
             {var i=_h7_;
               /*<<bytes.ml 193 26>>*/ for(;;)
               { /*<<bytes.ml 193 26>>*/  /*<<bytes.ml 193 26>>*/ var
                 c=
                   /*<<bytes.ml 193 26>>*/ caml_string_unsafe_get(s,i);
                 /*<<char.ml 68 2>>*/ if(97<=c)
                 if(122<c)var switch$1=0;else var _h9_=c-32|0,switch$1=1;
                else
                 var switch$1=0;
                if(!switch$1)var _h9_=c;
                 /*<<bytes.ml 193 61>>*/  /*<<bytes.ml 193 61>>*/ caml_string_unsafe_set
                 (r,i,_h9_);
                 /*<<bytes.ml 193 26>>*/  /*<<bytes.ml 193 61>>*/ var
                 _h__=
                  i+1|0;
                if(_h8_!==i){var i=_h__;continue}
                break}}
             /*<<bytes.ml 191 23>>*/ var _h$_=r}
           /*<<string.ml 117 27>>*/ return _h$_}
         /*<<camlinternalFormat.ml 1434 11>>*/ return s}
       /*<<camlinternalFormat.ml 1404 2>>*/ if(15===fconv)
       var _ia_=_bf_;
      else
       { /*<<camlinternalFormat.ml 1405 15>>*/  /*<<camlinternalFormat.ml 1405 15>>*/ var
         prec=
           /*<<camlinternalFormat.ml 1405 15>>*/ abs(prec$0);
         /*<<camlinternalFormat.ml 289 26>>*/ switch(fconv)
         {case 15:var symb=70;break;
          case 0:
          case 1:
          case 2:var symb=102;break;
          case 3:
          case 4:
          case 5:var symb=101;break;
          case 6:
          case 7:
          case 8:var symb=69;break;
          case 9:
          case 10:
          case 11:var symb=103;break;
          case 12:
          case 13:
          case 14:var symb=71;break;
          case 16:
          case 17:
          case 18:var symb=104;break;
          default:var symb=72}
         /*<<camlinternalFormat.ml 1405 15>>*/  /*<<camlinternalFormat.ml 1407 14>>*/ var
         buf=
           /*<<camlinternalFormat.ml 1407 14>>*/ buffer_create(16);
         /*<<camlinternalFormat.ml 1408 4>>*/  /*<<camlinternalFormat.ml 1408 4>>*/ buffer_add_char
         (buf,37);
         /*<<camlinternalFormat.ml 435 34>>*/ switch(fconv)
         {case 1:
          case 4:
          case 7:
          case 10:
          case 13:
          case 17:
          case 20:
            /*<<camlinternalFormat.ml 438 4>>*/  /*<<camlinternalFormat.ml 438 4>>*/ buffer_add_char
            (buf,43);
           break;
          case 2:
          case 5:
          case 8:
          case 11:
          case 14:
          case 18:
          case 21:
            /*<<camlinternalFormat.ml 441 4>>*/  /*<<camlinternalFormat.ml 441 4>>*/ buffer_add_char
            (buf,32);
           break
          }
         /*<<camlinternalFormat.ml 1410 4>>*/  /*<<camlinternalFormat.ml 1410 4>>*/ buffer_add_char
         (buf,46);
         /*<<camlinternalFormat.ml 1411 4>>*/  /*<<camlinternalFormat.ml 1411 4>>*/ buffer_add_string
         (buf, /*<<camlinternalFormat.ml 1411 26>>*/ caml_new_string(""+prec));
         /*<<camlinternalFormat.ml 1412 4>>*/  /*<<camlinternalFormat.ml 1412 4>>*/ buffer_add_char
         (buf,symb);
         /*<<camlinternalFormat.ml 1405 15>>*/ var
         _ia_=
           /*<<camlinternalFormat.ml 1412 28>>*/ buffer_contents(buf)}
       /*<<camlinternalFormat.ml 1437 55>>*/  /*<<camlinternalFormat.ml 1437 55>>*/ var
       str=
         /*<<camlinternalFormat.ml 1437 55>>*/ caml_format_float(_ia_,x);
       /*<<camlinternalFormat.ml 1438 4>>*/ if(15===fconv)
       { /*<<camlinternalFormat.ml 1439 6>>*/ var
          /*<<camlinternalFormat.ml 1439 6>>*/ len=
           /*<<camlinternalFormat.ml 1439 6>>*/ caml_ml_string_length(str),
          /*<<camlinternalFormat.ml 1446 12>>*/ match$0=
           /*<<camlinternalFormat.ml 1446 12>>*/ caml_classify_float(x);
         /*<<camlinternalFormat.ml 1446 28>>*/ if(3===match$0)
         return x<0?_bg_:_bh_;
        if(4<=match$0)return _bi_;
         /*<<camlinternalFormat.ml 1439 6>>*/ var i$0=0;
         /*<<camlinternalFormat.ml 1441 8>>*/ for(;;)
         { /*<<camlinternalFormat.ml 1441 8>>*/ if(i$0===len)
           var _ic_=0;
          else
           { /*<<camlinternalFormat.ml 1442 16>>*/ var
              /*<<camlinternalFormat.ml 1442 16>>*/ match=
               /*<<camlinternalFormat.ml 1442 16>>*/ caml_string_get(str,i$0),
              /*<<camlinternalFormat.ml 1442 23>>*/ _ib_=match-46|0,
              /*<<camlinternalFormat.ml 1442 23>>*/ switch$2=
              23<_ib_>>>0?55===_ib_?1:0:21<(_ib_-1|0)>>>0?1:0;
            if(!switch$2)
             { /*<<camlinternalFormat.ml 1444 17>>*/ var
                /*<<camlinternalFormat.ml 1444 17>>*/ i$1=i$0+1|0,
               i$0=i$1;
              continue}
             /*<<camlinternalFormat.ml 1442 16>>*/ var _ic_=1}
           /*<<camlinternalFormat.ml 1448 21>>*/ return _ic_
                  ?str
                  : /*<<camlinternalFormat.ml 1448 36>>*/ _a_(str,_bj_)}}
       /*<<camlinternalFormat.ml 1438 29>>*/ return str /*<<camlinternalFormat.ml 1451 23>>*/ }
    function make_printf(k,o,acc,fmt)
     {var k$0=k,acc$0=acc,fmt$0=fmt;
       /*<<camlinternalFormat.ml 1480 19>>*/ for(;;)
       if(typeof fmt$0==="number")
         /*<<camlinternalFormat.ml 1567 4>>*/ return  /*<<camlinternalFormat.ml 1567 4>>*/ caml_call2
                (k$0,o,acc$0);
       else
         /*<<camlinternalFormat.ml 1480 19>>*/ switch(fmt$0[0])
         {case 0:
            /*<<camlinternalFormat.ml 1482 4>>*/  /*<<camlinternalFormat.ml 1482 4>>*/ var
            rest=
             fmt$0[1];
            /*<<camlinternalFormat.ml 1482 4>>*/ return function(c)
            { /*<<camlinternalFormat.ml 1483 6>>*/  /*<<camlinternalFormat.ml 1483 6>>*/ var
              new_acc=
               [5,acc$0,c];
              /*<<camlinternalFormat.ml 1484 6>>*/ return  /*<<camlinternalFormat.ml 1484 6>>*/ make_printf
                     (k$0,o,new_acc,rest) /*<<camlinternalFormat.ml 1484 34>>*/ };
          case 1:
            /*<<camlinternalFormat.ml 1486 4>>*/  /*<<camlinternalFormat.ml 1486 4>>*/ var
            rest$0=
             fmt$0[1];
            /*<<camlinternalFormat.ml 1486 4>>*/ return function(c)
            { /*<<char.ml 28 14>>*/ if(40<=c)
              if(92===c)var str=_f_,switch$0=2;else var switch$0=127<=c?0:1;
             else
              if(32<=c)
               if(39<=c)var str=_g_,switch$0=2;else var switch$0=1;
              else
               if(14<=c)
                var switch$0=0;
               else
                switch(c)
                 {case 8:var str=_h_,switch$0=2;break;
                  case 9:var str=_i_,switch$0=2;break;
                  case 10:var str=_j_,switch$0=2;break;
                  case 13:var str=_k_,switch$0=2;break;
                  default:var switch$0=0}
              /*<<camlinternalFormatBasics.ml 521 8>>*/ switch(switch$0)
              {case 0:
                 /*<<char.ml 41 6>>*/  /*<<char.ml 41 6>>*/ var
                 s=
                   /*<<char.ml 41 6>>*/ caml_create_string(4);
                 /*<<char.ml 42 6>>*/  /*<<char.ml 42 6>>*/ caml_string_unsafe_set
                 (s,0,92);
                 /*<<char.ml 43 6>>*/  /*<<char.ml 43 6>>*/ caml_string_unsafe_set
                 (s,1,48+(c/100|0)|0);
                 /*<<char.ml 44 6>>*/  /*<<char.ml 44 6>>*/ caml_string_unsafe_set
                 (s,2,48+((c/10|0)%10|0)|0);
                 /*<<char.ml 45 6>>*/  /*<<char.ml 45 6>>*/ caml_string_unsafe_set
                 (s,3,48+(c%10|0)|0);
                 /*<<char.ml 41 6>>*/ var str=s;
                break;
               case 1:
                 /*<<char.ml 36 6>>*/  /*<<char.ml 36 6>>*/ var
                 s$0=
                   /*<<char.ml 36 6>>*/ caml_create_string(1);
                 /*<<char.ml 37 6>>*/  /*<<char.ml 37 6>>*/ caml_string_unsafe_set
                 (s$0,0,c);
                 /*<<char.ml 36 6>>*/ var str=s$0;
                break
               }
              /*<<camlinternalFormat.ml 1456 2>>*/ var
               /*<<camlinternalFormat.ml 1456 2>>*/ l=
                /*<<camlinternalFormat.ml 1456 2>>*/ caml_ml_string_length
                (str),
               /*<<camlinternalFormat.ml 1457 12>>*/ res=
                /*<<camlinternalFormat.ml 1457 12>>*/ make(l+2|0,39);
              /*<<camlinternalFormat.ml 1458 2>>*/  /*<<camlinternalFormat.ml 1458 2>>*/ caml_blit_string
              (str,0,res,1,l);
              /*<<camlinternalFormat.ml 1456 2>>*/  /*<<camlinternalFormat.ml 1487 60>>*/ var
              new_acc=
               [4,acc$0,res];
              /*<<camlinternalFormat.ml 1488 6>>*/ return  /*<<camlinternalFormat.ml 1488 6>>*/ make_printf
                     (k$0,o,new_acc,rest$0) /*<<camlinternalFormat.ml 1488 34>>*/ };
          case 2:
           var rest$1=fmt$0[2],pad=fmt$0[1];
            /*<<camlinternalFormat.ml 1490 4>>*/ return  /*<<camlinternalFormat.ml 1490 4>>*/ make_string_padding
                   (k$0,
                    o,
                    acc$0,
                    rest$1,
                    pad,
                    function(str)
                     { /*<<camlinternalFormat.ml 1490 53>>*/ return str /*<<camlinternalFormat.ml 1490 56>>*/ });
          case 3:
           var rest$2=fmt$0[2],pad$0=fmt$0[1];
            /*<<camlinternalFormat.ml 1492 4>>*/ return  /*<<camlinternalFormat.ml 1492 4>>*/ make_string_padding
                   (k$0,o,acc$0,rest$2,pad$0,string_to_caml_string);
          case 4:
           var rest$3=fmt$0[4],prec=fmt$0[3],pad$1=fmt$0[2],iconv=fmt$0[1];
            /*<<camlinternalFormat.ml 1494 4>>*/ return  /*<<camlinternalFormat.ml 1494 4>>*/ make_int_padding_precision
                   (k$0,o,acc$0,rest$3,pad$1,prec,convert_int,iconv);
          case 5:
           var
            rest$4=fmt$0[4],
            prec$0=fmt$0[3],
            pad$2=fmt$0[2],
            iconv$0=fmt$0[1];
            /*<<camlinternalFormat.ml 1496 4>>*/ return  /*<<camlinternalFormat.ml 1496 4>>*/ make_int_padding_precision
                   (k$0,o,acc$0,rest$4,pad$2,prec$0,convert_int32,iconv$0);
          case 6:
           var
            rest$5=fmt$0[4],
            prec$1=fmt$0[3],
            pad$3=fmt$0[2],
            iconv$1=fmt$0[1];
            /*<<camlinternalFormat.ml 1498 4>>*/ return  /*<<camlinternalFormat.ml 1498 4>>*/ make_int_padding_precision
                   (k$0,o,acc$0,rest$5,pad$3,prec$1,convert_nativeint,iconv$1);
          case 7:
           var
            rest$6=fmt$0[4],
            prec$2=fmt$0[3],
            pad$4=fmt$0[2],
            iconv$2=fmt$0[1];
            /*<<camlinternalFormat.ml 1500 4>>*/ return  /*<<camlinternalFormat.ml 1500 4>>*/ make_int_padding_precision
                   (k$0,o,acc$0,rest$6,pad$4,prec$2,convert_int64,iconv$2);
          case 8:
           var rest$7=fmt$0[4],prec$3=fmt$0[3],pad$5=fmt$0[2],fconv=fmt$0[1];
            /*<<camlinternalFormat.ml 1697 36>>*/ if(typeof pad$5==="number")
            {if(typeof prec$3==="number")
              return 0===prec$3
                      ?function(x)
                        { /*<<camlinternalFormat.ml 1700 16>>*/  /*<<camlinternalFormat.ml 1700 16>>*/ var
                          str=
                            /*<<camlinternalFormat.ml 1700 16>>*/ convert_float
                            (fconv,default_float_precision,x);
                          /*<<camlinternalFormat.ml 1701 6>>*/ return  /*<<camlinternalFormat.ml 1701 6>>*/ make_printf
                                 (k$0,o,[4,acc$0,str],rest$7) /*<<camlinternalFormat.ml 1701 54>>*/ }
                      :function(p,x)
                        { /*<<camlinternalFormat.ml 1708 16>>*/  /*<<camlinternalFormat.ml 1708 16>>*/ var
                          str=
                            /*<<camlinternalFormat.ml 1708 16>>*/ convert_float
                            (fconv,p,x);
                          /*<<camlinternalFormat.ml 1709 6>>*/ return  /*<<camlinternalFormat.ml 1709 6>>*/ make_printf
                                 (k$0,o,[4,acc$0,str],rest$7) /*<<camlinternalFormat.ml 1709 54>>*/ };
              /*<<camlinternalFormat.ml 1703 4>>*/  /*<<camlinternalFormat.ml 1703 4>>*/ var
              p=
               prec$3[1];
              /*<<camlinternalFormat.ml 1703 4>>*/ return function(x)
              { /*<<camlinternalFormat.ml 1704 16>>*/  /*<<camlinternalFormat.ml 1704 16>>*/ var
                str=
                  /*<<camlinternalFormat.ml 1704 16>>*/ convert_float
                  (fconv,p,x);
                /*<<camlinternalFormat.ml 1705 6>>*/ return  /*<<camlinternalFormat.ml 1705 6>>*/ make_printf
                       (k$0,o,[4,acc$0,str],rest$7) /*<<camlinternalFormat.ml 1705 54>>*/ }}
           else
            { /*<<camlinternalFormat.ml 1697 36>>*/ if(0===pad$5[0])
              {var _h2_=pad$5[2],_h3_=pad$5[1];
               if(typeof prec$3==="number")
                return 0===prec$3
                        ?function(x)
                          { /*<<camlinternalFormat.ml 1712 16>>*/ var
                             /*<<camlinternalFormat.ml 1712 16>>*/ str=
                              /*<<camlinternalFormat.ml 1712 16>>*/ convert_float
                              (fconv,default_float_precision,x),
                             /*<<camlinternalFormat.ml 1713 17>>*/ str$0=
                              /*<<camlinternalFormat.ml 1713 17>>*/ fix_padding
                              (_h3_,_h2_,str);
                            /*<<camlinternalFormat.ml 1714 6>>*/ return  /*<<camlinternalFormat.ml 1714 6>>*/ make_printf
                                   (k$0,o,[4,acc$0,str$0],rest$7) /*<<camlinternalFormat.ml 1714 55>>*/ }
                        :function(p,x)
                          { /*<<camlinternalFormat.ml 1721 16>>*/  /*<<camlinternalFormat.ml 1721 16>>*/ var
                            str=
                              /*<<camlinternalFormat.ml 1721 16>>*/ fix_padding
                              (_h3_,
                               _h2_,
                                /*<<camlinternalFormat.ml 1721 36>>*/ convert_float
                                (fconv,p,x));
                            /*<<camlinternalFormat.ml 1722 6>>*/ return  /*<<camlinternalFormat.ml 1722 6>>*/ make_printf
                                   (k$0,o,[4,acc$0,str],rest$7) /*<<camlinternalFormat.ml 1722 54>>*/ };
               var p$0=prec$3[1];
                /*<<camlinternalFormat.ml 1716 4>>*/ return function(x)
                { /*<<camlinternalFormat.ml 1717 16>>*/  /*<<camlinternalFormat.ml 1717 16>>*/ var
                  str=
                    /*<<camlinternalFormat.ml 1717 16>>*/ fix_padding
                    (_h3_,
                     _h2_,
                      /*<<camlinternalFormat.ml 1717 36>>*/ convert_float
                      (fconv,p$0,x));
                  /*<<camlinternalFormat.ml 1718 6>>*/ return  /*<<camlinternalFormat.ml 1718 6>>*/ make_printf
                         (k$0,o,[4,acc$0,str],rest$7) /*<<camlinternalFormat.ml 1718 54>>*/ }}
             var _h4_=pad$5[1];
             if(typeof prec$3==="number")
              return 0===prec$3
                      ?function(w,x)
                        { /*<<camlinternalFormat.ml 1725 16>>*/ var
                           /*<<camlinternalFormat.ml 1725 16>>*/ str=
                            /*<<camlinternalFormat.ml 1725 16>>*/ convert_float
                            (fconv,default_float_precision,x),
                           /*<<camlinternalFormat.ml 1726 17>>*/ str$0=
                            /*<<camlinternalFormat.ml 1726 17>>*/ fix_padding
                            (_h4_,w,str);
                          /*<<camlinternalFormat.ml 1727 6>>*/ return  /*<<camlinternalFormat.ml 1727 6>>*/ make_printf
                                 (k$0,o,[4,acc$0,str$0],rest$7) /*<<camlinternalFormat.ml 1727 55>>*/ }
                      :function(w,p,x)
                        { /*<<camlinternalFormat.ml 1734 16>>*/  /*<<camlinternalFormat.ml 1734 16>>*/ var
                          str=
                            /*<<camlinternalFormat.ml 1734 16>>*/ fix_padding
                            (_h4_,
                             w,
                              /*<<camlinternalFormat.ml 1734 36>>*/ convert_float
                              (fconv,p,x));
                          /*<<camlinternalFormat.ml 1735 6>>*/ return  /*<<camlinternalFormat.ml 1735 6>>*/ make_printf
                                 (k$0,o,[4,acc$0,str],rest$7) /*<<camlinternalFormat.ml 1735 54>>*/ };
             var p$1=prec$3[1];
              /*<<camlinternalFormat.ml 1729 4>>*/ return function(w,x)
              { /*<<camlinternalFormat.ml 1730 16>>*/  /*<<camlinternalFormat.ml 1730 16>>*/ var
                str=
                  /*<<camlinternalFormat.ml 1730 16>>*/ fix_padding
                  (_h4_,
                   w,
                    /*<<camlinternalFormat.ml 1730 36>>*/ convert_float
                    (fconv,p$1,x));
                /*<<camlinternalFormat.ml 1731 6>>*/ return  /*<<camlinternalFormat.ml 1731 6>>*/ make_printf
                       (k$0,o,[4,acc$0,str],rest$7) /*<<camlinternalFormat.ml 1731 54>>*/ }}
          case 9:
            /*<<camlinternalFormat.ml 1504 4>>*/  /*<<camlinternalFormat.ml 1504 4>>*/ var
            rest$8=
             fmt$0[1];
            /*<<camlinternalFormat.ml 1504 4>>*/ return function(b)
            { /*<<pervasives.ml 238 2>>*/  /*<<pervasives.ml 238 2>>*/ var
              _h6_=
               b?_b_:_c_;
              /*<<camlinternalFormat.ml 1504 68>>*/ return  /*<<camlinternalFormat.ml 1504 68>>*/ make_printf
                     (k$0,o,[4,acc$0,_h6_],rest$8) /*<<camlinternalFormat.ml 1504 75>>*/ };
          case 10:
            /*<<camlinternalFormat.ml 1522 4>>*/ var
             /*<<camlinternalFormat.ml 1522 4>>*/ rest$9=fmt$0[1],
             /*<<camlinternalFormat.ml 1522 4>>*/ acc$1=[7,acc$0],
            acc$0=acc$1,
            fmt$0=rest$9;
           continue;
          case 11:
            /*<<camlinternalFormat.ml 1525 4>>*/ var
            rest$10=fmt$0[2],
            str=fmt$0[1],
             /*<<camlinternalFormat.ml 1525 4>>*/ acc$2=[2,acc$0,str],
            acc$0=acc$2,
            fmt$0=rest$10;
           continue;
          case 12:
            /*<<camlinternalFormat.ml 1527 4>>*/ var
            rest$11=fmt$0[2],
            chr=fmt$0[1],
             /*<<camlinternalFormat.ml 1527 4>>*/ acc$3=[3,acc$0,chr],
            acc$0=acc$3,
            fmt$0=rest$11;
           continue;
          case 13:
            /*<<camlinternalFormat.ml 1463 12>>*/ var
            rest$12=fmt$0[3],
            sub_fmtty=fmt$0[2],
             /*<<camlinternalFormat.ml 1463 12>>*/ buf=
              /*<<camlinternalFormat.ml 1463 12>>*/ buffer_create(16);
            /*<<camlinternalFormat.ml 1464 2>>*/  /*<<camlinternalFormat.ml 1464 2>>*/ bprint_fmtty
            (buf,sub_fmtty);
            /*<<camlinternalFormat.ml 1463 12>>*/  /*<<camlinternalFormat.ml 1464 24>>*/ var
            ty=
              /*<<camlinternalFormat.ml 1464 24>>*/ buffer_contents(buf);
            /*<<camlinternalFormat.ml 1531 4>>*/ return function(str)
            { /*<<camlinternalFormat.ml 1533 6>>*/ return  /*<<camlinternalFormat.ml 1533 6>>*/ make_printf
                     (k$0,o,[4,acc$0,ty],rest$12) /*<<camlinternalFormat.ml 1533 54>>*/ };
          case 14:
           var rest$13=fmt$0[3],fmtty=fmt$0[2];
            /*<<camlinternalFormat.ml 1535 4>>*/ return function(param)
            { /*<<camlinternalFormat.ml 1535 4>>*/ var
               /*<<camlinternalFormat.ml 1535 4>>*/ fmt$0=param[1],
               /*<<camlinternalFormat.ml 1302 18>>*/ fmtty$0=
                /*<<camlinternalFormat.ml 1302 18>>*/ erase_rel
                ( /*<<camlinternalFormat.ml 1302 29>>*/ symm(fmtty)),
               /*<<camlinternalFormat.ml 1002 25>>*/ _h5_=
                /*<<camlinternalFormat.ml 1002 25>>*/ type_format_gen
                (fmt$0,fmtty$0);
              /*<<camlinternalFormat.ml 1002 50>>*/ if
              (typeof _h5_[2]==="number")
              { /*<<camlinternalFormat.ml 1003 42>>*/  /*<<camlinternalFormat.ml 1003 42>>*/ var
                fmt=
                 _h5_[1];
                /*<<camlinternalFormat.ml 1536 42>>*/ return  /*<<camlinternalFormat.ml 1536 42>>*/ make_printf
                       (k$0,
                        o,
                        acc$0,
                         /*<<camlinternalFormat.ml 1536 6>>*/ concat_fmt
                         (fmt,rest$13))}
              /*<<camlinternalFormat.ml 1004 28>>*/ throw Type_mismatch /*<<camlinternalFormat.ml 1536 42>>*/ };
          case 15:
            /*<<camlinternalFormat.ml 1506 4>>*/  /*<<camlinternalFormat.ml 1506 4>>*/ var
            rest$14=
             fmt$0[1];
            /*<<camlinternalFormat.ml 1506 4>>*/ return function(f,x)
            { /*<<camlinternalFormat.ml 1506 15>>*/ return  /*<<camlinternalFormat.ml 1506 15>>*/ make_printf
                     (k$0,
                      o,
                      [6,
                       acc$0,
                       function(o)
                        { /*<<camlinternalFormat.ml 1506 57>>*/ return  /*<<camlinternalFormat.ml 1506 57>>*/ caml_call2
                                 (f,o,x) /*<<camlinternalFormat.ml 1506 62>>*/ }],
                      rest$14) /*<<camlinternalFormat.ml 1506 69>>*/ };
          case 16:
            /*<<camlinternalFormat.ml 1508 4>>*/  /*<<camlinternalFormat.ml 1508 4>>*/ var
            rest$15=
             fmt$0[1];
            /*<<camlinternalFormat.ml 1508 4>>*/ return function(f)
            { /*<<camlinternalFormat.ml 1508 13>>*/ return  /*<<camlinternalFormat.ml 1508 13>>*/ make_printf
                     (k$0,o,[6,acc$0,f],rest$15) /*<<camlinternalFormat.ml 1508 54>>*/ };
          case 17:
            /*<<camlinternalFormat.ml 1556 4>>*/ var
            rest$16=fmt$0[2],
            fmting_lit=fmt$0[1],
             /*<<camlinternalFormat.ml 1556 4>>*/ acc$4=[0,acc$0,fmting_lit],
            acc$0=acc$4,
            fmt$0=rest$16;
           continue;
          case 18:
           var _h1_=fmt$0[1];
           if(0===_h1_[0])
            { /*<<camlinternalFormat.ml 1558 4>>*/ var
              rest$17=fmt$0[2],
              match=_h1_[1],
              fmt$1=match[1],
               /*<<camlinternalFormat.ml 1558 4>>*/ k$3=
               function(acc,k,rest)
                {function k$0(koc,kacc)
                  { /*<<camlinternalFormat.ml 1559 6>>*/ return  /*<<camlinternalFormat.ml 1559 6>>*/ make_printf
                           (k,koc,[1,acc,[0,kacc]],rest) /*<<camlinternalFormat.ml 1559 74>>*/ }
                 return k$0},
               /*<<camlinternalFormat.ml 1558 4>>*/ k$1=
                /*<<camlinternalFormat.ml 1558 4>>*/ k$3(acc$0,k$0,rest$17),
              k$0=k$1,
              acc$0=0,
              fmt$0=fmt$1;
             continue}
            /*<<camlinternalFormat.ml 1562 4>>*/ var
            rest$18=fmt$0[2],
            match$0=_h1_[1],
            fmt$2=match$0[1],
             /*<<camlinternalFormat.ml 1562 4>>*/ k$4=
             function(acc,k,rest)
              {function k$0(koc,kacc)
                { /*<<camlinternalFormat.ml 1563 6>>*/ return  /*<<camlinternalFormat.ml 1563 6>>*/ make_printf
                         (k,koc,[1,acc,[1,kacc]],rest) /*<<camlinternalFormat.ml 1563 74>>*/ }
               return k$0},
             /*<<camlinternalFormat.ml 1562 4>>*/ k$2=
              /*<<camlinternalFormat.ml 1562 4>>*/ k$4(acc$0,k$0,rest$18),
            k$0=k$2,
            acc$0=0,
            fmt$0=fmt$2;
           continue;
          case 19:
            /*<<camlinternalFormat.ml 1520 16>>*/ throw [0,
                  Assert_failure,
                  _bk_];
          case 20:
            /*<<camlinternalFormat.ml 1539 4>>*/ var
            rest$19=fmt$0[3],
             /*<<camlinternalFormat.ml 1539 4>>*/ new_acc=[8,acc$0,_bl_];
            /*<<camlinternalFormat.ml 1540 4>>*/ return function(param)
            { /*<<camlinternalFormat.ml 1540 13>>*/ return  /*<<camlinternalFormat.ml 1540 13>>*/ make_printf
                     (k$0,o,new_acc,rest$19) /*<<camlinternalFormat.ml 1540 41>>*/ };
          case 21:
            /*<<camlinternalFormat.ml 1545 4>>*/  /*<<camlinternalFormat.ml 1545 4>>*/ var
            rest$20=
             fmt$0[2];
            /*<<camlinternalFormat.ml 1545 4>>*/ return function(n)
            { /*<<camlinternalFormat.ml 1546 59>>*/  /*<<camlinternalFormat.ml 1546 59>>*/ var
              new_acc=
               [4,
                acc$0,
                 /*<<camlinternalFormat.ml 1546 42>>*/ caml_format_int(_bm_,n)];
              /*<<camlinternalFormat.ml 1547 6>>*/ return  /*<<camlinternalFormat.ml 1547 6>>*/ make_printf
                     (k$0,o,new_acc,rest$20) /*<<camlinternalFormat.ml 1547 34>>*/ };
          case 22:
            /*<<camlinternalFormat.ml 1549 4>>*/  /*<<camlinternalFormat.ml 1549 4>>*/ var
            rest$21=
             fmt$0[1];
            /*<<camlinternalFormat.ml 1549 4>>*/ return function(c)
            { /*<<camlinternalFormat.ml 1550 6>>*/  /*<<camlinternalFormat.ml 1550 6>>*/ var
              new_acc=
               [5,acc$0,c];
              /*<<camlinternalFormat.ml 1551 6>>*/ return  /*<<camlinternalFormat.ml 1551 6>>*/ make_printf
                     (k$0,o,new_acc,rest$21) /*<<camlinternalFormat.ml 1551 34>>*/ };
          case 23:
           var rest$22=fmt$0[2],ign=fmt$0[1];
            /*<<camlinternalFormat.ml 1575 23>>*/ if(typeof ign==="number")
             /*<<camlinternalFormat.ml 1575 23>>*/ switch(ign)
             {case 0:
                /*<<camlinternalFormat.ml 1576 39>>*/ return  /*<<camlinternalFormat.ml 1576 39>>*/ make_invalid_arg
                       (k$0,o,acc$0,rest$22);
              case 1:
                /*<<camlinternalFormat.ml 1577 39>>*/ return  /*<<camlinternalFormat.ml 1577 39>>*/ make_invalid_arg
                       (k$0,o,acc$0,rest$22);
              case 2:
                /*<<camlinternalFormat.ml 1585 39>>*/ return  /*<<camlinternalFormat.ml 1585 39>>*/ make_invalid_arg
                       (k$0,o,acc$0,rest$22);
              case 3:
                /*<<camlinternalFormat.ml 1588 51>>*/ throw [0,
                      Assert_failure,
                      _bn_];
              default:
                /*<<camlinternalFormat.ml 1591 39>>*/ return  /*<<camlinternalFormat.ml 1591 39>>*/ make_invalid_arg
                       (k$0,o,acc$0,rest$22)}
           else
             /*<<camlinternalFormat.ml 1575 23>>*/ switch(ign[0])
             {case 0:
                /*<<camlinternalFormat.ml 1578 39>>*/ return  /*<<camlinternalFormat.ml 1578 39>>*/ make_invalid_arg
                       (k$0,o,acc$0,rest$22);
              case 1:
                /*<<camlinternalFormat.ml 1579 39>>*/ return  /*<<camlinternalFormat.ml 1579 39>>*/ make_invalid_arg
                       (k$0,o,acc$0,rest$22);
              case 2:
                /*<<camlinternalFormat.ml 1580 39>>*/ return  /*<<camlinternalFormat.ml 1580 39>>*/ make_invalid_arg
                       (k$0,o,acc$0,rest$22);
              case 3:
                /*<<camlinternalFormat.ml 1581 39>>*/ return  /*<<camlinternalFormat.ml 1581 39>>*/ make_invalid_arg
                       (k$0,o,acc$0,rest$22);
              case 4:
                /*<<camlinternalFormat.ml 1582 39>>*/ return  /*<<camlinternalFormat.ml 1582 39>>*/ make_invalid_arg
                       (k$0,o,acc$0,rest$22);
              case 5:
                /*<<camlinternalFormat.ml 1583 39>>*/ return  /*<<camlinternalFormat.ml 1583 39>>*/ make_invalid_arg
                       (k$0,o,acc$0,rest$22);
              case 6:
                /*<<camlinternalFormat.ml 1584 39>>*/ return  /*<<camlinternalFormat.ml 1584 39>>*/ make_invalid_arg
                       (k$0,o,acc$0,rest$22);
              case 7:
                /*<<camlinternalFormat.ml 1586 39>>*/ return  /*<<camlinternalFormat.ml 1586 39>>*/ make_invalid_arg
                       (k$0,o,acc$0,rest$22);
              case 8:
                /*<<camlinternalFormat.ml 1587 39>>*/  /*<<camlinternalFormat.ml 1587 39>>*/ var
                fmtty$0=
                 ign[2];
                /*<<camlinternalFormat.ml 1587 39>>*/ return  /*<<camlinternalFormat.ml 1587 39>>*/ make_from_fmtty
                       (k$0,o,acc$0,fmtty$0,rest$22);
              case 9:
                /*<<camlinternalFormat.ml 1589 39>>*/ return  /*<<camlinternalFormat.ml 1589 39>>*/ make_invalid_arg
                       (k$0,o,acc$0,rest$22);
              default:
                /*<<camlinternalFormat.ml 1590 39>>*/ return  /*<<camlinternalFormat.ml 1590 39>>*/ make_invalid_arg
                       (k$0,o,acc$0,rest$22)}
          default:
           var rest$23=fmt$0[3],f=fmt$0[2],arity=fmt$0[1];
            /*<<camlinternalFormat.ml 1510 41>>*/ return  /*<<camlinternalFormat.ml 1510 41>>*/ make_custom
                   (k$0,
                    o,
                    acc$0,
                    rest$23,
                    arity,
                     /*<<camlinternalFormat.ml 1510 35>>*/ caml_call1(f,0))} /*<<camlinternalFormat.ml 1567 11>>*/ }
    function make_from_fmtty(k,o,acc,fmtty,fmt)
     { /*<<camlinternalFormat.ml 1599 25>>*/ if(typeof fmtty==="number")
        /*<<camlinternalFormat.ml 1614 31>>*/ return  /*<<camlinternalFormat.ml 1614 31>>*/ make_invalid_arg
               (k,o,acc,fmt);
      else
        /*<<camlinternalFormat.ml 1599 25>>*/ switch(fmtty[0])
        {case 0:
           /*<<camlinternalFormat.ml 1600 31>>*/  /*<<camlinternalFormat.ml 1600 31>>*/ var
           rest=
            fmtty[1];
           /*<<camlinternalFormat.ml 1600 31>>*/ return function(param)
           { /*<<camlinternalFormat.ml 1600 40>>*/ return  /*<<camlinternalFormat.ml 1600 40>>*/ make_from_fmtty
                    (k,o,acc,rest,fmt) /*<<camlinternalFormat.ml 1600 72>>*/ };
         case 1:
           /*<<camlinternalFormat.ml 1601 31>>*/  /*<<camlinternalFormat.ml 1601 31>>*/ var
           rest$0=
            fmtty[1];
           /*<<camlinternalFormat.ml 1601 31>>*/ return function(param)
           { /*<<camlinternalFormat.ml 1601 40>>*/ return  /*<<camlinternalFormat.ml 1601 40>>*/ make_from_fmtty
                    (k,o,acc,rest$0,fmt) /*<<camlinternalFormat.ml 1601 72>>*/ };
         case 2:
           /*<<camlinternalFormat.ml 1602 31>>*/  /*<<camlinternalFormat.ml 1602 31>>*/ var
           rest$1=
            fmtty[1];
           /*<<camlinternalFormat.ml 1602 31>>*/ return function(param)
           { /*<<camlinternalFormat.ml 1602 40>>*/ return  /*<<camlinternalFormat.ml 1602 40>>*/ make_from_fmtty
                    (k,o,acc,rest$1,fmt) /*<<camlinternalFormat.ml 1602 72>>*/ };
         case 3:
           /*<<camlinternalFormat.ml 1603 31>>*/  /*<<camlinternalFormat.ml 1603 31>>*/ var
           rest$2=
            fmtty[1];
           /*<<camlinternalFormat.ml 1603 31>>*/ return function(param)
           { /*<<camlinternalFormat.ml 1603 40>>*/ return  /*<<camlinternalFormat.ml 1603 40>>*/ make_from_fmtty
                    (k,o,acc,rest$2,fmt) /*<<camlinternalFormat.ml 1603 72>>*/ };
         case 4:
           /*<<camlinternalFormat.ml 1604 31>>*/  /*<<camlinternalFormat.ml 1604 31>>*/ var
           rest$3=
            fmtty[1];
           /*<<camlinternalFormat.ml 1604 31>>*/ return function(param)
           { /*<<camlinternalFormat.ml 1604 40>>*/ return  /*<<camlinternalFormat.ml 1604 40>>*/ make_from_fmtty
                    (k,o,acc,rest$3,fmt) /*<<camlinternalFormat.ml 1604 72>>*/ };
         case 5:
           /*<<camlinternalFormat.ml 1605 31>>*/  /*<<camlinternalFormat.ml 1605 31>>*/ var
           rest$4=
            fmtty[1];
           /*<<camlinternalFormat.ml 1605 31>>*/ return function(param)
           { /*<<camlinternalFormat.ml 1605 40>>*/ return  /*<<camlinternalFormat.ml 1605 40>>*/ make_from_fmtty
                    (k,o,acc,rest$4,fmt) /*<<camlinternalFormat.ml 1605 72>>*/ };
         case 6:
           /*<<camlinternalFormat.ml 1606 31>>*/  /*<<camlinternalFormat.ml 1606 31>>*/ var
           rest$5=
            fmtty[1];
           /*<<camlinternalFormat.ml 1606 31>>*/ return function(param)
           { /*<<camlinternalFormat.ml 1606 40>>*/ return  /*<<camlinternalFormat.ml 1606 40>>*/ make_from_fmtty
                    (k,o,acc,rest$5,fmt) /*<<camlinternalFormat.ml 1606 72>>*/ };
         case 7:
           /*<<camlinternalFormat.ml 1607 31>>*/  /*<<camlinternalFormat.ml 1607 31>>*/ var
           rest$6=
            fmtty[1];
           /*<<camlinternalFormat.ml 1607 31>>*/ return function(param)
           { /*<<camlinternalFormat.ml 1607 40>>*/ return  /*<<camlinternalFormat.ml 1607 40>>*/ make_from_fmtty
                    (k,o,acc,rest$6,fmt) /*<<camlinternalFormat.ml 1607 72>>*/ };
         case 8:
           /*<<camlinternalFormat.ml 1613 31>>*/  /*<<camlinternalFormat.ml 1613 31>>*/ var
           rest$7=
            fmtty[2];
           /*<<camlinternalFormat.ml 1613 31>>*/ return function(param)
           { /*<<camlinternalFormat.ml 1613 40>>*/ return  /*<<camlinternalFormat.ml 1613 40>>*/ make_from_fmtty
                    (k,o,acc,rest$7,fmt) /*<<camlinternalFormat.ml 1613 72>>*/ };
         case 9:
           /*<<camlinternalFormat.ml 1616 13>>*/ var
           rest$8=fmtty[3],
           ty2=fmtty[2],
           ty1=fmtty[1],
            /*<<camlinternalFormat.ml 1616 13>>*/ ty=
             /*<<camlinternalFormat.ml 1616 13>>*/ trans
             ( /*<<camlinternalFormat.ml 1616 19>>*/ symm(ty1),ty2);
           /*<<camlinternalFormat.ml 1617 4>>*/ return function(param)
           { /*<<camlinternalFormat.ml 1617 59>>*/ return  /*<<camlinternalFormat.ml 1617 59>>*/ make_from_fmtty
                    (k,
                     o,
                     acc,
                      /*<<camlinternalFormat.ml 1617 37>>*/ concat_fmtty
                      (ty,rest$8),
                     fmt) /*<<camlinternalFormat.ml 1617 63>>*/ };
         case 10:
           /*<<camlinternalFormat.ml 1608 31>>*/  /*<<camlinternalFormat.ml 1608 31>>*/ var
           rest$9=
            fmtty[1];
           /*<<camlinternalFormat.ml 1608 31>>*/ return function(param,_h0_)
           { /*<<camlinternalFormat.ml 1608 42>>*/ return  /*<<camlinternalFormat.ml 1608 42>>*/ make_from_fmtty
                    (k,o,acc,rest$9,fmt) /*<<camlinternalFormat.ml 1608 74>>*/ };
         case 11:
           /*<<camlinternalFormat.ml 1609 31>>*/  /*<<camlinternalFormat.ml 1609 31>>*/ var
           rest$10=
            fmtty[1];
           /*<<camlinternalFormat.ml 1609 31>>*/ return function(param)
           { /*<<camlinternalFormat.ml 1609 40>>*/ return  /*<<camlinternalFormat.ml 1609 40>>*/ make_from_fmtty
                    (k,o,acc,rest$10,fmt) /*<<camlinternalFormat.ml 1609 72>>*/ };
         case 12:
           /*<<camlinternalFormat.ml 1610 31>>*/  /*<<camlinternalFormat.ml 1610 31>>*/ var
           rest$11=
            fmtty[1];
           /*<<camlinternalFormat.ml 1610 31>>*/ return function(param)
           { /*<<camlinternalFormat.ml 1610 40>>*/ return  /*<<camlinternalFormat.ml 1610 40>>*/ make_from_fmtty
                    (k,o,acc,rest$11,fmt) /*<<camlinternalFormat.ml 1610 72>>*/ };
         case 13:
           /*<<camlinternalFormat.ml 1611 43>>*/ throw [0,Assert_failure,_bo_];
         default:
           /*<<camlinternalFormat.ml 1612 43>>*/ throw [0,Assert_failure,_bp_]} /*<<camlinternalFormat.ml 1617 63>>*/ }
    function make_invalid_arg(k,o,acc,fmt)
     { /*<<camlinternalFormat.ml 1625 2>>*/ return  /*<<camlinternalFormat.ml 1625 2>>*/ make_printf
              (k,o,[8,acc,_bq_],fmt) /*<<camlinternalFormat.ml 1625 74>>*/ }
    function make_string_padding(k,o,acc,fmt,pad,trans)
     { /*<<camlinternalFormat.ml 1632 31>>*/ if(typeof pad==="number")
        /*<<camlinternalFormat.ml 1634 4>>*/ return function(x)
        { /*<<camlinternalFormat.ml 1635 49>>*/  /*<<camlinternalFormat.ml 1635 49>>*/ var
          new_acc=
           [4,acc, /*<<camlinternalFormat.ml 1635 42>>*/ caml_call1(trans,x)];
          /*<<camlinternalFormat.ml 1636 6>>*/ return  /*<<camlinternalFormat.ml 1636 6>>*/ make_printf
                 (k,o,new_acc,fmt) /*<<camlinternalFormat.ml 1636 33>>*/ };
      else
       { /*<<camlinternalFormat.ml 1632 31>>*/ if(0===pad[0])
         {var width=pad[2],padty=pad[1];
           /*<<camlinternalFormat.ml 1638 4>>*/ return function(x)
           { /*<<camlinternalFormat.ml 1639 75>>*/  /*<<camlinternalFormat.ml 1639 75>>*/ var
             new_acc=
              [4,
               acc,
                /*<<camlinternalFormat.ml 1639 42>>*/ fix_padding
                (padty,
                 width,
                  /*<<camlinternalFormat.ml 1639 66>>*/ caml_call1(trans,x))];
             /*<<camlinternalFormat.ml 1640 6>>*/ return  /*<<camlinternalFormat.ml 1640 6>>*/ make_printf
                    (k,o,new_acc,fmt) /*<<camlinternalFormat.ml 1640 33>>*/ }}
         /*<<camlinternalFormat.ml 1642 4>>*/  /*<<camlinternalFormat.ml 1642 4>>*/ var
         padty$0=
          pad[1];
         /*<<camlinternalFormat.ml 1642 4>>*/ return function(w,x)
         { /*<<camlinternalFormat.ml 1643 71>>*/  /*<<camlinternalFormat.ml 1643 71>>*/ var
           new_acc=
            [4,
             acc,
              /*<<camlinternalFormat.ml 1643 42>>*/ fix_padding
              (padty$0,
               w,
                /*<<camlinternalFormat.ml 1643 62>>*/ caml_call1(trans,x))];
           /*<<camlinternalFormat.ml 1644 6>>*/ return  /*<<camlinternalFormat.ml 1644 6>>*/ make_printf
                  (k,o,new_acc,fmt) /*<<camlinternalFormat.ml 1644 33>>*/ }} /*<<camlinternalFormat.ml 1644 33>>*/ }
    function make_int_padding_precision(k,o,acc,fmt,pad,match,trans,iconv)
     { /*<<camlinternalFormat.ml 1653 42>>*/ if(typeof pad==="number")
       {if(typeof match==="number")
         return 0===match
                 ?function(x)
                   { /*<<camlinternalFormat.ml 1656 16>>*/  /*<<camlinternalFormat.ml 1656 16>>*/ var
                     str=
                       /*<<camlinternalFormat.ml 1656 16>>*/ caml_call2
                       (trans,iconv,x);
                     /*<<camlinternalFormat.ml 1657 6>>*/ return  /*<<camlinternalFormat.ml 1657 6>>*/ make_printf
                            (k,o,[4,acc,str],fmt) /*<<camlinternalFormat.ml 1657 54>>*/ }
                 :function(p,x)
                   { /*<<camlinternalFormat.ml 1664 16>>*/  /*<<camlinternalFormat.ml 1664 16>>*/ var
                     str=
                       /*<<camlinternalFormat.ml 1664 16>>*/ fix_int_precision
                       (p,
                         /*<<camlinternalFormat.ml 1664 36>>*/ caml_call2
                         (trans,iconv,x));
                     /*<<camlinternalFormat.ml 1665 6>>*/ return  /*<<camlinternalFormat.ml 1665 6>>*/ make_printf
                            (k,o,[4,acc,str],fmt) /*<<camlinternalFormat.ml 1665 54>>*/ };
         /*<<camlinternalFormat.ml 1659 4>>*/  /*<<camlinternalFormat.ml 1659 4>>*/ var
         p=
          match[1];
         /*<<camlinternalFormat.ml 1659 4>>*/ return function(x)
         { /*<<camlinternalFormat.ml 1660 16>>*/  /*<<camlinternalFormat.ml 1660 16>>*/ var
           str=
             /*<<camlinternalFormat.ml 1660 16>>*/ fix_int_precision
             (p,
               /*<<camlinternalFormat.ml 1660 36>>*/ caml_call2(trans,iconv,x));
           /*<<camlinternalFormat.ml 1661 6>>*/ return  /*<<camlinternalFormat.ml 1661 6>>*/ make_printf
                  (k,o,[4,acc,str],fmt) /*<<camlinternalFormat.ml 1661 54>>*/ }}
      else
       { /*<<camlinternalFormat.ml 1653 42>>*/ if(0===pad[0])
         {var _hX_=pad[2],_hY_=pad[1];
          if(typeof match==="number")
           return 0===match
                   ?function(x)
                     { /*<<camlinternalFormat.ml 1668 16>>*/  /*<<camlinternalFormat.ml 1668 16>>*/ var
                       str=
                         /*<<camlinternalFormat.ml 1668 16>>*/ fix_padding
                         (_hY_,
                          _hX_,
                           /*<<camlinternalFormat.ml 1668 36>>*/ caml_call2
                           (trans,iconv,x));
                       /*<<camlinternalFormat.ml 1669 6>>*/ return  /*<<camlinternalFormat.ml 1669 6>>*/ make_printf
                              (k,o,[4,acc,str],fmt) /*<<camlinternalFormat.ml 1669 54>>*/ }
                   :function(p,x)
                     { /*<<camlinternalFormat.ml 1676 16>>*/  /*<<camlinternalFormat.ml 1676 16>>*/ var
                       str=
                         /*<<camlinternalFormat.ml 1676 16>>*/ fix_padding
                         (_hY_,
                          _hX_,
                           /*<<camlinternalFormat.ml 1676 36>>*/ fix_int_precision
                           (p,
                             /*<<camlinternalFormat.ml 1676 57>>*/ caml_call2
                             (trans,iconv,x)));
                       /*<<camlinternalFormat.ml 1677 6>>*/ return  /*<<camlinternalFormat.ml 1677 6>>*/ make_printf
                              (k,o,[4,acc,str],fmt) /*<<camlinternalFormat.ml 1677 54>>*/ };
          var p$0=match[1];
           /*<<camlinternalFormat.ml 1671 4>>*/ return function(x)
           { /*<<camlinternalFormat.ml 1672 16>>*/  /*<<camlinternalFormat.ml 1672 16>>*/ var
             str=
               /*<<camlinternalFormat.ml 1672 16>>*/ fix_padding
               (_hY_,
                _hX_,
                 /*<<camlinternalFormat.ml 1672 36>>*/ fix_int_precision
                 (p$0,
                   /*<<camlinternalFormat.ml 1672 57>>*/ caml_call2
                   (trans,iconv,x)));
             /*<<camlinternalFormat.ml 1673 6>>*/ return  /*<<camlinternalFormat.ml 1673 6>>*/ make_printf
                    (k,o,[4,acc,str],fmt) /*<<camlinternalFormat.ml 1673 54>>*/ }}
        var _hZ_=pad[1];
        if(typeof match==="number")
         return 0===match
                 ?function(w,x)
                   { /*<<camlinternalFormat.ml 1680 16>>*/  /*<<camlinternalFormat.ml 1680 16>>*/ var
                     str=
                       /*<<camlinternalFormat.ml 1680 16>>*/ fix_padding
                       (_hZ_,
                        w,
                         /*<<camlinternalFormat.ml 1680 36>>*/ caml_call2
                         (trans,iconv,x));
                     /*<<camlinternalFormat.ml 1681 6>>*/ return  /*<<camlinternalFormat.ml 1681 6>>*/ make_printf
                            (k,o,[4,acc,str],fmt) /*<<camlinternalFormat.ml 1681 54>>*/ }
                 :function(w,p,x)
                   { /*<<camlinternalFormat.ml 1688 16>>*/  /*<<camlinternalFormat.ml 1688 16>>*/ var
                     str=
                       /*<<camlinternalFormat.ml 1688 16>>*/ fix_padding
                       (_hZ_,
                        w,
                         /*<<camlinternalFormat.ml 1688 36>>*/ fix_int_precision
                         (p,
                           /*<<camlinternalFormat.ml 1688 57>>*/ caml_call2
                           (trans,iconv,x)));
                     /*<<camlinternalFormat.ml 1689 6>>*/ return  /*<<camlinternalFormat.ml 1689 6>>*/ make_printf
                            (k,o,[4,acc,str],fmt) /*<<camlinternalFormat.ml 1689 54>>*/ };
        var p$1=match[1];
         /*<<camlinternalFormat.ml 1683 4>>*/ return function(w,x)
         { /*<<camlinternalFormat.ml 1684 16>>*/  /*<<camlinternalFormat.ml 1684 16>>*/ var
           str=
             /*<<camlinternalFormat.ml 1684 16>>*/ fix_padding
             (_hZ_,
              w,
               /*<<camlinternalFormat.ml 1684 36>>*/ fix_int_precision
               (p$1,
                 /*<<camlinternalFormat.ml 1684 57>>*/ caml_call2
                 (trans,iconv,x)));
           /*<<camlinternalFormat.ml 1685 6>>*/ return  /*<<camlinternalFormat.ml 1685 6>>*/ make_printf
                  (k,o,[4,acc,str],fmt) /*<<camlinternalFormat.ml 1685 54>>*/ }} /*<<camlinternalFormat.ml 1689 54>>*/ }
    function make_custom(k,o,acc,rest,arity,f)
     { /*<<camlinternalFormat.ml 1740 30>>*/ if(arity)
       { /*<<camlinternalFormat.ml 1743 4>>*/  /*<<camlinternalFormat.ml 1743 4>>*/ var
         arity$0=
          arity[1];
         /*<<camlinternalFormat.ml 1743 4>>*/ return function(x)
         { /*<<camlinternalFormat.ml 1744 42>>*/ return  /*<<camlinternalFormat.ml 1744 42>>*/ make_custom
                  (k,
                   o,
                   acc,
                   rest,
                   arity$0,
                    /*<<camlinternalFormat.ml 1744 37>>*/ caml_call1(f,x)) /*<<camlinternalFormat.ml 1744 42>>*/ }}
       /*<<camlinternalFormat.ml 1741 19>>*/ return  /*<<camlinternalFormat.ml 1741 19>>*/ make_printf
              (k,o,[4,acc,f],rest) /*<<camlinternalFormat.ml 1744 42>>*/ }
    function output_acc(o,acc)
     { /*<<?>>*/ var acc$0=acc;
       /*<<camlinternalFormat.ml 1854 27>>*/ for(;;)
       if(typeof acc$0==="number")
         /*<<camlinternalFormat.ml 1869 32>>*/ return 0;
       else
         /*<<camlinternalFormat.ml 1854 27>>*/ switch(acc$0[0])
         {case 0:
            /*<<camlinternalFormat.ml 1856 12>>*/ var
            fmting_lit=acc$0[2],
            p=acc$0[1],
             /*<<camlinternalFormat.ml 1856 12>>*/ s=
              /*<<camlinternalFormat.ml 1856 12>>*/ string_of_formatting_lit
              (fmting_lit);
            /*<<camlinternalFormat.ml 1857 4>>*/  /*<<camlinternalFormat.ml 1857 4>>*/ output_acc
            (o,p);
            /*<<camlinternalFormat.ml 1857 18>>*/ return  /*<<camlinternalFormat.ml 1857 18>>*/ output_string
                   (o,s);
          case 1:
           var _hV_=acc$0[2],_hW_=acc$0[1];
           if(0===_hV_[0])
            { /*<<camlinternalFormat.ml 1859 4>>*/  /*<<camlinternalFormat.ml 1859 4>>*/ var
              acc$1=
               _hV_[1];
              /*<<camlinternalFormat.ml 1859 4>>*/  /*<<camlinternalFormat.ml 1859 4>>*/ output_acc
              (o,_hW_);
              /*<<camlinternalFormat.ml 1859 20>>*/  /*<<camlinternalFormat.ml 1859 20>>*/ output_string
              (o,_br_);
              /*<<camlinternalFormat.ml 1859 4>>*/ var acc$0=acc$1;
             continue}
           var acc$2=_hV_[1];
            /*<<camlinternalFormat.ml 1861 4>>*/  /*<<camlinternalFormat.ml 1861 4>>*/ output_acc
            (o,_hW_);
            /*<<camlinternalFormat.ml 1861 20>>*/  /*<<camlinternalFormat.ml 1861 20>>*/ output_string
            (o,_bs_);
           var acc$0=acc$2;
           continue;
          case 6:
           var f=acc$0[2],p$2=acc$0[1];
            /*<<camlinternalFormat.ml 1866 32>>*/  /*<<camlinternalFormat.ml 1866 32>>*/ output_acc
            (o,p$2);
            /*<<camlinternalFormat.ml 1866 46>>*/ return  /*<<camlinternalFormat.ml 1866 46>>*/ caml_call1
                   (f,o);
          case 7:
            /*<<camlinternalFormat.ml 1867 32>>*/  /*<<camlinternalFormat.ml 1867 32>>*/ var
            p$3=
             acc$0[1];
            /*<<camlinternalFormat.ml 1867 32>>*/  /*<<camlinternalFormat.ml 1867 32>>*/ output_acc
            (o,p$3);
            /*<<camlinternalFormat.ml 1867 46>>*/ return  /*<<camlinternalFormat.ml 1867 46>>*/ caml_ml_flush
                   (o);
          case 8:
           var msg=acc$0[2],p$4=acc$0[1];
            /*<<camlinternalFormat.ml 1868 32>>*/  /*<<camlinternalFormat.ml 1868 32>>*/ output_acc
            (o,p$4);
            /*<<camlinternalFormat.ml 1868 46>>*/ return  /*<<camlinternalFormat.ml 1868 46>>*/ invalid_arg
                   (msg);
          case 2:
          case 4:
           var s$0=acc$0[2],p$0=acc$0[1];
            /*<<camlinternalFormat.ml 1863 32>>*/  /*<<camlinternalFormat.ml 1863 32>>*/ output_acc
            (o,p$0);
            /*<<camlinternalFormat.ml 1863 46>>*/ return  /*<<camlinternalFormat.ml 1863 46>>*/ output_string
                   (o,s$0);
          default:
           var c=acc$0[2],p$1=acc$0[1];
            /*<<camlinternalFormat.ml 1865 32>>*/  /*<<camlinternalFormat.ml 1865 32>>*/ output_acc
            (o,p$1);
            /*<<camlinternalFormat.ml 1865 46>>*/ return  /*<<camlinternalFormat.ml 1865 46>>*/ caml_ml_output_char
                   (o,c)} /*<<camlinternalFormat.ml 1869 34>>*/ }
    function strput_acc(b,acc)
     { /*<<?>>*/ var acc$0=acc;
       /*<<camlinternalFormat.ml 1895 27>>*/ for(;;)
       if(typeof acc$0==="number")
         /*<<camlinternalFormat.ml 1910 32>>*/ return 0;
       else
         /*<<camlinternalFormat.ml 1895 27>>*/ switch(acc$0[0])
         {case 0:
            /*<<camlinternalFormat.ml 1897 12>>*/ var
            fmting_lit=acc$0[2],
            p=acc$0[1],
             /*<<camlinternalFormat.ml 1897 12>>*/ s=
              /*<<camlinternalFormat.ml 1897 12>>*/ string_of_formatting_lit
              (fmting_lit);
            /*<<camlinternalFormat.ml 1898 4>>*/  /*<<camlinternalFormat.ml 1898 4>>*/ strput_acc
            (b,p);
            /*<<camlinternalFormat.ml 1898 18>>*/ return  /*<<camlinternalFormat.ml 1898 18>>*/ add_string
                   (b,s);
          case 1:
           var _hT_=acc$0[2],_hU_=acc$0[1];
           if(0===_hT_[0])
            { /*<<camlinternalFormat.ml 1900 4>>*/  /*<<camlinternalFormat.ml 1900 4>>*/ var
              acc$1=
               _hT_[1];
              /*<<camlinternalFormat.ml 1900 4>>*/  /*<<camlinternalFormat.ml 1900 4>>*/ strput_acc
              (b,_hU_);
              /*<<camlinternalFormat.ml 1900 20>>*/  /*<<camlinternalFormat.ml 1900 20>>*/ add_string
              (b,_bt_);
              /*<<camlinternalFormat.ml 1900 4>>*/ var acc$0=acc$1;
             continue}
           var acc$2=_hT_[1];
            /*<<camlinternalFormat.ml 1902 4>>*/  /*<<camlinternalFormat.ml 1902 4>>*/ strput_acc
            (b,_hU_);
            /*<<camlinternalFormat.ml 1902 20>>*/  /*<<camlinternalFormat.ml 1902 20>>*/ add_string
            (b,_bu_);
           var acc$0=acc$2;
           continue;
          case 6:
           var f=acc$0[2],p$2=acc$0[1];
            /*<<camlinternalFormat.ml 1907 32>>*/  /*<<camlinternalFormat.ml 1907 32>>*/ strput_acc
            (b,p$2);
            /*<<camlinternalFormat.ml 1907 74>>*/ return  /*<<camlinternalFormat.ml 1907 74>>*/ add_string
                   (b, /*<<camlinternalFormat.ml 1907 68>>*/ caml_call1(f,0));
          case 7:
            /*<<camlinternalFormat.ml 1908 32>>*/ var
             /*<<camlinternalFormat.ml 1908 32>>*/ p$3=acc$0[1],
            acc$0=p$3;
           continue;
          case 8:
           var msg=acc$0[2],p$4=acc$0[1];
            /*<<camlinternalFormat.ml 1909 32>>*/  /*<<camlinternalFormat.ml 1909 32>>*/ strput_acc
            (b,p$4);
            /*<<camlinternalFormat.ml 1909 46>>*/ return  /*<<camlinternalFormat.ml 1909 46>>*/ invalid_arg
                   (msg);
          case 2:
          case 4:
           var s$0=acc$0[2],p$0=acc$0[1];
            /*<<camlinternalFormat.ml 1904 32>>*/  /*<<camlinternalFormat.ml 1904 32>>*/ strput_acc
            (b,p$0);
            /*<<camlinternalFormat.ml 1904 46>>*/ return  /*<<camlinternalFormat.ml 1904 46>>*/ add_string
                   (b,s$0);
          default:
           var c=acc$0[2],p$1=acc$0[1];
            /*<<camlinternalFormat.ml 1906 32>>*/  /*<<camlinternalFormat.ml 1906 32>>*/ strput_acc
            (b,p$1);
            /*<<buffer.ml 78 2>>*/  /*<<buffer.ml 78 2>>*/ var pos=b[2];
            /*<<buffer.ml 79 2>>*/ if(b[3]<=pos)
             /*<<buffer.ml 79 26>>*/ resize(b,1);
            /*<<buffer.ml 79 36>>*/  /*<<buffer.ml 79 36>>*/ caml_string_unsafe_set
            (b[1],pos,c);
            /*<<buffer.ml 81 2>>*/ b[2]=pos+1|0;
            /*<<buffer.ml 81 2>>*/ return 0} /*<<camlinternalFormat.ml 1910 34>>*/ }
    function fprintf(oc,fmt$0)
     { /*<<printf.ml 20 2>>*/ var fmt=fmt$0[1], /*<<printf.ml 20 2>>*/ _hS_=0;
       /*<<printf.ml 20 2>>*/ return  /*<<printf.ml 20 2>>*/ make_printf
              (function(o,acc)
                { /*<<printf.ml 20 28>>*/  /*<<printf.ml 20 28>>*/ output_acc
                  (o,acc);
                  /*<<printf.ml 20 44>>*/ return 0 /*<<printf.ml 20 49>>*/ },
               oc,
               _hS_,
               fmt) /*<<printf.ml 26 43>>*/ }
    function sprintf(fmt$0)
     { /*<<?>>*/ var fmt=fmt$0[1];
       /*<<printf.ml 33 2>>*/ function k(param,acc)
       { /*<<printf.ml 34 4>>*/ var
          /*<<printf.ml 34 4>>*/ n$0=64,
          /*<<buffer.ml 26 1>>*/ n=max_string_length<64?max_string_length:n$0,
          /*<<buffer.ml 27 1>>*/ s=
           /*<<buffer.ml 27 1>>*/ caml_create_string(n),
          /*<<buffer.ml 28 1>>*/ buf=[0,s,0,n,s];
         /*<<printf.ml 35 4>>*/  /*<<printf.ml 35 4>>*/ strput_acc(buf,acc);
         /*<<printf.ml 36 27>>*/ return  /*<<buffer.ml 30 17>>*/ sub_string
                (buf[1],0,buf[2]) /*<<printf.ml 36 27>>*/ }
       /*<<printf.ml 37 2>>*/ return  /*<<printf.ml 37 2>>*/ make_printf
              (k,0,0,fmt) /*<<printf.ml 39 43>>*/ }
    var printers=[0,0];
    function field(x,i$1)
     { /*<<printexc.ml 23 2>>*/  /*<<printexc.ml 23 2>>*/ var f=x[i$1+1];
       /*<<printexc.ml 24 25>>*/ if
       ( /*<<printexc.ml 24 2>>*/ caml_obj_is_block(f))
       { /*<<printexc.ml 26 19>>*/ if
         ( /*<<printexc.ml 26 10>>*/ caml_obj_tag(f)===252)
         return  /*<<printexc.ml 27 4>>*/ caml_call1
                 ( /*<<printexc.ml 27 4>>*/ sprintf(_bv_),f);
         /*<<printexc.ml 28 19>>*/ if
         ( /*<<printexc.ml 28 10>>*/ caml_obj_tag(f)===253)
         { /*<<pervasives.ml 261 42>>*/ var
            /*<<pervasives.ml 261 42>>*/ s=
             /*<<pervasives.ml 261 42>>*/ caml_format_float(_e_,f),
            /*<<pervasives.ml 251 2>>*/ l=
             /*<<pervasives.ml 251 2>>*/ caml_ml_string_length(s),
           i=0;
           /*<<pervasives.ml 253 4>>*/ for(;;)
           { /*<<pervasives.ml 253 4>>*/ if(l<=i)
             return  /*<<pervasives.ml 253 19>>*/ _a_(s,_d_);
             /*<<pervasives.ml 254 10>>*/ var
              /*<<pervasives.ml 254 10>>*/ match=
               /*<<pervasives.ml 254 10>>*/ caml_string_get(s,i),
              /*<<pervasives.ml 254 24>>*/ switch$0=
              48<=match?58<=match?0:1:45===match?1:0;
             /*<<camlinternalFormatBasics.ml 521 8>>*/ if(switch$0)
             { /*<<pervasives.ml 255 26>>*/ var
                /*<<pervasives.ml 255 26>>*/ i$0=i+1|0,
               i=i$0;
              continue}
             /*<<pervasives.ml 256 11>>*/ return s}}
         /*<<printexc.ml 31 4>>*/ return _bw_}
       /*<<printexc.ml 25 4>>*/ return  /*<<printexc.ml 25 4>>*/ caml_call1
              ( /*<<printexc.ml 25 4>>*/ sprintf(_bx_),f) /*<<printexc.ml 31 7>>*/ }
    function other_fields(x,i)
     { /*<<printexc.ml 34 2>>*/ if(x.length-1<=i)return _by_;
       /*<<printexc.ml 35 36>>*/ var
        /*<<printexc.ml 35 36>>*/ _hQ_=
         /*<<printexc.ml 35 36>>*/ other_fields(x,i+1|0),
        /*<<printexc.ml 35 24>>*/ _hR_= /*<<printexc.ml 35 24>>*/ field(x,i);
       /*<<printexc.ml 35 35>>*/ return  /*<<printexc.ml 35 35>>*/ caml_call2
              ( /*<<printexc.ml 35 35>>*/ sprintf(_bz_),_hR_,_hQ_) /*<<printexc.ml 35 58>>*/ }
    function fields(x)
     { /*<<printexc.ml 38 2>>*/  /*<<printexc.ml 38 2>>*/ var n=x.length-1;
       /*<<printexc.ml 38 2>>*/ if(2<n>>>0)
       { /*<<printexc.ml 42 38>>*/ var
          /*<<printexc.ml 42 38>>*/ _hN_=
           /*<<printexc.ml 42 38>>*/ other_fields(x,2),
          /*<<printexc.ml 42 26>>*/ _hO_= /*<<printexc.ml 42 26>>*/ field(x,1);
         /*<<printexc.ml 42 37>>*/ return  /*<<printexc.ml 42 37>>*/ caml_call2
                ( /*<<printexc.ml 42 37>>*/ sprintf(_bA_),_hO_,_hN_)}
      switch(n)
       {case 0: /*<<printexc.ml 39 9>>*/ return _bB_;
        case 1: /*<<printexc.ml 40 9>>*/ return _bC_;
        default:
          /*<<printexc.ml 41 24>>*/  /*<<printexc.ml 41 24>>*/ var
          _hP_=
            /*<<printexc.ml 41 24>>*/ field(x,1);
          /*<<printexc.ml 41 35>>*/ return  /*<<printexc.ml 41 35>>*/ caml_call1
                 ( /*<<printexc.ml 41 35>>*/ sprintf(_bD_),_hP_)} /*<<printexc.ml 42 56>>*/ }
    function to_string(x)
     { /*<<printexc.ml 46 2>>*/ function conv(param)
       { /*<<?>>*/ var param$0=param;
         /*<<printexc.ml 46 17>>*/ for(;;)
         { /*<<printexc.ml 46 17>>*/ if(param$0)
           {var tl=param$0[2],hd=param$0[1];
             /*<<printexc.ml 48 8>>*/ try
             { /*<<printexc.ml 48 19>>*/ var
                /*<<printexc.ml 48 19>>*/ _hL_=
                 /*<<printexc.ml 48 19>>*/ caml_call1(hd,x),
               _hK_=_hL_}
            catch(_hM_){var _hK_=0}
            if(_hK_)
             { /*<<printexc.ml 49 20>>*/  /*<<printexc.ml 49 20>>*/ var
               s=
                _hK_[1];
               /*<<printexc.ml 49 20>>*/ return s}
            var param$0=tl;
            continue}
           /*<<printexc.ml 52 8>>*/ if(x===Out_of_memory)return _bE_;
          if(x===Stack_overflow)return _bF_;
          if(x[1]===Match_failure)
           {var match=x[2],char$0=match[3],line=match[2],file=match[1];
             /*<<printexc.ml 56 12>>*/ return  /*<<printexc.ml 56 12>>*/ caml_call5
                    ( /*<<printexc.ml 56 12>>*/ sprintf(locfmt),
                     file,
                     line,
                     char$0,
                     char$0+5|0,
                     _bG_)}
          if(x[1]===Assert_failure)
           {var
             match$0=x[2],
             char$1=match$0[3],
             line$0=match$0[2],
             file$0=match$0[1];
             /*<<printexc.ml 58 12>>*/ return  /*<<printexc.ml 58 12>>*/ caml_call5
                    ( /*<<printexc.ml 58 12>>*/ sprintf(locfmt),
                     file$0,
                     line$0,
                     char$1,
                     char$1+6|0,
                     _bH_)}
          if(x[1]===Undefined_recursive_module)
           {var
             match$1=x[2],
             char$2=match$1[3],
             line$1=match$1[2],
             file$1=match$1[1];
             /*<<printexc.ml 60 12>>*/ return  /*<<printexc.ml 60 12>>*/ caml_call5
                    ( /*<<printexc.ml 60 12>>*/ sprintf(locfmt),
                     file$1,
                     line$1,
                     char$2,
                     char$2+6|0,
                     _bI_)}
           /*<<printexc.ml 63 24>>*/ if
           (0=== /*<<printexc.ml 63 12>>*/ caml_obj_tag(x))
           { /*<<printexc.ml 66 14>>*/  /*<<printexc.ml 66 14>>*/ var
             constructor=
              x[1][1];
             /*<<printexc.ml 68 38>>*/ return  /*<<printexc.ml 68 38>>*/ _a_
                    (constructor, /*<<printexc.ml 68 28>>*/ fields(x))}
           /*<<printexc.ml 64 15>>*/ return x[1]} /*<<printexc.ml 68 38>>*/ }
       /*<<printexc.ml 69 2>>*/ return  /*<<printexc.ml 69 2>>*/ conv
              (printers[1]) /*<<printexc.ml 69 16>>*/ }
    function convert_raw_backtrace(rbckt)
     { /*<<printexc.ml 108 2>>*/ try
       { /*<<printexc.ml 108 55>>*/  /*<<printexc.ml 108 55>>*/ var
         _hH_=
          [0,
            /*<<printexc.ml 108 11>>*/ map$0
            (function(_hJ_)
              { /*<<?>>*/ return caml_convert_raw_backtrace_slot(_hJ_)},
             rbckt)];
        return _hH_}
      catch(_hI_)
       {_hI_=caml_wrap_exception(_hI_);
        if(_hI_[1]===Failure)return 0;
        throw _hI_} /*<<printexc.ml 109 24>>*/ }
    function print_backtrace(outchan)
     { /*<<printexc.ml 143 30>>*/ var
        /*<<printexc.ml 143 30>>*/ raw_backtrace=
         /*<<printexc.ml 143 30>>*/ caml_get_exception_raw_backtrace(0),
        /*<<printexc.ml 139 36>>*/ backtrace=
         /*<<printexc.ml 139 36>>*/ convert_raw_backtrace(raw_backtrace);
       /*<<printexc.ml 127 2>>*/ if(backtrace)
       { /*<<printexc.ml 132 6>>*/ var
          /*<<printexc.ml 132 6>>*/ a=backtrace[1],
          /*<<printexc.ml 132 6>>*/ _hF_=a.length-1-1|0,
          /*<<printexc.ml 132 6>>*/ _hE_=0;
         /*<<printexc.ml 132 6>>*/ if(!(_hF_<0))
         {var i=_hE_;
           /*<<printexc.ml 133 8>>*/ for(;;)
           { /*<<printexc.ml 133 38>>*/ var
              /*<<printexc.ml 133 38>>*/ slot=
               /*<<printexc.ml 133 38>>*/ caml_check_bound(a,i)[i+1],
              /*<<printexc.ml 112 2>>*/ info$0=
              function(i)
               {function info(is_raise)
                 { /*<<printexc.ml 113 4>>*/ return is_raise
                          ?0===i?_bJ_:_bK_
                          :0===i?_bL_:_bM_ /*<<printexc.ml 116 75>>*/ }
                return info},
              /*<<printexc.ml 112 2>>*/ info=
               /*<<printexc.ml 112 2>>*/ info$0(i);
             /*<<printexc.ml 118 2>>*/ if(0===slot[0])
              /*<<printexc.ml 124 14>>*/ var
              endchar=slot[5],
              startchar=slot[4],
              lineno=slot[3],
              filename=slot[2],
              is_raise=slot[1],
               /*<<printexc.ml 124 14>>*/ _hC_=
                /*<<printexc.ml 124 14>>*/ info(is_raise),
              match=
               [0,
                 /*<<printexc.ml 123 11>>*/ caml_call5
                 ( /*<<printexc.ml 123 11>>*/ sprintf(_bN_),
                  _hC_,
                  filename,
                  lineno,
                  startchar,
                  endchar)];
            else
             if(0===slot[1])
               /*<<printexc.ml 121 42>>*/ var
                /*<<printexc.ml 121 42>>*/ _hD_=
                 /*<<printexc.ml 121 42>>*/ info(0),
               match=
                [0,
                  /*<<printexc.ml 121 11>>*/ caml_call1
                  ( /*<<printexc.ml 121 11>>*/ sprintf(_bO_),_hD_)];
             else
              var match=0;
             /*<<printexc.ml 133 43>>*/ if(match)
             { /*<<printexc.ml 135 24>>*/  /*<<printexc.ml 135 24>>*/ var
               str=
                match[1];
               /*<<printexc.ml 135 24>>*/  /*<<printexc.ml 135 24>>*/ caml_call1
               ( /*<<printexc.ml 135 24>>*/ fprintf(outchan,_bP_),str)}
             /*<<printexc.ml 133 38>>*/ var _hG_=i+1|0;
            if(_hF_!==i){var i=_hG_;continue}
            break}}
         /*<<printexc.ml 129 6>>*/ return 0}
       /*<<printexc.ml 129 6>>*/ return  /*<<printexc.ml 129 6>>*/ fprintf
              (outchan,_bQ_) /*<<printexc.ml 143 52>>*/ }
    function register_printer(fn)
     { /*<<printexc.ml 222 2>>*/ printers[1]=[0,fn,printers[1]];
       /*<<printexc.ml 222 2>>*/ return 0 /*<<printexc.ml 222 29>>*/ }
    var initial_object_size=2;
    function public_method_label(s)
     { /*<<camlinternalOO.ml 71 2>>*/ var
        /*<<camlinternalOO.ml 71 2>>*/ accu=[0,0],
        /*<<camlinternalOO.ml 72 2>>*/ _hz_=
         /*<<camlinternalOO.ml 72 2>>*/ caml_ml_string_length(s)-
        1|
        0,
        /*<<camlinternalOO.ml 71 2>>*/ _hy_=0;
       /*<<camlinternalOO.ml 72 2>>*/ if(!(_hz_<0))
       {var i=_hy_;
         /*<<camlinternalOO.ml 73 4>>*/ for(;;)
         { /*<<camlinternalOO.ml 73 36>>*/  /*<<camlinternalOO.ml 73 36>>*/ var
           _hA_=
             /*<<camlinternalOO.ml 73 36>>*/ caml_string_get(s,i);
           /*<<camlinternalOO.ml 73 41>>*/ accu[1]=(223*accu[1]|0)+_hA_|0;
           /*<<camlinternalOO.ml 73 36>>*/  /*<<camlinternalOO.ml 73 41>>*/ var
           _hB_=
            i+1|0;
          if(_hz_!==i){var i=_hB_;continue}
          break}}
       /*<<camlinternalOO.ml 76 2>>*/ accu[1]=accu[1]&2147483647;
       /*<<camlinternalOO.ml 71 2>>*/  /*<<camlinternalOO.ml 78 2>>*/ var
       tag=
        1073741823<accu[1]?accu[1]+2147483648|0:accu[1];
       /*<<camlinternalOO.ml 80 2>>*/ return tag /*<<camlinternalOO.ml 80 11>>*/ }
    function compare(x,y)
     { /*<<camlinternalOO.ml 85 56>>*/ return  /*<<camlinternalOO.ml 85 56>>*/ caml_string_compare
              (x,y) /*<<camlinternalOO.ml 85 67>>*/ }
    var Vars=_B_([0,compare]);
    function compare$0(x,y)
     { /*<<camlinternalOO.ml 89 56>>*/ return  /*<<camlinternalOO.ml 89 56>>*/ caml_string_compare
              (x,y) /*<<camlinternalOO.ml 89 67>>*/ }
    var Meths=_B_([0,compare$0]);
    function compare$1(x,y)
     { /*<<camlinternalOO.ml 92 55>>*/ return  /*<<camlinternalOO.ml 92 55>>*/ caml_int_compare
              (x,y) /*<<camlinternalOO.ml 92 66>>*/ }
     /*<<camlinternalOO.ml 121 27>>*/ var
     Labs=_B_([0,compare$1]),
     table_count=[0,0],
      /*<<camlinternalOO.ml 121 27>>*/ dummy_met=
       /*<<camlinternalOO.ml 121 27>>*/ caml_obj_block(0,0);
     /*<<camlinternalOO.ml 121 46>>*/ function fit_size(n)
     { /*<<camlinternalOO.ml 126 2>>*/ return 2<n
              ? /*<<camlinternalOO.ml 127 2>>*/ fit_size((n+1|0)/2|0)*2|0
              :n /*<<camlinternalOO.ml 127 24>>*/ }
     /*<<camlinternalOO.ml 121 46>>*/ function new_table(pub_labels)
     { /*<<camlinternalOO.ml 130 2>>*/ table_count[1]++;
       /*<<camlinternalOO.ml 131 2>>*/ var
        /*<<camlinternalOO.ml 131 2>>*/ len=pub_labels.length-1,
        /*<<camlinternalOO.ml 132 2>>*/ methods=
         /*<<camlinternalOO.ml 132 2>>*/ caml_make_vect
         ((len*2|0)+2|0,dummy_met);
       /*<<camlinternalOO.ml 133 2>>*/  /*<<camlinternalOO.ml 133 2>>*/ caml_check_bound
        (methods,0)
       [1]=
      len;
       /*<<camlinternalOO.ml 131 2>>*/  /*<<camlinternalOO.ml 134 36>>*/ var
       _hs_=
        (( /*<<camlinternalOO.ml 134 24>>*/ fit_size(len)*32|0)/8|0)-1|0;
       /*<<camlinternalOO.ml 134 2>>*/  /*<<camlinternalOO.ml 134 2>>*/ caml_check_bound
        (methods,1)
       [2]=
      _hs_;
       /*<<camlinternalOO.ml 131 2>>*/ var
        /*<<camlinternalOO.ml 134 61>>*/ _hu_=len-1|0,
        /*<<camlinternalOO.ml 134 61>>*/ _ht_=0;
       /*<<camlinternalOO.ml 134 61>>*/ if(!(_hu_<0))
       {var i=_ht_;
         /*<<camlinternalOO.ml 135 26>>*/ for(;;)
         { /*<<camlinternalOO.ml 135 65>>*/ var
            /*<<camlinternalOO.ml 135 65>>*/ _hw_=(i*2|0)+3|0,
            /*<<camlinternalOO.ml 135 51>>*/ _hv_=
             /*<<camlinternalOO.ml 135 51>>*/ caml_check_bound(pub_labels,i)
             [i+1];
           /*<<camlinternalOO.ml 135 26>>*/  /*<<camlinternalOO.ml 135 26>>*/ caml_check_bound
            (methods,_hw_)
           [_hw_+1]=
          _hv_;
           /*<<camlinternalOO.ml 135 65>>*/  /*<<camlinternalOO.ml 135 65>>*/ var
           _hx_=
            i+1|0;
          if(_hu_!==i){var i=_hx_;continue}
          break}}
       /*<<camlinternalOO.ml 136 2>>*/ return [0,
              initial_object_size,
              methods,
              Meths[1],
              Labs[1],
              0,
              0,
              Vars[1],
              0] /*<<camlinternalOO.ml 143 32>>*/ }
     /*<<camlinternalOO.ml 121 46>>*/ function resize$0(array,new_size)
     { /*<<camlinternalOO.ml 146 2>>*/ var
        /*<<camlinternalOO.ml 146 2>>*/ len=array[2].length-1,
        /*<<camlinternalOO.ml 147 2>>*/ _hp_=len<new_size?1:0;
       /*<<camlinternalOO.ml 147 2>>*/ if(_hp_)
       { /*<<camlinternalOO.ml 147 30>>*/ var
          /*<<camlinternalOO.ml 147 30>>*/ a2=
           /*<<camlinternalOO.ml 147 30>>*/ caml_make_vect(new_size,dummy_met),
          /*<<camlinternalOO.ml 149 4>>*/ _hq_=array[2],
          /*<<array.ml 74 2>>*/ switch$0=
          0<=len
           ?(_hq_.length-1-len|0)<0
             ?0
             :(a2.length-1-len|0)<0
               ?0
               :( /*<<array.ml 77 7>>*/ caml_array_blit(_hq_,0,a2,0,len),1)
           :0;
         /*<<camlinternalFormatBasics.ml 521 8>>*/ if(!switch$0)
          /*<<array.ml 76 7>>*/ invalid_arg(_p_);
         /*<<camlinternalOO.ml 149 50>>*/ array[2]=a2;
         /*<<camlinternalOO.ml 147 30>>*/ var _hr_=0}
      else
       var _hr_=_hp_;
       /*<<camlinternalOO.ml 130 2>>*/ return _hr_ /*<<camlinternalOO.ml 151 4>>*/ }
     /*<<camlinternalOO.ml 121 46>>*/ var
      /*<<camlinternalOO.ml 121 46>>*/ method_count=[0,0],
      /*<<camlinternalOO.ml 121 46>>*/ inst_var_count=[0,0];
     /*<<camlinternalOO.ml 121 46>>*/ function new_method(table)
     { /*<<camlinternalOO.ml 166 2>>*/  /*<<camlinternalOO.ml 166 2>>*/ var
       index=
        table[2].length-1;
       /*<<camlinternalOO.ml 167 2>>*/  /*<<camlinternalOO.ml 167 2>>*/ resize$0
       (table,index+1|0);
       /*<<camlinternalOO.ml 167 26>>*/ return index /*<<camlinternalOO.ml 168 7>>*/ }
     /*<<camlinternalOO.ml 121 46>>*/ function get_method_label(table,name)
     { /*<<camlinternalOO.ml 171 2>>*/ try
       { /*<<camlinternalOO.ml 172 4>>*/  /*<<camlinternalOO.ml 172 4>>*/ var
         _hn_=
           /*<<camlinternalOO.ml 172 4>>*/ caml_call2(Meths[23],name,table[3]);
        return _hn_}
      catch(_ho_)
       {_ho_=caml_wrap_exception(_ho_);
        if(_ho_===Not_found)
         { /*<<camlinternalOO.ml 174 16>>*/  /*<<camlinternalOO.ml 174 16>>*/ var
           label=
             /*<<camlinternalOO.ml 174 16>>*/ new_method(table);
           /*<<camlinternalOO.ml 175 71>>*/ table[3]=
           /*<<camlinternalOO.ml 175 29>>*/ caml_call3
           (Meths[4],name,label,table[3]);
           /*<<camlinternalOO.ml 176 72>>*/ table[4]=
           /*<<camlinternalOO.ml 176 30>>*/ caml_call3
           (Labs[4],label,1,table[4]);
           /*<<camlinternalOO.ml 177 4>>*/ return label}
         /*<<camlinternalOO.ml 166 2>>*/ throw _ho_} /*<<camlinternalOO.ml 177 9>>*/ }
     /*<<camlinternalOO.ml 121 46>>*/ function new_slot(table)
     { /*<<camlinternalOO.ml 254 2>>*/  /*<<camlinternalOO.ml 254 2>>*/ var
       index=
        table[1];
       /*<<camlinternalOO.ml 255 2>>*/ table[1]=index+1|0;
       /*<<camlinternalOO.ml 256 2>>*/ return index /*<<camlinternalOO.ml 256 7>>*/ }
     /*<<camlinternalOO.ml 121 46>>*/ function new_variable(table,name)
     { /*<<camlinternalOO.ml 259 2>>*/ try
       { /*<<camlinternalOO.ml 259 6>>*/  /*<<camlinternalOO.ml 259 6>>*/ var
         _hl_=
           /*<<camlinternalOO.ml 259 6>>*/ caml_call2(Vars[23],name,table[7]);
        return _hl_}
      catch(_hm_)
       {_hm_=caml_wrap_exception(_hm_);
        if(_hm_===Not_found)
         { /*<<camlinternalOO.ml 261 16>>*/  /*<<camlinternalOO.ml 261 16>>*/ var
           index=
             /*<<camlinternalOO.ml 261 16>>*/ new_slot(table);
           /*<<camlinternalOO.ml 262 17>>*/ if
           ( /*<<camlinternalOO.ml 262 7>>*/ caml_string_notequal(name,_bR_))
           table[7]=
            /*<<camlinternalOO.ml 262 37>>*/ caml_call3
            (Vars[4],name,index,table[7]);
           /*<<camlinternalOO.ml 263 4>>*/ return index}
         /*<<camlinternalOO.ml 254 2>>*/ throw _hm_} /*<<camlinternalOO.ml 263 9>>*/ }
     /*<<camlinternalOO.ml 121 46>>*/ function new_cache(table)
     { /*<<camlinternalOO.ml 508 10>>*/  /*<<camlinternalOO.ml 508 10>>*/ var
       n=
         /*<<camlinternalOO.ml 508 10>>*/ new_method(table);
       /*<<camlinternalOO.ml 509 2>>*/ if(0===(n%2|0))
       var switch$0=0;
      else
       if
        ((2+
          (( /*<<camlinternalOO.ml 510 36>>*/ caml_check_bound(table[2],1)[2]*
            16|
            0)/
           32|
           0)|
          0)<
         n)
        var switch$0=0;
       else
        var
         n$0= /*<<camlinternalOO.ml 511 16>>*/ new_method(table),
         switch$0=1;
       /*<<camlinternalFormatBasics.ml 521 8>>*/ if(!switch$0)var n$0=n;
       /*<<camlinternalOO.ml 513 2>>*/  /*<<camlinternalOO.ml 513 2>>*/ caml_check_bound
        (table[2],n$0)
       [n$0+1]=
      0;
       /*<<camlinternalOO.ml 513 34>>*/ return n$0 /*<<camlinternalOO.ml 514 3>>*/ }
    var Empty$0=[248,_bT_,caml_fresh_oo_id(0)];
    function remove(seq)
     { /*<<src/core/lwt_sequence.ml 51 2>>*/ var
        /*<<src/core/lwt_sequence.ml 51 2>>*/ _hj_=seq[4],
        /*<<src/core/lwt_sequence.ml 51 2>>*/ _hk_=
        _hj_?(seq[4]=0,seq[1][2]=seq[2],seq[2][1]=seq[1],0):_hj_;
      return _hk_ /*<<src/core/lwt_sequence.ml 56 5>>*/ }
    function create(param)
     { /*<<src/core/lwt_sequence.ml 63 2>>*/  /*<<src/core/lwt_sequence.ml 63 2>>*/ var
       seq=
        [];
       /*<<src/core/lwt_sequence.ml 64 2>>*/  /*<<src/core/lwt_sequence.ml 64 2>>*/ caml_update_dummy
       (seq,[0,seq,seq]);
       /*<<src/core/lwt_sequence.ml 64 2>>*/ return seq /*<<src/core/lwt_sequence.ml 64 5>>*/ }
    function is_empty(seq)
     { /*<<src/core/lwt_sequence.ml 66 19>>*/ return seq[2]===seq?1:0 /*<<src/core/lwt_sequence.ml 66 34>>*/ }
    var
     Canceled=[248,_bU_,caml_fresh_oo_id(0)],
     compare$2=caml_compare,
     Int_map=_B_([0,compare$2]),
     current_data=[0,Int_map[1]];
    function repr_rec(t)
     { /*<<src/core/lwt.ml 174 2>>*/  /*<<src/core/lwt.ml 174 2>>*/ var
       _hi_=
        t[1];
       /*<<src/core/lwt.ml 174 2>>*/ if(3===_hi_[0])
       { /*<<src/core/lwt.ml 175 17>>*/ var
          /*<<src/core/lwt.ml 175 17>>*/ t$0=_hi_[1],
          /*<<src/core/lwt.ml 175 27>>*/ t$1=
           /*<<src/core/lwt.ml 175 27>>*/ repr_rec(t$0);
         /*<<src/core/lwt.ml 175 42>>*/ if(t$1!==t$0)t[1]=[3,t$1];
         /*<<src/core/lwt.ml 175 81>>*/ return t$1}
       /*<<src/core/lwt.ml 176 17>>*/ return t /*<<src/core/lwt.ml 176 18>>*/ }
    function repr(t)
     { /*<<src/core/lwt.ml 177 13>>*/ return  /*<<src/core/lwt.ml 177 13>>*/ repr_rec
              (t) /*<<src/core/lwt.ml 177 37>>*/ }
    var
     async_exception_hook=
      [0,
       function(exn)
        { /*<<src/core/lwt.ml 181 9>>*/  /*<<src/core/lwt.ml 181 9>>*/ prerr_string
          (_bV_);
          /*<<src/core/lwt.ml 182 9>>*/  /*<<src/core/lwt.ml 182 9>>*/ prerr_string
          ( /*<<src/core/lwt.ml 182 22>>*/ to_string(exn));
          /*<<pervasives.ml 458 19>>*/  /*<<pervasives.ml 458 19>>*/ caml_ml_output_char
          (stderr,10);
          /*<<src/core/lwt.ml 184 9>>*/  /*<<src/core/lwt.ml 184 9>>*/ print_backtrace
          (stderr);
          /*<<src/core/lwt.ml 185 9>>*/  /*<<src/core/lwt.ml 185 9>>*/ caml_ml_flush
          (stderr);
          /*<<pervasives.ml 520 2>>*/  /*<<pervasives.ml 520 2>>*/ do_at_exit
          (0);
          /*<<pervasives.ml 520 15>>*/ return  /*<<pervasives.ml 520 15>>*/ caml_sys_exit
                 (2) /*<<src/core/lwt.ml 186 15>>*/ }];
    function call_unsafe(f,x)
     { /*<<src/core/lwt.ml 191 2>>*/ try
       { /*<<src/core/lwt.ml 192 4>>*/  /*<<src/core/lwt.ml 192 4>>*/ var
         _hh_=
           /*<<src/core/lwt.ml 192 4>>*/ caml_call1(f,x);
         /*<<src/core/lwt.ml 194 4>>*/ return _hh_}
      catch(exn)
       {exn=caml_wrap_exception(exn);
         /*<<src/core/lwt.ml 194 4>>*/ return  /*<<src/core/lwt.ml 194 4>>*/ caml_call1
                (async_exception_hook[1],exn)} /*<<src/core/lwt.ml 194 29>>*/ }
    function run_waiters_rec(state,ws,rem)
     {var ws$0=ws,rem$0=rem;
       /*<<src/core/lwt.ml 197 2>>*/ for(;;)
       if(typeof ws$0==="number")
         /*<<src/core/lwt.ml 199 8>>*/ return  /*<<src/core/lwt.ml 199 8>>*/ run_waiters_rec_next
                (state,rem$0);
       else
         /*<<src/core/lwt.ml 197 2>>*/ switch(ws$0[0])
         {case 0:
           var _hg_=ws$0[1][1];
           if(_hg_)
            { /*<<src/core/lwt.ml 206 8>>*/  /*<<src/core/lwt.ml 206 8>>*/ var
              f=
               _hg_[1];
              /*<<src/core/lwt.ml 206 8>>*/  /*<<src/core/lwt.ml 206 8>>*/ caml_call1
              (f,state);
              /*<<src/core/lwt.ml 206 15>>*/ return  /*<<src/core/lwt.ml 206 15>>*/ run_waiters_rec_next
                     (state,rem$0)}
            /*<<src/core/lwt.ml 204 8>>*/ return  /*<<src/core/lwt.ml 204 8>>*/ run_waiters_rec_next
                   (state,rem$0);
          case 1:
            /*<<src/core/lwt.ml 201 8>>*/  /*<<src/core/lwt.ml 201 8>>*/ var
            f$0=
             ws$0[1];
            /*<<src/core/lwt.ml 201 8>>*/  /*<<src/core/lwt.ml 201 8>>*/ caml_call1
            (f$0,state);
            /*<<src/core/lwt.ml 201 15>>*/ return  /*<<src/core/lwt.ml 201 15>>*/ run_waiters_rec_next
                   (state,rem$0);
          default:
            /*<<src/core/lwt.ml 209 8>>*/ var
            ws2=ws$0[2],
            ws1=ws$0[1],
             /*<<src/core/lwt.ml 209 8>>*/ rem$1=[0,ws2,rem$0],
            ws$0=ws1,
            rem$0=rem$1;
           continue} /*<<src/core/lwt.ml 209 46>>*/ }
    function run_waiters_rec_next(state,rem)
     { /*<<src/core/lwt.ml 212 2>>*/ if(rem)
       {var rem$0=rem[2],ws=rem[1];
         /*<<src/core/lwt.ml 216 8>>*/ return  /*<<src/core/lwt.ml 216 8>>*/ run_waiters_rec
                (state,ws,rem$0)}
       /*<<src/core/lwt.ml 214 8>>*/ return 0 /*<<src/core/lwt.ml 216 36>>*/ }
    function run_cancel_handlers_rec(chs,rem)
     {var chs$0=chs,rem$0=rem;
       /*<<src/core/lwt.ml 219 2>>*/ for(;;)
       if(typeof chs$0==="number")
         /*<<src/core/lwt.ml 221 8>>*/ return  /*<<src/core/lwt.ml 221 8>>*/ run_cancel_handlers_rec_next
                (rem$0);
       else
         /*<<src/core/lwt.ml 219 2>>*/ switch(chs$0[0])
         {case 0:
           var f=chs$0[2],data=chs$0[1];
            /*<<src/core/lwt.ml 223 8>>*/ current_data[1]=data;
            /*<<src/core/lwt.ml 224 8>>*/  /*<<src/core/lwt.ml 224 8>>*/ call_unsafe
            (f,0);
            /*<<src/core/lwt.ml 224 24>>*/ return  /*<<src/core/lwt.ml 224 24>>*/ run_cancel_handlers_rec_next
                   (rem$0);
          case 1:
            /*<<src/core/lwt.ml 227 8>>*/  /*<<src/core/lwt.ml 227 8>>*/ var
            n=
             chs$0[1];
            /*<<src/core/lwt.ml 227 8>>*/  /*<<src/core/lwt.ml 227 8>>*/ remove
            (n);
            /*<<src/core/lwt.ml 227 29>>*/ return  /*<<src/core/lwt.ml 227 29>>*/ run_cancel_handlers_rec_next
                   (rem$0);
          default:
            /*<<src/core/lwt.ml 230 8>>*/ var
            chs2=chs$0[2],
            chs1=chs$0[1],
             /*<<src/core/lwt.ml 230 8>>*/ rem$1=[0,chs2,rem$0],
            chs$0=chs1,
            rem$0=rem$1;
           continue} /*<<src/core/lwt.ml 230 50>>*/ }
    function run_cancel_handlers_rec_next(rem)
     { /*<<src/core/lwt.ml 233 2>>*/ if(rem)
       {var rem$0=rem[2],chs=rem[1];
         /*<<src/core/lwt.ml 237 8>>*/ return  /*<<src/core/lwt.ml 237 8>>*/ run_cancel_handlers_rec
                (chs,rem$0)}
       /*<<src/core/lwt.ml 235 8>>*/ return 0 /*<<src/core/lwt.ml 237 39>>*/ }
    function unsafe_run_waiters(sleeper,state)
     { /*<<src/core/lwt.ml 245 2>>*/  /*<<src/core/lwt.ml 245 2>>*/ var
       switch$0=
        1===state[0]
         ?state[1]===Canceled
           ?( /*<<src/core/lwt.ml 247 9>>*/ run_cancel_handlers_rec
              (sleeper[4],0),
             1)
           :0
         :0;
       /*<<src/core/lwt.ml 251 2>>*/ return  /*<<src/core/lwt.ml 251 2>>*/ run_waiters_rec
              (state,sleeper[2],0) /*<<src/core/lwt.ml 251 42>>*/ }
     /*<<queue.ml 29 16>>*/ var
     wakening=[0,0],
      /*<<queue.ml 29 16>>*/ to_wakeup=[0,0,0,0];
     /*<<src/core/lwt.ml 264 31>>*/ function enter_wakeup(param)
     { /*<<src/core/lwt.ml 268 2>>*/ var
        /*<<src/core/lwt.ml 268 2>>*/ snapshot=current_data[1],
        /*<<src/core/lwt.ml 269 2>>*/ already_wakening=
        wakening[1]?1:(wakening[1]=1,0);
       /*<<src/core/lwt.ml 279 2>>*/ return [0,already_wakening,snapshot] /*<<src/core/lwt.ml 279 30>>*/ }
     /*<<src/core/lwt.ml 264 31>>*/ function leave_wakeup(param)
     {var snapshot=param[2],already_wakening=param[1];
       /*<<src/core/lwt.ml 283 2>>*/ if(already_wakening)
       { /*<<src/core/lwt.ml 295 4>>*/ current_data[1]=snapshot;
         /*<<src/core/lwt.ml 295 4>>*/ return 0}
      for(;;)
       { /*<<src/core/lwt.ml 286 40>>*/ if(0===to_wakeup[1])
         { /*<<src/core/lwt.ml 292 4>>*/ wakening[1]=0;
           /*<<src/core/lwt.ml 293 4>>*/ current_data[1]=snapshot;
           /*<<src/core/lwt.ml 293 4>>*/ return 0}
         /*<<queue.ml 67 2>>*/  /*<<queue.ml 67 2>>*/ var _hd_=to_wakeup[2];
         /*<<queue.ml 67 2>>*/ if(_hd_)
         {var _he_=_hd_[1],_hf_=_hd_[2];
          if(_hf_)
           { /*<<queue.ml 73 4>>*/ to_wakeup[1]=to_wakeup[1]-1|0;
             /*<<queue.ml 74 4>>*/ to_wakeup[2]=_hf_}
          else
           { /*<<queue.ml 36 2>>*/ to_wakeup[1]=0;
             /*<<queue.ml 37 2>>*/ to_wakeup[2]=0;
             /*<<queue.ml 38 2>>*/ to_wakeup[3]=0}
           /*<<src/core/lwt.ml 289 6>>*/  /*<<src/core/lwt.ml 289 6>>*/ unsafe_run_waiters
           (_he_[1],_he_[2]);
          continue}
         /*<<queue.ml 68 22>>*/ throw Empty}}
     /*<<src/core/lwt.ml 264 31>>*/ function safe_run_waiters(sleeper,state)
     { /*<<src/core/lwt.ml 298 12>>*/  /*<<src/core/lwt.ml 298 12>>*/ var
       ctx=
         /*<<src/core/lwt.ml 298 12>>*/ enter_wakeup(0);
       /*<<src/core/lwt.ml 299 2>>*/  /*<<src/core/lwt.ml 299 2>>*/ unsafe_run_waiters
       (sleeper,state);
       /*<<src/core/lwt.ml 299 34>>*/ return  /*<<src/core/lwt.ml 299 34>>*/ leave_wakeup
              (ctx) /*<<src/core/lwt.ml 300 18>>*/ }
     /*<<src/core/lwt.ml 264 31>>*/ function wakeup(t$0,v)
     { /*<<src/core/lwt.ml 325 33>>*/ var
        /*<<src/core/lwt.ml 325 33>>*/ state=[0,v],
        /*<<src/core/lwt.ml 313 10>>*/ t=
         /*<<src/core/lwt.ml 313 10>>*/ repr_rec(t$0),
        /*<<src/core/lwt.ml 314 2>>*/ _hc_=t[1];
       /*<<src/core/lwt.ml 314 2>>*/ switch(_hc_[0])
       {case 1:if(_hc_[1]===Canceled)return 0;break;
        case 2:
          /*<<src/core/lwt.ml 316 8>>*/  /*<<src/core/lwt.ml 316 8>>*/ var
          sleeper=
           _hc_[1];
          /*<<src/core/lwt.ml 317 8>>*/ t[1]=state;
          /*<<src/core/lwt.ml 318 8>>*/ return  /*<<src/core/lwt.ml 318 8>>*/ safe_run_waiters
                 (sleeper,state)
        }
       /*<<src/core/lwt.ml 323 8>>*/ return  /*<<src/core/lwt.ml 323 8>>*/ invalid_arg
              (_bW_) /*<<src/core/lwt.ml 325 47>>*/ }
     /*<<src/core/lwt.ml 264 31>>*/ function append(l1,l2)
     { /*<<src/core/lwt.ml 402 2>>*/ return typeof l1==="number"
              ?l2
              :typeof l2==="number"?l1:[2,l1,l2] /*<<src/core/lwt.ml 405 26>>*/ }
     /*<<src/core/lwt.ml 264 31>>*/ function cleanup(ws)
     { /*<<src/core/lwt.ml 414 18>>*/ if(typeof ws!=="number")
        /*<<src/core/lwt.ml 414 18>>*/ switch(ws[0])
        {case 0:if(!ws[1][1])return 0;break;
         case 2:
           /*<<src/core/lwt.ml 418 26>>*/ var
           l2=ws[2],
           l1=ws[1],
            /*<<src/core/lwt.ml 418 26>>*/ _hb_=
             /*<<src/core/lwt.ml 418 26>>*/ cleanup(l2);
           /*<<src/core/lwt.ml 418 25>>*/ return  /*<<src/core/lwt.ml 418 25>>*/ append
                  ( /*<<src/core/lwt.ml 418 13>>*/ cleanup(l1),_hb_)
         }
       /*<<src/core/lwt.ml 420 6>>*/ return ws /*<<src/core/lwt.ml 420 8>>*/ }
     /*<<src/core/lwt.ml 264 31>>*/ function connect(t1,t2)
     { /*<<src/core/lwt.ml 428 11>>*/ var
        /*<<src/core/lwt.ml 428 11>>*/ t1$0=
         /*<<src/core/lwt.ml 428 11>>*/ repr(t1),
        /*<<src/core/lwt.ml 428 28>>*/ t2$0=
         /*<<src/core/lwt.ml 428 28>>*/ repr(t2),
        /*<<src/core/lwt.ml 429 2>>*/ _g8_=t1$0[1];
       /*<<src/core/lwt.ml 429 2>>*/ if(2===_g8_[0])
       { /*<<src/core/lwt.ml 431 8>>*/  /*<<src/core/lwt.ml 431 8>>*/ var
         sleeper1=
          _g8_[1];
         /*<<src/core/lwt.ml 431 8>>*/ if(t1$0===t2$0)return 0;
         /*<<src/core/lwt.ml 431 8>>*/  /*<<src/core/lwt.ml 435 13>>*/ var
         _g9_=
          t2$0[1];
         /*<<src/core/lwt.ml 435 13>>*/ if(2===_g9_[0])
         { /*<<src/core/lwt.ml 439 16>>*/  /*<<src/core/lwt.ml 439 16>>*/ var
           sleeper2=
            _g9_[1];
           /*<<src/core/lwt.ml 439 16>>*/ t2$0[1]=[3,t1$0];
           /*<<src/core/lwt.ml 465 16>>*/ sleeper1[1]=sleeper2[1];
           /*<<src/core/lwt.ml 439 16>>*/ var
            /*<<src/core/lwt.ml 468 30>>*/ waiters=
             /*<<src/core/lwt.ml 468 30>>*/ append(sleeper1[2],sleeper2[2]),
            /*<<src/core/lwt.ml 468 70>>*/ removed=sleeper1[3]+sleeper2[3]|0;
           /*<<src/core/lwt.ml 470 16>>*/ if(42<removed)
           { /*<<src/core/lwt.ml 470 46>>*/ sleeper1[3]=0;
             /*<<src/core/lwt.ml 473 53>>*/ sleeper1[2]=
             /*<<src/core/lwt.ml 473 38>>*/ cleanup(waiters)}
          else
           { /*<<src/core/lwt.ml 474 25>>*/ sleeper1[3]=removed;
             /*<<src/core/lwt.ml 476 18>>*/ sleeper1[2]=waiters}
           /*<<src/core/lwt.ml 439 16>>*/ var
            /*<<src/core/lwt.ml 478 16>>*/ _g__=sleeper2[4],
            /*<<src/core/lwt.ml 478 16>>*/ _g$_=sleeper1[4],
            /*<<src/core/lwt.ml 408 2>>*/ _ha_=
            typeof _g$_==="number"
             ?_g__
             :typeof _g__==="number"?_g$_:[2,_g$_,_g__];
           /*<<src/core/lwt.ml 478 104>>*/ sleeper1[4]=_ha_;
           /*<<src/core/lwt.ml 478 104>>*/ return 0}
         /*<<src/core/lwt.ml 481 16>>*/ t1$0[1]=_g9_;
         /*<<src/core/lwt.ml 483 16>>*/ return  /*<<src/core/lwt.ml 483 16>>*/ unsafe_run_waiters
                (sleeper1,_g9_)}
       /*<<src/core/lwt.ml 487 21>>*/ throw [0,Assert_failure,_bY_] /*<<src/core/lwt.ml 487 21>>*/ }
     /*<<src/core/lwt.ml 264 31>>*/ function fast_connect(t,state)
     { /*<<src/core/lwt.ml 492 10>>*/ var
        /*<<src/core/lwt.ml 492 10>>*/ t$0=
         /*<<src/core/lwt.ml 492 10>>*/ repr(t),
        /*<<src/core/lwt.ml 493 2>>*/ _g7_=t$0[1];
       /*<<src/core/lwt.ml 493 2>>*/ if(2===_g7_[0])
       { /*<<src/core/lwt.ml 495 8>>*/  /*<<src/core/lwt.ml 495 8>>*/ var
         sleeper=
          _g7_[1];
         /*<<src/core/lwt.ml 495 8>>*/ t$0[1]=state;
         /*<<src/core/lwt.ml 496 8>>*/ return  /*<<src/core/lwt.ml 496 8>>*/ unsafe_run_waiters
                (sleeper,state)}
       /*<<src/core/lwt.ml 498 20>>*/ throw [0,Assert_failure,_bZ_] /*<<src/core/lwt.ml 498 20>>*/ }
     /*<<src/core/lwt.ml 264 31>>*/ function return$0(v)
     { /*<<src/core/lwt.ml 516 2>>*/ return [0,[0,v]] /*<<src/core/lwt.ml 516 29>>*/ }
     /*<<src/core/lwt.ml 264 31>>*/  /*<<src/core/lwt.ml 264 31>>*/ var
     return_unit=
      [0,state_return_unit];
     /*<<src/core/lwt.ml 524 31>>*/ function fail(e)
     { /*<<src/core/lwt.ml 530 2>>*/ return [0,[1,e]] /*<<src/core/lwt.ml 530 27>>*/ }
     /*<<src/core/lwt.ml 524 31>>*/ function temp(t)
     { /*<<src/core/lwt.ml 540 65>>*/ return [0,[2,[0,[0,[0,t]],0,0,0]]] /*<<src/core/lwt.ml 544 3>>*/ }
     /*<<src/core/lwt.ml 524 31>>*/ function task(param)
     { /*<<src/core/lwt.ml 565 18>>*/  /*<<src/core/lwt.ml 565 18>>*/ var
       t=
        [0,[2,[0,1,0,0,0]]];
       /*<<src/core/lwt.ml 574 2>>*/ return [0,t,t] /*<<src/core/lwt.ml 574 23>>*/ }
     /*<<src/core/lwt.ml 524 31>>*/ function add_immutable_waiter
     (sleeper,waiter$0)
     { /*<<src/core/lwt.ml 625 2>>*/ var
        /*<<src/core/lwt.ml 625 2>>*/ waiter$1=[1,waiter$0],
        /*<<src/core/lwt.ml 620 2>>*/ _g6_=sleeper[2],
        /*<<src/core/lwt.ml 620 2>>*/ waiter=
        typeof _g6_==="number"?waiter$1:[2,waiter$1,_g6_];
      sleeper[2]=waiter;
      return 0 /*<<src/core/lwt.ml 625 39>>*/ }
     /*<<src/core/lwt.ml 524 31>>*/ function on_cancel(t,f)
     { /*<<src/core/lwt.ml 628 16>>*/  /*<<src/core/lwt.ml 628 16>>*/ var
       _g4_=
         /*<<src/core/lwt.ml 628 8>>*/ repr(t)[1];
       /*<<src/core/lwt.ml 628 16>>*/ switch(_g4_[0])
       {case 1:
         if(_g4_[1]===Canceled)
          return  /*<<src/core/lwt.ml 637 8>>*/ call_unsafe(f,0);
         break;
        case 2:
          /*<<src/core/lwt.ml 630 8>>*/ var
           /*<<src/core/lwt.ml 630 8>>*/ sleeper=_g4_[1],
           /*<<src/core/lwt.ml 630 8>>*/ handler=[0,current_data[1],f],
           /*<<src/core/lwt.ml 631 8>>*/ _g5_=sleeper[4],
           /*<<src/core/lwt.ml 631 8>>*/ handler$0=
           typeof _g5_==="number"?handler:[2,handler,_g5_];
         sleeper[4]=handler$0;
         return 0
        }
       /*<<src/core/lwt.ml 639 8>>*/ return 0 /*<<src/core/lwt.ml 639 10>>*/ }
     /*<<src/core/lwt.ml 524 31>>*/ function bind(t,f)
     { /*<<src/core/lwt.ml 642 10>>*/ var
        /*<<src/core/lwt.ml 642 10>>*/ t$0=
         /*<<src/core/lwt.ml 642 10>>*/ repr(t),
        /*<<src/core/lwt.ml 643 2>>*/ _g1_=t$0[1];
       /*<<src/core/lwt.ml 643 2>>*/ switch(_g1_[0])
       {case 0:
          /*<<src/core/lwt.ml 645 8>>*/  /*<<src/core/lwt.ml 645 8>>*/ var
          v=
           _g1_[1];
          /*<<src/core/lwt.ml 645 8>>*/ return  /*<<src/core/lwt.ml 645 8>>*/ caml_call1
                 (f,v);
        case 1: /*<<src/core/lwt.ml 647 8>>*/ return [0,_g1_];
        case 2:
          /*<<src/core/lwt.ml 649 8>>*/ var
           /*<<src/core/lwt.ml 649 8>>*/ sleeper=_g1_[1],
           /*<<src/core/lwt.ml 649 18>>*/ res=
            /*<<src/core/lwt.ml 649 18>>*/ temp(t$0),
           /*<<src/core/lwt.ml 650 8>>*/ data=current_data[1];
          /*<<src/core/lwt.ml 651 8>>*/  /*<<src/core/lwt.ml 651 8>>*/ add_immutable_waiter
          (sleeper,
           function(state)
            { /*<<src/core/lwt.ml 652 10>>*/ switch(state[0])
              {case 0:
                var v=state[1];
                 /*<<src/core/lwt.ml 653 27>>*/ current_data[1]=data;
                 /*<<src/core/lwt.ml 653 49>>*/ try
                 { /*<<src/core/lwt.ml 653 66>>*/ var
                    /*<<src/core/lwt.ml 653 66>>*/ _g3_=
                     /*<<src/core/lwt.ml 653 66>>*/ caml_call1(f,v),
                   _g2_=_g3_}
                catch(exn)
                 {exn=caml_wrap_exception(exn);
                  var _g2_= /*<<src/core/lwt.ml 653 82>>*/ fail(exn)}
                return connect(res,_g2_);
               case 1:
                 /*<<src/core/lwt.ml 654 34>>*/ return  /*<<src/core/lwt.ml 654 34>>*/ fast_connect
                        (res,state);
               default:
                 /*<<src/core/lwt.ml 655 32>>*/ throw [0,Assert_failure,_b0_]} /*<<src/core/lwt.ml 655 33>>*/ });
          /*<<src/core/lwt.ml 655 33>>*/ return res;
        default: /*<<src/core/lwt.ml 658 20>>*/ throw [0,Assert_failure,_b1_]} /*<<src/core/lwt.ml 658 20>>*/ }
     /*<<src/core/lwt.ml 524 31>>*/ function catch$0(x,f)
     { /*<<src/core/lwt.ml 686 2>>*/ try
       { /*<<src/core/lwt.ml 686 20>>*/ var
          /*<<src/core/lwt.ml 686 20>>*/ _gY_=
           /*<<src/core/lwt.ml 686 20>>*/ caml_call1(x,0),
         _gW_=_gY_}
      catch(exn)
       {exn=caml_wrap_exception(exn);
        var _gW_= /*<<src/core/lwt.ml 686 37>>*/ fail(exn)}
       /*<<src/core/lwt.ml 686 10>>*/ var
        /*<<src/core/lwt.ml 686 10>>*/ t=
         /*<<src/core/lwt.ml 686 10>>*/ repr(_gW_),
        /*<<src/core/lwt.ml 687 2>>*/ _gX_=t[1];
       /*<<src/core/lwt.ml 687 2>>*/ switch(_gX_[0])
       {case 0: /*<<src/core/lwt.ml 689 8>>*/ return t;
        case 1:
          /*<<src/core/lwt.ml 691 8>>*/  /*<<src/core/lwt.ml 691 8>>*/ var
          exn=
           _gX_[1];
          /*<<src/core/lwt.ml 691 8>>*/ return  /*<<src/core/lwt.ml 691 8>>*/ caml_call1
                 (f,exn);
        case 2:
          /*<<src/core/lwt.ml 693 8>>*/ var
           /*<<src/core/lwt.ml 693 8>>*/ sleeper=_gX_[1],
           /*<<src/core/lwt.ml 693 18>>*/ res=
            /*<<src/core/lwt.ml 693 18>>*/ temp(t),
           /*<<src/core/lwt.ml 694 8>>*/ data=current_data[1];
          /*<<src/core/lwt.ml 695 8>>*/  /*<<src/core/lwt.ml 695 8>>*/ add_immutable_waiter
          (sleeper,
           function(state)
            { /*<<src/core/lwt.ml 696 10>>*/ switch(state[0])
              {case 0:
                 /*<<src/core/lwt.ml 697 36>>*/ return  /*<<src/core/lwt.ml 697 36>>*/ fast_connect
                        (res,state);
               case 1:
                var exn=state[1];
                 /*<<src/core/lwt.ml 698 27>>*/ current_data[1]=data;
                 /*<<src/core/lwt.ml 698 49>>*/ try
                 { /*<<src/core/lwt.ml 698 66>>*/ var
                    /*<<src/core/lwt.ml 698 66>>*/ _g0_=
                     /*<<src/core/lwt.ml 698 66>>*/ caml_call1(f,exn),
                   _gZ_=_g0_}
                catch(exn)
                 {exn=caml_wrap_exception(exn);
                  var _gZ_= /*<<src/core/lwt.ml 698 84>>*/ fail(exn)}
                return connect(res,_gZ_);
               default:
                 /*<<src/core/lwt.ml 699 32>>*/ throw [0,Assert_failure,_b2_]} /*<<src/core/lwt.ml 699 33>>*/ });
          /*<<src/core/lwt.ml 699 33>>*/ return res;
        default: /*<<src/core/lwt.ml 702 20>>*/ throw [0,Assert_failure,_b3_]} /*<<src/core/lwt.ml 702 20>>*/ }
     /*<<src/core/lwt.ml 524 31>>*/ function async(f)
     { /*<<src/core/lwt.ml 795 2>>*/ try
       { /*<<src/core/lwt.ml 795 20>>*/ var
          /*<<src/core/lwt.ml 795 20>>*/ _gV_=
           /*<<src/core/lwt.ml 795 20>>*/ caml_call1(f,0),
         _gT_=_gV_}
      catch(exn)
       {exn=caml_wrap_exception(exn);
        var _gT_= /*<<src/core/lwt.ml 795 37>>*/ fail(exn)}
       /*<<src/core/lwt.ml 795 10>>*/ var
        /*<<src/core/lwt.ml 795 10>>*/ t=
         /*<<src/core/lwt.ml 795 10>>*/ repr(_gT_),
        /*<<src/core/lwt.ml 796 2>>*/ _gU_=t[1];
       /*<<src/core/lwt.ml 796 2>>*/ switch(_gU_[0])
       {case 0: /*<<src/core/lwt.ml 798 8>>*/ return 0;
        case 1:
          /*<<src/core/lwt.ml 800 8>>*/  /*<<src/core/lwt.ml 800 8>>*/ var
          exn=
           _gU_[1];
          /*<<src/core/lwt.ml 800 8>>*/ return  /*<<src/core/lwt.ml 800 8>>*/ caml_call1
                 (async_exception_hook[1],exn);
        case 2:
          /*<<src/core/lwt.ml 802 8>>*/  /*<<src/core/lwt.ml 802 8>>*/ var
          sleeper=
           _gU_[1];
          /*<<src/core/lwt.ml 802 8>>*/ return  /*<<src/core/lwt.ml 802 8>>*/ add_immutable_waiter
                 (sleeper,
                  function(param)
                   { /*<<src/core/lwt.ml 803 10>>*/ switch(param[0])
                     {case 0: /*<<src/core/lwt.ml 804 27>>*/ return 0;
                      case 1:
                        /*<<src/core/lwt.ml 805 27>>*/  /*<<src/core/lwt.ml 805 27>>*/ var
                        exn=
                         param[1];
                        /*<<src/core/lwt.ml 805 27>>*/ return  /*<<src/core/lwt.ml 805 27>>*/ caml_call1
                               (async_exception_hook[1],exn);
                      default:
                        /*<<src/core/lwt.ml 806 32>>*/ throw [0,
                              Assert_failure,
                              _b4_]} /*<<src/core/lwt.ml 806 33>>*/ });
        default: /*<<src/core/lwt.ml 808 20>>*/ throw [0,Assert_failure,_b5_]} /*<<src/core/lwt.ml 808 20>>*/ }
     /*<<src/core/lwt.ml 524 31>>*/ var
      /*<<src/core/lwt.ml 524 31>>*/ pause_hook=
      [0,function(_gS_){ /*<<?>>*/ return 0}],
      /*<<src/core/lwt.ml 1182 13>>*/ s1=
       /*<<src/core/lwt.ml 1182 13>>*/ create(0),
      /*<<src/core/lwt.ml 1182 35>>*/ _b6_=[0,0];
     /*<<src/core/lwt.ml 1182 35>>*/ function wakeup_paused(param)
     { /*<<src/core/lwt.ml 1192 33>>*/ if
       ( /*<<src/core/lwt.ml 1192 5>>*/ is_empty(s1))
       { /*<<src/core/lwt.ml 1193 4>>*/ _b6_[1]=0;
         /*<<src/core/lwt.ml 1193 4>>*/ return 0}
       /*<<src/core/lwt.ml 1195 14>>*/  /*<<src/core/lwt.ml 1195 14>>*/ var
       seq=
         /*<<src/core/lwt.ml 1195 14>>*/ create(0);
       /*<<src/core/lwt_sequence.ml 138 2>>*/ seq[1][2]=s1[2];
       /*<<src/core/lwt_sequence.ml 139 2>>*/ s1[2][1]=seq[1];
       /*<<src/core/lwt_sequence.ml 140 2>>*/ seq[1]=s1[1];
       /*<<src/core/lwt_sequence.ml 141 2>>*/ s1[1][2]=seq;
       /*<<src/core/lwt_sequence.ml 142 2>>*/ s1[1]=s1;
       /*<<src/core/lwt_sequence.ml 143 2>>*/ s1[2]=s1;
       /*<<src/core/lwt.ml 1196 38>>*/ _b6_[1]=0;
       /*<<src/core/lwt.ml 1195 14>>*/ var curr=seq[2];
       /*<<src/core/lwt_sequence.ml 147 4>>*/ for(;;)
       { /*<<src/core/lwt_sequence.ml 147 4>>*/  /*<<src/core/lwt_sequence.ml 147 4>>*/ var
         _gR_=
          curr!==seq?1:0;
         /*<<src/core/lwt_sequence.ml 147 4>>*/ if(_gR_)
         { /*<<src/core/lwt_sequence.ml 149 6>>*/ if(curr[4])
            /*<<src/core/lwt.ml 1198 40>>*/ wakeup(curr[3],0);
           /*<<src/core/lwt_sequence.ml 149 47>>*/ var
            /*<<src/core/lwt_sequence.ml 149 47>>*/ curr$0=curr[2],
           curr=curr$0;
          continue}
        return _gR_} /*<<src/core/lwt.ml 1199 5>>*/ }
     /*<<src/core/lwt.ml 1182 35>>*/ function backtrace_bind(add_loc,t,f)
     { /*<<src/core/lwt.ml 1210 10>>*/ var
        /*<<src/core/lwt.ml 1210 10>>*/ t$0=
         /*<<src/core/lwt.ml 1210 10>>*/ repr(t),
        /*<<src/core/lwt.ml 1211 2>>*/ _gO_=t$0[1];
       /*<<src/core/lwt.ml 1211 2>>*/ switch(_gO_[0])
       {case 0:
          /*<<src/core/lwt.ml 1213 8>>*/  /*<<src/core/lwt.ml 1213 8>>*/ var
          v=
           _gO_[1];
          /*<<src/core/lwt.ml 1213 8>>*/ return  /*<<src/core/lwt.ml 1213 8>>*/ caml_call1
                 (f,v);
        case 1:
          /*<<src/core/lwt.ml 1215 8>>*/  /*<<src/core/lwt.ml 1215 8>>*/ var
          exn=
           _gO_[1];
          /*<<src/core/lwt.ml 1215 42>>*/ return [0,
                 [1, /*<<src/core/lwt.ml 1215 29>>*/ caml_call1(add_loc,exn)]];
        case 2:
          /*<<src/core/lwt.ml 1217 8>>*/ var
           /*<<src/core/lwt.ml 1217 8>>*/ sleeper=_gO_[1],
           /*<<src/core/lwt.ml 1217 18>>*/ res=
            /*<<src/core/lwt.ml 1217 18>>*/ temp(t$0),
           /*<<src/core/lwt.ml 1218 8>>*/ data=current_data[1];
          /*<<src/core/lwt.ml 1219 8>>*/  /*<<src/core/lwt.ml 1219 8>>*/ add_immutable_waiter
          (sleeper,
           function(param)
            { /*<<src/core/lwt.ml 1220 10>>*/ switch(param[0])
              {case 0:
                var v=param[1];
                 /*<<src/core/lwt.ml 1221 27>>*/ current_data[1]=data;
                 /*<<src/core/lwt.ml 1221 49>>*/ try
                 { /*<<src/core/lwt.ml 1221 66>>*/ var
                    /*<<src/core/lwt.ml 1221 66>>*/ _gQ_=
                     /*<<src/core/lwt.ml 1221 66>>*/ caml_call1(f,v),
                   _gP_=_gQ_}
                catch(exn)
                 {exn=caml_wrap_exception(exn);
                  var
                   _gP_=
                     /*<<src/core/lwt.ml 1221 82>>*/ fail
                     ( /*<<src/core/lwt.ml 1221 87>>*/ caml_call1(add_loc,exn))}
                return connect(res,_gP_);
               case 1:
                 /*<<src/core/lwt.ml 1222 27>>*/  /*<<src/core/lwt.ml 1222 27>>*/ var
                 exn=
                  param[1];
                 /*<<src/core/lwt.ml 1222 62>>*/ return  /*<<src/core/lwt.ml 1222 62>>*/ fast_connect
                        (res,
                         [1, /*<<src/core/lwt.ml 1222 49>>*/ caml_call1(add_loc,exn)]);
               default:
                 /*<<src/core/lwt.ml 1223 32>>*/ throw [0,Assert_failure,_b7_]} /*<<src/core/lwt.ml 1223 33>>*/ });
          /*<<src/core/lwt.ml 1223 33>>*/ return res;
        default: /*<<src/core/lwt.ml 1226 20>>*/ throw [0,Assert_failure,_b8_]} /*<<src/core/lwt.ml 1226 20>>*/ }
    function create$0(param)
     { /*<<src/core/lwt_mutex.ml 28 66>>*/ return [0,
              0,
               /*<<src/core/lwt_mutex.ml 28 44>>*/ create(0)] /*<<src/core/lwt_mutex.ml 28 68>>*/ }
    function lock(m)
     { /*<<src/core/lwt_mutex.ml 31 2>>*/ if(m[1])
       { /*<<src/core/lwt_mutex.ml 32 4>>*/ var
          /*<<src/core/lwt_mutex.ml 32 4>>*/ _gN_=m[2],
          /*<<src/core/lwt.ml 577 2>>*/ sleeper=[0,1,0,0,0],
          /*<<src/core/lwt.ml 583 2>>*/ data=[0,[2,sleeper]],
          /*<<src/core/lwt_sequence.ml 88 2>>*/ node=[0,_gN_[1],_gN_,data,1];
         /*<<src/core/lwt_sequence.ml 89 2>>*/ _gN_[1][2]=node;
         /*<<src/core/lwt_sequence.ml 90 2>>*/ _gN_[1]=node;
         /*<<src/core/lwt.ml 585 2>>*/ sleeper[4]=[1,node];
         /*<<src/core/lwt.ml 586 2>>*/ return data}
       /*<<src/core/lwt_mutex.ml 33 7>>*/ m[1]=1;
       /*<<src/core/lwt_mutex.ml 35 4>>*/ return return_unit /*<<src/core/lwt_mutex.ml 36 5>>*/ }
    function unlock(m)
     { /*<<src/core/lwt_mutex.ml 39 2>>*/  /*<<src/core/lwt_mutex.ml 39 2>>*/ var
       _gL_=
        m[1];
       /*<<src/core/lwt_mutex.ml 39 2>>*/ if(_gL_)
       { /*<<src/core/lwt_mutex.ml 40 38>>*/ if
         ( /*<<src/core/lwt_mutex.ml 40 7>>*/ is_empty(m[2]))
         { /*<<src/core/lwt_mutex.ml 41 6>>*/ m[1]=0;
           /*<<src/core/lwt_mutex.ml 41 6>>*/ return 0}
         /*<<src/core/lwt_mutex.ml 45 6>>*/ var
          /*<<src/core/lwt_mutex.ml 45 6>>*/ _gM_=m[2],
          /*<<src/core/lwt_mutex.ml 45 6>>*/ v=0;
         /*<<src/core/lwt_sequence.ml 94 17>>*/ if
         ( /*<<src/core/lwt_sequence.ml 94 5>>*/ is_empty(_gM_))
         throw Empty$0;
         /*<<src/core/lwt_mutex.ml 45 6>>*/  /*<<src/core/lwt_sequence.ml 96 7>>*/ var
         node=
          _gM_[2];
         /*<<src/core/lwt_sequence.ml 98 4>>*/  /*<<src/core/lwt_sequence.ml 98 4>>*/ remove
         (node);
         /*<<src/core/lwt_mutex.ml 45 6>>*/ var
          /*<<src/core/lwt.ml 350 45>>*/ state=[0,v],
          /*<<src/core/lwt.ml 329 10>>*/ t=
           /*<<src/core/lwt.ml 329 10>>*/ repr_rec(node[3]),
          /*<<src/core/lwt.ml 330 2>>*/ _gK_=t[1];
         /*<<src/core/lwt.ml 330 2>>*/ switch(_gK_[0])
         {case 1:if(_gK_[1]===Canceled)return 0;break;
          case 2:
            /*<<src/core/lwt.ml 332 8>>*/  /*<<src/core/lwt.ml 332 8>>*/ var
            sleeper=
             _gK_[1];
            /*<<src/core/lwt.ml 333 8>>*/ t[1]=state;
            /*<<src/core/lwt.ml 334 8>>*/ if(wakening[1])
            { /*<<queue.ml 41 2>>*/ var
              x=[0,sleeper,state],
               /*<<queue.ml 41 2>>*/ cell=[0,x,0],
               /*<<queue.ml 45 2>>*/ _gJ_=to_wakeup[3];
              /*<<queue.ml 45 2>>*/ return _gJ_
                     ?(to_wakeup[1]=
                       to_wakeup[1]+
                       1|
                       0,
                       _gJ_[2]=
                       cell,
                       to_wakeup[3]=
                       cell,
                       0)
                     :(to_wakeup[1]=1,to_wakeup[2]=cell,to_wakeup[3]=cell,0)}
            /*<<src/core/lwt.ml 344 10>>*/ return  /*<<src/core/lwt.ml 344 10>>*/ safe_run_waiters
                   (sleeper,state)
          }
         /*<<src/core/lwt.ml 348 8>>*/ return  /*<<src/core/lwt.ml 348 8>>*/ invalid_arg
                (_bX_)}
       /*<<src/core/lwt_mutex.ml 28 16>>*/ return _gL_ /*<<src/core/lwt_mutex.ml 46 5>>*/ }
     /*<<js.ml 66 20>>*/ var
     window=joo_global_object,
      /*<<js.ml 66 20>>*/ no_handler=null,
      /*<<js.ml 69 28>>*/ undefined$0=undefined,
      /*<<js.ml 245 24>>*/ jsoo_7bc72a9e=window.Array,
     Error=[248,_b9_,caml_fresh_oo_id(0)],
      /*<<js.ml 404 69>>*/ exn=[0,Error,{}],
      /*<<callback.ml 26 27>>*/ slot=
       /*<<callback.ml 26 16>>*/ caml_obj_tag(exn)===248?exn:exn[1];
     /*<<callback.ml 27 2>>*/  /*<<callback.ml 27 2>>*/ caml_register_named_value
     (caml_new_string("jsError"),slot);
     /*<<js.ml 406 23>>*/ (function(exn)
      { /*<<js.ml 406 41>>*/ throw exn /*<<js.ml 406 24>>*/ });
     /*<<js.ml 457 2>>*/  /*<<js.ml 457 2>>*/ register_printer
     (function(param)
       { /*<<js.ml 458 5>>*/ if(param[1]===Error)
         { /*<<js.ml 458 25>>*/  /*<<js.ml 458 25>>*/ var e=param[2];
           /*<<js.ml 458 57>>*/ return [0,
                   /*<<js.ml 458 31>>*/ caml_js_to_string
                   ( /*<<js.ml 458 42>>*/ e.toString())]}
         /*<<js.ml 458 66>>*/ return 0 /*<<js.ml 458 70>>*/ });
     /*<<js.ml 460 2>>*/  /*<<js.ml 460 2>>*/ register_printer
     (function(jsoo_self)
       { /*<<js.ml 463 40>>*/ return jsoo_self instanceof jsoo_7bc72a9e
                ?0
                :[0,
                   /*<<js.ml 464 18>>*/ caml_js_to_string
                   ( /*<<js.ml 464 29>>*/ jsoo_self.toString())] /*<<js.ml 464 44>>*/ });
    function appendChild(jsoo_self,jsoo_ad7fbbdd)
     { /*<<dom.ml 94 10>>*/  /*<<dom.ml 94 10>>*/ jsoo_self.appendChild
       (jsoo_ad7fbbdd);
      return 0 /*<<dom.ml 94 41>>*/ }
     /*<<dom_html.ml 364 14>>*/ var
      /*<<dom_html.ml 364 14>>*/ event_kind="click",
      /*<<dom_html.ml 1273 15>>*/ doc=window.document;
    function opt_iter(x,f)
     { /*<<dom_html.ml 1319 19>>*/ if(x)
       { /*<<dom_html.ml 1319 55>>*/  /*<<dom_html.ml 1319 55>>*/ var v=x[1];
         /*<<dom_html.ml 1319 55>>*/ return  /*<<dom_html.ml 1319 55>>*/ caml_call1
                (f,v)}
       /*<<dom_html.ml 1319 40>>*/ return 0 /*<<dom_html.ml 1319 58>>*/ }
    function createElement(jsoo_self,name)
     { /*<<?>>*/ return  /*<<dom_html.ml 1321 44>>*/ jsoo_self.createElement
              ( /*<<dom_html.ml 1321 44>>*/ name.toString()) /*<<dom_html.ml 1321 78>>*/ }
    var createElementSyntax=[0,785140586];
    function unsafeCreateElementEx(type,name,doc$0,elt)
     { /*<<dom_html.ml 1327 2>>*/ for(;;)
       { /*<<dom_html.ml 1327 2>>*/ if(0===type)
         if(0===name)
          return  /*<<dom_html.ml 1328 4>>*/ createElement(doc$0,elt);
         /*<<dom_html.ml 1330 4>>*/  /*<<dom_html.ml 1330 4>>*/ var
         _gD_=
          createElementSyntax[1];
         /*<<dom_html.ml 1330 4>>*/ if(785140586===_gD_)
         { /*<<dom_html.ml 1348 8>>*/ try
           { /*<<dom_html.ml 1353 19>>*/ var
              /*<<dom_html.ml 1353 19>>*/ el=
               /*<<dom_html.ml 1353 19>>*/ doc.createElement
               ('<input name="x">'),
             _gG_=
               /*<<dom_html.ml 1354 14>>*/ el.tagName.toLowerCase()==="input"
               ?1
               :0,
             _gH_=_gG_?el.name==="x"?1:0:_gG_,
             _gE_=_gH_}
          catch(_gI_){var _gE_=0}
           /*<<dom_html.ml 1359 12>>*/  /*<<dom_html.ml 1359 12>>*/ var
           _gF_=
            _gE_?982028505:-1003883683;
           /*<<dom_html.ml 1362 8>>*/ createElementSyntax[1]=_gF_;
          continue}
        if(982028505<=_gD_)
         { /*<<dom_html.ml 1337 16>>*/  /*<<dom_html.ml 1337 16>>*/ var
           a=
            new jsoo_7bc72a9e();
           /*<<dom_html.ml 1338 16>>*/  /*<<dom_html.ml 1338 16>>*/ a.push
           ("<", /*<<dom_html.ml 1338 39>>*/ elt.toString());
           /*<<dom_html.ml 1339 8>>*/  /*<<dom_html.ml 1339 8>>*/ opt_iter
           (type,
            function(t)
             { /*<<dom_html.ml 1341 13>>*/  /*<<dom_html.ml 1341 13>>*/ a.push
               (' type="',
                 /*<<dom_html.ml 1341 45>>*/ caml_js_html_escape(t),
                '"');
              return 0 /*<<dom_html.ml 1341 76>>*/ });
           /*<<dom_html.ml 1342 8>>*/  /*<<dom_html.ml 1342 8>>*/ opt_iter
           (name,
            function(n)
             { /*<<dom_html.ml 1344 13>>*/  /*<<dom_html.ml 1344 13>>*/ a.push
               (' name="',
                 /*<<dom_html.ml 1344 45>>*/ caml_js_html_escape(n),
                '"');
              return 0 /*<<dom_html.ml 1344 76>>*/ });
           /*<<dom_html.ml 1345 16>>*/  /*<<dom_html.ml 1345 16>>*/ a.push
           (">");
          return  /*<<dom_html.ml 1346 26>>*/ doc$0.createElement
                  ( /*<<dom_html.ml 1346 46>>*/ a.join(""))}
         /*<<dom_html.ml 1330 4>>*/  /*<<dom_html.ml 1332 36>>*/ var
         res=
           /*<<dom_html.ml 1332 36>>*/ createElement(doc$0,elt);
         /*<<dom_html.ml 1333 8>>*/  /*<<dom_html.ml 1333 8>>*/ opt_iter
         (type,
          function(jsoo_arg)
           { /*<<dom_html.ml 1333 33>>*/ return res.type=jsoo_arg /*<<dom_html.ml 1333 48>>*/ });
         /*<<dom_html.ml 1334 8>>*/  /*<<dom_html.ml 1334 8>>*/ opt_iter
         (name,
          function(jsoo_arg)
           { /*<<dom_html.ml 1334 32>>*/ return res.name=jsoo_arg /*<<dom_html.ml 1334 46>>*/ });
         /*<<dom_html.ml 1334 47>>*/ return res} /*<<dom_html.ml 1362 50>>*/ }
    function createButton(type,name,doc)
     { /*<<dom_html.ml 1382 2>>*/ return  /*<<dom_html.ml 1382 2>>*/ unsafeCreateElementEx
              (type,name,doc,_b__) /*<<dom_html.ml 1382 49>>*/ }
    caml_fresh_oo_id(0);
     /*<<dom_html.ml 1459 42>>*/  /*<<dom_html.ml 1459 42>>*/ var
     html_element=
      window.HTMLElement;
     /*<<dom_html.ml 1463 23>>*/ html_element===undefined$0;
     /*<<dom_html.ml 1459 42>>*/ var
     jsoo_self=caml_js_get_console(0),
      /*<<dom_html.ml 1890 54>>*/ overflow_limit=2147483e3;
    function sleep(d)
     { /*<<lwt_js.ml 22 15>>*/ var
        /*<<lwt_js.ml 22 15>>*/ match= /*<<lwt_js.ml 22 15>>*/ task(0),
        /*<<lwt_js.ml 22 26>>*/ w=match[2],
        /*<<lwt_js.ml 22 26>>*/ t=match[1],
        /*<<lwt_js.ml 23 2>>*/ d$0=d*1e3;
       /*<<lwt_js.ml 23 32>>*/ function callback(_gC_)
       { /*<<?>>*/ return wakeup(w,_gC_)}
       /*<<dom_html.ml 1909 2>>*/  /*<<dom_html.ml 1909 2>>*/ var id=[0,0];
       /*<<dom_html.ml 1910 2>>*/ function loop(step,param)
       { /*<<dom_html.ml 1911 4>>*/ if(2147483e3<step)
         var step$0=overflow_limit,remain=step-2147483e3;
        else
         var step$0=step,remain=0;
         /*<<dom_html.ml 1915 4>>*/  /*<<dom_html.ml 1915 4>>*/ var
         cb=
          remain==0
           ?callback
           :function(_gB_){ /*<<?>>*/ return loop(remain,_gB_)};
        id[1]=
        [0,
          /*<<dom_html.ml 1919 16>>*/ window.setTimeout
          ( /*<<dom_html.ml 1919 4>>*/ caml_js_wrap_callback(cb),step$0)];
        return 0 /*<<dom_html.ml 1919 63>>*/ }
       /*<<dom_html.ml 1921 2>>*/  /*<<dom_html.ml 1921 2>>*/ loop(d$0,0);
       /*<<lwt_js.ml 24 2>>*/  /*<<lwt_js.ml 24 2>>*/ on_cancel
       (t,
        function(param)
         { /*<<dom_html.ml 1925 2>>*/  /*<<dom_html.ml 1925 2>>*/ var
           _gA_=
            id[1];
           /*<<dom_html.ml 1925 2>>*/ if(_gA_)
           { /*<<dom_html.ml 1928 5>>*/  /*<<dom_html.ml 1928 5>>*/ var
             x=
              _gA_[1];
             /*<<dom_html.ml 1928 5>>*/ id[1]=0;
            return  /*<<dom_html.ml 1929 5>>*/ window.clearTimeout(x)}
           /*<<dom_html.ml 1926 12>>*/ return 0 /*<<lwt_js.ml 24 53>>*/ });
       /*<<lwt_js.ml 24 54>>*/ return t /*<<lwt_js.ml 25 3>>*/ }
    function f$10(param)
     { /*<<lwt_js.ml 29 13>>*/ return 1===param
              ?( /*<<lwt_js.ml 30 17>>*/ window.setTimeout
                 ( /*<<lwt_js.ml 31 5>>*/ caml_js_wrap_callback(wakeup_paused),
                  0),
                0)
              :0 /*<<lwt_js.ml 32 11>>*/ }
     /*<<src/core/lwt.ml 1201 32>>*/ pause_hook[1]=f$10;
     /*<<lwt_js.ml 34 43>>*/ function prerr_string$0(s)
     { /*<<?>>*/ return  /*<<lwt_js.ml 37 21>>*/ jsoo_self.log
              ( /*<<lwt_js.ml 37 21>>*/ s.toString()) /*<<lwt_js.ml 37 54>>*/ }
     /*<<lwt_js.ml 34 43>>*/ async_exception_hook[1]=
    function(exn)
     { /*<<lwt_js.ml 41 4>>*/  /*<<lwt_js.ml 41 4>>*/ prerr_string$0(_b$_);
       /*<<lwt_js.ml 42 4>>*/  /*<<lwt_js.ml 42 4>>*/ prerr_string$0
       ( /*<<lwt_js.ml 42 18>>*/ to_string(exn));
       /*<<lwt_js.ml 42 41>>*/ return  /*<<lwt_js.ml 42 41>>*/ print_backtrace
              (stderr) /*<<lwt_js.ml 43 35>>*/ };
     /*<<geolocation.ml 66 18>>*/ var
      /*<<geolocation.ml 66 18>>*/ x$10=window.navigator.geolocation,
     _cc_=joo_global_object,
     _cb_=null;
     /*<<camlinternalOO.ml 301 2>>*/ if(pub_meths===0)
     var table$0= /*<<camlinternalOO.ml 301 36>>*/ new_table([0]);
    else
     { /*<<camlinternalOO.ml 303 13>>*/ var
        /*<<camlinternalOO.ml 303 13>>*/ tags=
         /*<<camlinternalOO.ml 303 13>>*/ map$0(public_method_label,pub_meths),
        /*<<camlinternalOO.ml 304 14>>*/ table=
         /*<<camlinternalOO.ml 304 14>>*/ new_table(tags),
        /*<<array.ml 114 2>>*/ _r_=pub_meths.length-1-1|0,
        /*<<array.ml 114 2>>*/ _q_=0;
       /*<<array.ml 114 2>>*/ if(!(_r_<0))
       {var i=_q_;
         /*<<array.ml 114 31>>*/ for(;;)
         { /*<<array.ml 114 31>>*/ var
            /*<<array.ml 114 31>>*/ met=pub_meths[i+1],
            /*<<camlinternalOO.ml 307 6>>*/ lab=(i*2|0)+2|0;
           /*<<camlinternalOO.ml 308 71>>*/ table[3]=
           /*<<camlinternalOO.ml 308 32>>*/ caml_call3
           (Meths[4],met,lab,table[3]);
           /*<<camlinternalOO.ml 309 72>>*/ table[4]=
           /*<<camlinternalOO.ml 309 32>>*/ caml_call3(Labs[4],lab,1,table[4]);
           /*<<array.ml 114 31>>*/  /*<<array.ml 114 51>>*/ var _s_=i+1|0;
          if(_r_!==i){var i=_s_;continue}
          break}}
       /*<<camlinternalOO.ml 303 13>>*/ var table$0=table}
     /*<<geolocation.ml 66 18>>*/ var
     _ce_=new_variable(table$0,_cd_),
     methods=[0,get_method_label(table$0,_cf_),1,_ce_],
      /*<<camlinternalOO.ml 599 2>>*/ len=methods.length-1,
      /*<<camlinternalOO.ml 599 36>>*/ i$0=[0,0];
    for(;;)
     {if(i$0[1]<len)
       { /*<<camlinternalOO.ml 601 4>>*/ var
          /*<<camlinternalOO.ml 601 4>>*/ _bS_=i$0[1],
          /*<<camlinternalOO.ml 601 4>>*/ label=
           /*<<camlinternalOO.ml 601 4>>*/ caml_check_bound(methods,_bS_)
           [_bS_+1],
          /*<<camlinternalOO.ml 544 2>>*/ next=
          function(param)
           { /*<<camlinternalOO.ml 544 16>>*/ i$0[1]++;
             /*<<camlinternalOO.ml 544 24>>*/  /*<<camlinternalOO.ml 544 24>>*/ var
             _gz_=
              i$0[1];
             /*<<camlinternalOO.ml 544 24>>*/ return  /*<<camlinternalOO.ml 544 24>>*/ caml_check_bound
                     (methods,_gz_)
                    [_gz_+1] /*<<camlinternalOO.ml 544 38>>*/ },
          /*<<camlinternalOO.ml 545 8>>*/ clo=
           /*<<camlinternalOO.ml 545 8>>*/ next(0);
         /*<<camlinternalOO.ml 545 14>>*/ if(typeof clo==="number")
         switch(clo)
          {case 0:
             /*<<camlinternalOO.ml 546 28>>*/ var
              /*<<camlinternalOO.ml 546 28>>*/ x=
               /*<<camlinternalOO.ml 546 28>>*/ next(0),
             clo$0=
               /*<<camlinternalOO.ml 460 18>>*/ function(x)
                { /*<<?>>*/ return function(obj)
                  { /*<<camlinternalOO.ml 460 34>>*/ return x /*<<camlinternalOO.ml 460 35>>*/ }}
               (x);
            break;
           case 1:
             /*<<camlinternalOO.ml 547 24>>*/ var
              /*<<camlinternalOO.ml 547 24>>*/ n=
               /*<<camlinternalOO.ml 547 24>>*/ next(0),
             clo$0=
               /*<<camlinternalOO.ml 461 18>>*/ function(n)
                { /*<<?>>*/ return function(obj)
                  { /*<<camlinternalOO.ml 461 34>>*/ return obj[n+1] /*<<camlinternalOO.ml 461 56>>*/ }}
               (n);
            break;
           case 2:
             /*<<camlinternalOO.ml 548 24>>*/ var
              /*<<camlinternalOO.ml 548 24>>*/ e=
               /*<<camlinternalOO.ml 548 24>>*/ next(0),
              /*<<camlinternalOO.ml 548 42>>*/ n$0=
               /*<<camlinternalOO.ml 548 42>>*/ next(0),
             clo$0=
               /*<<camlinternalOO.ml 463 2>>*/ function(e,n)
                { /*<<?>>*/ return function(obj)
                  { /*<<camlinternalOO.ml 464 4>>*/ return obj[e+1][n+1] /*<<camlinternalOO.ml 464 65>>*/ }}
               (e,n$0);
            break;
           case 3:
             /*<<camlinternalOO.ml 549 24>>*/ var
              /*<<camlinternalOO.ml 549 24>>*/ n$1=
               /*<<camlinternalOO.ml 549 24>>*/ next(0),
             clo$0=
               /*<<camlinternalOO.ml 465 18>>*/ function(n)
                { /*<<?>>*/ return function(obj)
                  { /*<<camlinternalOO.ml 465 34>>*/ return  /*<<camlinternalOO.ml 465 34>>*/ caml_call1
                           (obj[1][n+1],obj) /*<<camlinternalOO.ml 465 48>>*/ }}
               (n$1);
            break;
           case 4:
             /*<<camlinternalOO.ml 550 24>>*/ var
              /*<<camlinternalOO.ml 550 24>>*/ n$2=
               /*<<camlinternalOO.ml 550 24>>*/ next(0),
             clo$0=
               /*<<camlinternalOO.ml 466 18>>*/ function(n)
                { /*<<?>>*/ return function(obj,x)
                  { /*<<camlinternalOO.ml 466 36>>*/ obj[n+1]=x;
                    /*<<camlinternalOO.ml 466 36>>*/ return 0 /*<<camlinternalOO.ml 466 60>>*/ }}
               (n$2);
            break;
           case 5:
             /*<<camlinternalOO.ml 551 24>>*/ var
              /*<<camlinternalOO.ml 551 24>>*/ f=
               /*<<camlinternalOO.ml 551 24>>*/ next(0),
              /*<<camlinternalOO.ml 551 42>>*/ x$0=
               /*<<camlinternalOO.ml 551 42>>*/ next(0),
             clo$0=
               /*<<camlinternalOO.ml 467 20>>*/ function(f,x)
                { /*<<?>>*/ return function(obj)
                  { /*<<camlinternalOO.ml 467 36>>*/ return  /*<<camlinternalOO.ml 467 36>>*/ caml_call1
                           (f,x) /*<<camlinternalOO.ml 467 39>>*/ }}
               (f,x$0);
            break;
           case 6:
             /*<<camlinternalOO.ml 552 24>>*/ var
              /*<<camlinternalOO.ml 552 24>>*/ f$0=
               /*<<camlinternalOO.ml 552 24>>*/ next(0),
              /*<<camlinternalOO.ml 552 42>>*/ n$3=
               /*<<camlinternalOO.ml 552 42>>*/ next(0),
             clo$0=
               /*<<camlinternalOO.ml 468 20>>*/ function(f,n)
                { /*<<?>>*/ return function(obj)
                  { /*<<camlinternalOO.ml 468 36>>*/ return  /*<<camlinternalOO.ml 468 36>>*/ caml_call1
                           (f,obj[n+1]) /*<<camlinternalOO.ml 468 62>>*/ }}
               (f$0,n$3);
            break;
           case 7:
             /*<<camlinternalOO.ml 554 14>>*/ var
              /*<<camlinternalOO.ml 554 14>>*/ f$1=
               /*<<camlinternalOO.ml 554 14>>*/ next(0),
              /*<<camlinternalOO.ml 554 33>>*/ e$0=
               /*<<camlinternalOO.ml 554 33>>*/ next(0),
              /*<<camlinternalOO.ml 554 51>>*/ n$4=
               /*<<camlinternalOO.ml 554 51>>*/ next(0),
             clo$0=
               /*<<camlinternalOO.ml 470 2>>*/ function(f,e,n)
                { /*<<?>>*/ return function(obj)
                  { /*<<camlinternalOO.ml 471 4>>*/ return  /*<<camlinternalOO.ml 471 4>>*/ caml_call1
                           (f,obj[e+1][n+1]) /*<<camlinternalOO.ml 471 69>>*/ }}
               (f$1,e$0,n$4);
            break;
           case 8:
             /*<<camlinternalOO.ml 556 24>>*/ var
              /*<<camlinternalOO.ml 556 24>>*/ f$2=
               /*<<camlinternalOO.ml 556 24>>*/ next(0),
              /*<<camlinternalOO.ml 556 42>>*/ n$5=
               /*<<camlinternalOO.ml 556 42>>*/ next(0),
             clo$0=
               /*<<camlinternalOO.ml 472 20>>*/ function(f,n)
                { /*<<?>>*/ return function(obj)
                  { /*<<camlinternalOO.ml 472 54>>*/ return  /*<<camlinternalOO.ml 472 54>>*/ caml_call1
                           (f,
                             /*<<camlinternalOO.ml 472 38>>*/ caml_call1
                             (obj[1][n+1],obj)) /*<<camlinternalOO.ml 472 54>>*/ }}
               (f$2,n$5);
            break;
           case 9:
             /*<<camlinternalOO.ml 558 14>>*/ var
              /*<<camlinternalOO.ml 558 14>>*/ f$3=
               /*<<camlinternalOO.ml 558 14>>*/ next(0),
              /*<<camlinternalOO.ml 558 32>>*/ x$1=
               /*<<camlinternalOO.ml 558 32>>*/ next(0),
              /*<<camlinternalOO.ml 558 50>>*/ y=
               /*<<camlinternalOO.ml 558 50>>*/ next(0),
             clo$0=
               /*<<camlinternalOO.ml 473 28>>*/ function(f,x,y)
                { /*<<?>>*/ return function(obj)
                  { /*<<camlinternalOO.ml 473 44>>*/ return  /*<<camlinternalOO.ml 473 44>>*/ caml_call2
                           (f,x,y) /*<<camlinternalOO.ml 473 49>>*/ }}
               (f$3,x$1,y);
            break;
           case 10:
             /*<<camlinternalOO.ml 561 14>>*/ var
              /*<<camlinternalOO.ml 561 14>>*/ f$4=
               /*<<camlinternalOO.ml 561 14>>*/ next(0),
              /*<<camlinternalOO.ml 561 32>>*/ x$2=
               /*<<camlinternalOO.ml 561 32>>*/ next(0),
              /*<<camlinternalOO.ml 561 50>>*/ n$6=
               /*<<camlinternalOO.ml 561 50>>*/ next(0),
             clo$0=
               /*<<camlinternalOO.ml 474 28>>*/ function(f,x,n)
                { /*<<?>>*/ return function(obj)
                  { /*<<camlinternalOO.ml 474 44>>*/ return  /*<<camlinternalOO.ml 474 44>>*/ caml_call2
                           (f,x,obj[n+1]) /*<<camlinternalOO.ml 474 72>>*/ }}
               (f$4,x$2,n$6);
            break;
           case 11:
             /*<<camlinternalOO.ml 564 14>>*/ var
              /*<<camlinternalOO.ml 564 14>>*/ f$5=
               /*<<camlinternalOO.ml 564 14>>*/ next(0),
              /*<<camlinternalOO.ml 564 32>>*/ x$3=
               /*<<camlinternalOO.ml 564 32>>*/ next(0),
              /*<<camlinternalOO.ml 564 50>>*/ e$1=
               /*<<camlinternalOO.ml 564 50>>*/ next(0),
              /*<<camlinternalOO.ml 564 69>>*/ n$7=
               /*<<camlinternalOO.ml 564 69>>*/ next(0),
             clo$0=
               /*<<camlinternalOO.ml 479 2>>*/ function(f,x,e,n)
                { /*<<?>>*/ return function(obj)
                  { /*<<camlinternalOO.ml 480 4>>*/ return  /*<<camlinternalOO.ml 480 4>>*/ caml_call2
                           (f,x,obj[e+1][n+1]) /*<<camlinternalOO.ml 480 71>>*/ }}
               (f$5,x$3,e$1,n$7);
            break;
           case 12:
             /*<<camlinternalOO.ml 567 14>>*/ var
              /*<<camlinternalOO.ml 567 14>>*/ f$6=
               /*<<camlinternalOO.ml 567 14>>*/ next(0),
              /*<<camlinternalOO.ml 567 32>>*/ x$4=
               /*<<camlinternalOO.ml 567 32>>*/ next(0),
              /*<<camlinternalOO.ml 567 50>>*/ n$8=
               /*<<camlinternalOO.ml 567 50>>*/ next(0),
             clo$0=
               /*<<camlinternalOO.ml 475 27>>*/ function(f,x,n)
                { /*<<?>>*/ return function(obj)
                  { /*<<camlinternalOO.ml 475 63>>*/ return  /*<<camlinternalOO.ml 475 63>>*/ caml_call2
                           (f,
                            x,
                             /*<<camlinternalOO.ml 475 47>>*/ caml_call1
                             (obj[1][n+1],obj)) /*<<camlinternalOO.ml 475 63>>*/ }}
               (f$6,x$4,n$8);
            break;
           case 13:
             /*<<camlinternalOO.ml 570 14>>*/ var
              /*<<camlinternalOO.ml 570 14>>*/ f$7=
               /*<<camlinternalOO.ml 570 14>>*/ next(0),
              /*<<camlinternalOO.ml 570 32>>*/ n$9=
               /*<<camlinternalOO.ml 570 32>>*/ next(0),
              /*<<camlinternalOO.ml 570 50>>*/ x$5=
               /*<<camlinternalOO.ml 570 50>>*/ next(0),
             clo$0=
               /*<<camlinternalOO.ml 476 26>>*/ function(f,n,x)
                { /*<<?>>*/ return function(obj)
                  { /*<<camlinternalOO.ml 476 42>>*/ return  /*<<camlinternalOO.ml 476 42>>*/ caml_call2
                           (f,obj[n+1],x) /*<<camlinternalOO.ml 476 70>>*/ }}
               (f$7,n$9,x$5);
            break;
           case 14:
             /*<<camlinternalOO.ml 573 14>>*/ var
              /*<<camlinternalOO.ml 573 14>>*/ f$8=
               /*<<camlinternalOO.ml 573 14>>*/ next(0),
              /*<<camlinternalOO.ml 573 32>>*/ e$2=
               /*<<camlinternalOO.ml 573 32>>*/ next(0),
              /*<<camlinternalOO.ml 573 51>>*/ n$10=
               /*<<camlinternalOO.ml 573 51>>*/ next(0),
              /*<<camlinternalOO.ml 573 69>>*/ x$6=
               /*<<camlinternalOO.ml 573 69>>*/ next(0),
             clo$0=
               /*<<camlinternalOO.ml 482 2>>*/ function(f,e,n,x)
                { /*<<?>>*/ return function(obj)
                  { /*<<camlinternalOO.ml 483 4>>*/ return  /*<<camlinternalOO.ml 483 4>>*/ caml_call2
                           (f,obj[e+1][n+1],x) /*<<camlinternalOO.ml 483 71>>*/ }}
               (f$8,e$2,n$10,x$6);
            break;
           case 15:
             /*<<camlinternalOO.ml 576 14>>*/ var
              /*<<camlinternalOO.ml 576 14>>*/ f$9=
               /*<<camlinternalOO.ml 576 14>>*/ next(0),
              /*<<camlinternalOO.ml 576 32>>*/ n$11=
               /*<<camlinternalOO.ml 576 32>>*/ next(0),
              /*<<camlinternalOO.ml 576 50>>*/ x$7=
               /*<<camlinternalOO.ml 576 50>>*/ next(0),
             clo$0=
               /*<<camlinternalOO.ml 477 27>>*/ function(f,n,x)
                { /*<<?>>*/ return function(obj)
                  { /*<<camlinternalOO.ml 477 61>>*/ return  /*<<camlinternalOO.ml 477 61>>*/ caml_call2
                           (f,
                             /*<<camlinternalOO.ml 477 45>>*/ caml_call1
                             (obj[1][n+1],obj),
                            x) /*<<camlinternalOO.ml 477 63>>*/ }}
               (f$9,n$11,x$7);
            break;
           case 16:
             /*<<camlinternalOO.ml 579 14>>*/ var
              /*<<camlinternalOO.ml 579 14>>*/ n$12=
               /*<<camlinternalOO.ml 579 14>>*/ next(0),
              /*<<camlinternalOO.ml 579 32>>*/ x$8=
               /*<<camlinternalOO.ml 579 32>>*/ next(0),
             clo$0=
               /*<<camlinternalOO.ml 484 25>>*/ function(n,x)
                { /*<<?>>*/ return function(obj)
                  { /*<<camlinternalOO.ml 484 41>>*/ return  /*<<camlinternalOO.ml 484 41>>*/ caml_call2
                           (obj[1][n+1],obj,x) /*<<camlinternalOO.ml 484 68>>*/ }}
               (n$12,x$8);
            break;
           case 17:
             /*<<camlinternalOO.ml 581 14>>*/ var
              /*<<camlinternalOO.ml 581 14>>*/ n$13=
               /*<<camlinternalOO.ml 581 14>>*/ next(0),
              /*<<camlinternalOO.ml 581 32>>*/ m=
               /*<<camlinternalOO.ml 581 32>>*/ next(0),
             clo$0=
               /*<<camlinternalOO.ml 486 2>>*/ function(n,m)
                { /*<<?>>*/ return function(obj)
                  { /*<<camlinternalOO.ml 486 18>>*/ return  /*<<camlinternalOO.ml 486 18>>*/ caml_call2
                           (obj[1][n+1],obj,obj[m+1]) /*<<camlinternalOO.ml 486 68>>*/ }}
               (n$13,m);
            break;
           case 18:
             /*<<camlinternalOO.ml 583 14>>*/ var
              /*<<camlinternalOO.ml 583 14>>*/ n$14=
               /*<<camlinternalOO.ml 583 14>>*/ next(0),
              /*<<camlinternalOO.ml 583 32>>*/ e$3=
               /*<<camlinternalOO.ml 583 32>>*/ next(0),
              /*<<camlinternalOO.ml 583 50>>*/ m$0=
               /*<<camlinternalOO.ml 583 50>>*/ next(0),
             clo$0=
               /*<<camlinternalOO.ml 488 2>>*/ function(n,e,m)
                { /*<<?>>*/ return function(obj)
                  { /*<<camlinternalOO.ml 488 18>>*/ return  /*<<camlinternalOO.ml 488 18>>*/ caml_call2
                           (obj[1][n+1],obj,obj[e+1][m+1]) /*<<camlinternalOO.ml 489 69>>*/ }}
               (n$14,e$3,m$0);
            break;
           case 19:
             /*<<camlinternalOO.ml 586 14>>*/ var
              /*<<camlinternalOO.ml 586 14>>*/ n$15=
               /*<<camlinternalOO.ml 586 14>>*/ next(0),
              /*<<camlinternalOO.ml 586 32>>*/ m$1=
               /*<<camlinternalOO.ml 586 32>>*/ next(0),
             clo$0=
               /*<<camlinternalOO.ml 491 2>>*/ function(n,m)
                { /*<<?>>*/ return function(obj)
                  { /*<<camlinternalOO.ml 491 44>>*/  /*<<camlinternalOO.ml 491 44>>*/ var
                    _gx_=
                      /*<<camlinternalOO.ml 491 44>>*/ caml_call1
                      (obj[1][m+1],obj);
                    /*<<camlinternalOO.ml 491 60>>*/ return  /*<<camlinternalOO.ml 491 60>>*/ caml_call2
                           (obj[1][n+1],obj,_gx_) /*<<camlinternalOO.ml 491 60>>*/ }}
               (n$15,m$1);
            break;
           case 20:
             /*<<camlinternalOO.ml 588 14>>*/ var
              /*<<camlinternalOO.ml 588 14>>*/ m$2=
               /*<<camlinternalOO.ml 588 14>>*/ next(0),
              /*<<camlinternalOO.ml 588 32>>*/ x$9=
               /*<<camlinternalOO.ml 588 32>>*/ next(0);
             /*<<camlinternalOO.ml 588 57>>*/  /*<<camlinternalOO.ml 588 57>>*/ new_cache
             (table$0);
             /*<<camlinternalOO.ml 588 14>>*/ var
             clo$0=
               /*<<camlinternalOO.ml 493 2>>*/ function(m,x)
                { /*<<?>>*/ return function(obj)
                  { /*<<camlinternalOO.ml 493 18>>*/ return  /*<<camlinternalOO.ml 493 18>>*/ caml_call1
                           ( /*<<camlinternalOO.ml 493 18>>*/ caml_get_public_method
                             (x,m,0),
                            x) /*<<camlinternalOO.ml 493 58>>*/ }}
               (m$2,x$9);
            break;
           case 21:
             /*<<camlinternalOO.ml 590 14>>*/ var
              /*<<camlinternalOO.ml 590 14>>*/ m$3=
               /*<<camlinternalOO.ml 590 14>>*/ next(0),
              /*<<camlinternalOO.ml 590 32>>*/ n$16=
               /*<<camlinternalOO.ml 590 32>>*/ next(0);
             /*<<camlinternalOO.ml 590 56>>*/  /*<<camlinternalOO.ml 590 56>>*/ new_cache
             (table$0);
             /*<<camlinternalOO.ml 590 14>>*/ var
             clo$0=
               /*<<camlinternalOO.ml 495 2>>*/ function(m,n)
                { /*<<?>>*/ return function(obj)
                  { /*<<camlinternalOO.ml 496 4>>*/  /*<<camlinternalOO.ml 496 4>>*/ var
                    _gw_=
                     obj[n+1];
                    /*<<camlinternalOO.ml 496 4>>*/ return  /*<<camlinternalOO.ml 496 4>>*/ caml_call1
                           ( /*<<camlinternalOO.ml 496 4>>*/ caml_get_public_method
                             (_gw_,m,0),
                            _gw_) /*<<camlinternalOO.ml 497 32>>*/ }}
               (m$3,n$16);
            break;
           case 22:
             /*<<camlinternalOO.ml 592 14>>*/ var
              /*<<camlinternalOO.ml 592 14>>*/ m$4=
               /*<<camlinternalOO.ml 592 14>>*/ next(0),
              /*<<camlinternalOO.ml 592 32>>*/ e$4=
               /*<<camlinternalOO.ml 592 32>>*/ next(0),
              /*<<camlinternalOO.ml 592 50>>*/ n$17=
               /*<<camlinternalOO.ml 592 50>>*/ next(0);
             /*<<camlinternalOO.ml 593 21>>*/  /*<<camlinternalOO.ml 593 21>>*/ new_cache
             (table$0);
             /*<<camlinternalOO.ml 592 14>>*/ var
             clo$0=
               /*<<camlinternalOO.ml 499 2>>*/ function(m,e,n)
                { /*<<?>>*/ return function(obj)
                  { /*<<camlinternalOO.ml 500 4>>*/  /*<<camlinternalOO.ml 500 4>>*/ var
                    _gv_=
                     obj[e+1][n+1];
                    /*<<camlinternalOO.ml 500 4>>*/ return  /*<<camlinternalOO.ml 500 4>>*/ caml_call1
                           ( /*<<camlinternalOO.ml 500 4>>*/ caml_get_public_method
                             (_gv_,m,0),
                            _gv_) /*<<camlinternalOO.ml 503 34>>*/ }}
               (m$4,e$4,n$17);
            break;
           default:
             /*<<camlinternalOO.ml 595 14>>*/ var
              /*<<camlinternalOO.ml 595 14>>*/ m$5=
               /*<<camlinternalOO.ml 595 14>>*/ next(0),
              /*<<camlinternalOO.ml 595 32>>*/ n$18=
               /*<<camlinternalOO.ml 595 32>>*/ next(0);
             /*<<camlinternalOO.ml 595 57>>*/  /*<<camlinternalOO.ml 595 57>>*/ new_cache
             (table$0);
             /*<<camlinternalOO.ml 595 14>>*/ var
             clo$0=
               /*<<camlinternalOO.ml 505 2>>*/ function(m,n)
                { /*<<?>>*/ return function(obj)
                  { /*<<camlinternalOO.ml 506 14>>*/  /*<<camlinternalOO.ml 506 14>>*/ var
                    _gy_=
                      /*<<camlinternalOO.ml 506 14>>*/ caml_call1
                      (obj[1][n+1],obj);
                    /*<<camlinternalOO.ml 506 30>>*/ return  /*<<camlinternalOO.ml 506 30>>*/ caml_call1
                           ( /*<<camlinternalOO.ml 506 30>>*/ caml_get_public_method
                             (_gy_,m,0),
                            _gy_) /*<<camlinternalOO.ml 506 59>>*/ }}
               (m$5,n$18)}
        else
         var clo$0=clo;
         /*<<camlinternalOO.ml 183 2>>*/ method_count[1]++;
         /*<<camlinternalOO.ml 184 43>>*/ if
         ( /*<<camlinternalOO.ml 184 5>>*/ caml_call2
           (Labs[23],label,table$0[4]))
         { /*<<camlinternalOO.ml 154 2>>*/  /*<<camlinternalOO.ml 154 2>>*/ resize$0
           (table$0,label+1|0);
           /*<<camlinternalOO.ml 154 26>>*/  /*<<camlinternalOO.ml 154 26>>*/ caml_check_bound
            (table$0[2],label)
           [label+1]=
          clo$0}
        else
         table$0[6]=[0,[0,label,clo$0],table$0[6]];
         /*<<camlinternalOO.ml 602 30>>*/ i$0[1]++;
        continue}
       /*<<camlinternalOO.ml 314 2>>*/ inst_var_count[1]=
      (inst_var_count[1]+table$0[1]|0)-
      1|
      0;
       /*<<camlinternalOO.ml 315 51>>*/ table$0[8]=
       /*<<camlinternalOO.ml 315 24>>*/ rev(table$0[8]);
       /*<<camlinternalOO.ml 316 43>>*/  /*<<camlinternalOO.ml 316 43>>*/ resize$0
       (table$0,
        3+
        (( /*<<camlinternalOO.ml 316 26>>*/ caml_check_bound(table$0[2],1)[2]*
          16|
          0)/
         32|
         0)|
        0);
       /*<<app/ml/main.ml 69 41>>*/ var
       _cg_=function(_gu_){ /*<<?>>*/ return new (_cc_.Object)()},
       _cj_=function(_gt_){ /*<<?>>*/ return _gt_},
       _ck_=
        function(_gs_,_gr_)
         { /*<<?>>*/ return new (_cc_.google.maps.LatLng)(_gs_,_gr_)},
       _cl_=
        function
         (_go_,
          _gn_,
          _gm_,
          _gl_,
          _gk_,
          _gj_,
          _gi_,
          _gh_,
          _gg_,
          _gf_,
          _ge_,
          _gd_,
          _gc_,
          _gb_,
          _ga_,
          _f$_,
          _f__,
          _f9_,
          _f8_)
         { /*<<?>>*/ var _gp_=_cg_(0);
          if(_go_)_gp_.anchorPoint=_go_[1];
          if(_gn_)
           {switch(_gn_[1])
             {case 0:var _gq_=1;break;
              case 1:var _gq_=2;break;
              case 2:var _gq_=3;break;
              default:var _gq_=4}
            _gp_.animation=_gq_}
          if(_gm_)_gp_.attribution=_gm_[1];
          if(_gl_)_gp_.clickable=!!_gl_[1];
          if(_gk_)_gp_.crossOnDrag=!!_gk_[1];
          if(_gj_)_gp_.cursor=_gj_[1].toString();
          if(_gi_)_gp_.draggable=!!_gi_[1];
          if(_gh_)_gp_.icon=_gh_[1];
          if(_gg_)_gp_.label=_gg_[1];
          if(_gf_)_gp_.map=_gf_[1];
          if(_ge_)_gp_.opacity=_ge_[1];
          if(_gd_)_gp_.optimized=!!_gd_[1];
          if(_gc_)_gp_.place=_gc_[1];
          if(_gb_)_gp_.position=_gb_[1];
          if(_ga_)_gp_.shape=_ga_[1];
          if(_f$_)_gp_.title=_f$_[1].toString();
          if(_f__)_gp_.visible=!!_f__[1];
          if(_f9_)_gp_.zIndex=_f9_[1];
          return _gp_},
       _cm_=
        function(_f6_,_f5_)
         { /*<<?>>*/ var _f7_=new (_cc_.Array)();
          if(_f6_)_f7_.push(_f6_[1]);
          return caml_ojs_new_arr(_cc_.google.maps.Marker,_f7_)},
       _cn_=function(_f4_,_f3_){ /*<<?>>*/ _f4_.setVisible(!!_f3_);return 0},
       _co_=
        function(_f1_,_f0_,_fZ_,_fY_)
         { /*<<?>>*/ var _f2_=new (_cc_.Array)();
          if(_f0_)_f2_.push(_f0_[1]);
          if(_fZ_)_f2_.push(_fZ_[1]);
          _f1_.open.apply(_f1_,_f2_);
          return 0},
       _cq_=[248,_cp_,caml_fresh_oo_id(0)],
       _cr_=function(_fX_){ /*<<?>>*/ return _ck_(_fX_[1],_fX_[2])},
       _cs_=
        function(_fV_)
         { /*<<?>>*/ var _fW_=_fV_.lng();return [0,_fV_.lat(),_fW_]},
       _cy_=
        _cm_([0,_cl_(0,0,0,_cx_,0,0,_cw_,0,0,0,0,0,0,0,0,_cv_,_cu_,_ct_,0)],0),
       _cz_=
        function(_fO_)
         { /*<<src/core/lwt.ml 554 18>>*/  /*<<src/core/lwt.ml 554 18>>*/ var
           t=
            [0,[2,[0,0,0,0,0]]];
          if(x$10!==undefined$0)
           {var _fP_={};
            _fP_.enableHighAccuracy=1;
            var
             _fQ_=
              function(_fT_)
               { /*<<?>>*/ var _fU_=_fT_.coords;
                return wakeup(t,[0,_fU_.latitude,_fU_.longitude])},
             _fR_=caml_js_wrap_callback(_fQ_);
            x$10.getCurrentPosition
             (_fR_,
              caml_js_wrap_callback
               (function(_fS_)
                 { /*<<?>>*/ if(caml_equal(_fS_.code,_fS_.TIMEOUT))
                   throw [0,_cq_,_cA_];
                  throw [0,_cq_,_cB_]}),
              _fP_);
            return t}
          throw [0,_cq_,_cC_]},
       _cD_=[0,0],
       _cE_=create$0(0),
       _cI_=[0,0],
       _cJ_=create$0(0),
       click_event=
        function(target,handler,param)
         { /*<<lwt_js_events.ml 58 2>>*/ var
            /*<<lwt_js_events.ml 58 2>>*/ cancelled=[0,0],
            /*<<lwt_js_events.ml 59 50>>*/ cur=
            [0, /*<<lwt_js_events.ml 59 17>>*/ fail([0,Failure,_ca_])],
            /*<<lwt_js_events.ml 61 38>>*/ cur_handler=
            [0, /*<<lwt_js_events.ml 61 25>>*/ return$0(0)],
            /*<<lwt_js_events.ml 62 16>>*/ match=
             /*<<lwt_js_events.ml 62 16>>*/ task(0),
            /*<<lwt_js_events.ml 62 27>>*/ lt=match[1];
           /*<<lwt_js_events.ml 63 2>>*/  /*<<lwt_js_events.ml 63 2>>*/ on_cancel
           (lt,
            function(param)
             { /*<<src/core/lwt.ml 365 2>>*/ var
                /*<<src/core/lwt.ml 365 2>>*/ state=[1,Canceled],
                /*<<lwt_js_events.ml 65 6>>*/ _fM_=cur[1];
               /*<<src/core/lwt.ml 368 2>>*/ function f(acc,t)
               { /*<<?>>*/ var t$0=t;
                 /*<<src/core/lwt.ml 369 4>>*/ for(;;)
                 { /*<<src/core/lwt.ml 369 12>>*/ var
                    /*<<src/core/lwt.ml 369 12>>*/ t$1=
                     /*<<src/core/lwt.ml 369 12>>*/ repr(t$0),
                    /*<<src/core/lwt.ml 370 4>>*/ _fN_=t$1[1];
                   /*<<src/core/lwt.ml 370 4>>*/ if(2===_fN_[0])
                   {var sleeper=_fN_[1],cancel=sleeper[1];
                     /*<<src/core/lwt.ml 371 41>>*/ if(typeof cancel==="number")
                      /*<<src/core/lwt.ml 371 41>>*/ return 0===cancel
                             ?acc
                             :(t$1[1]=state,[0,[0,sleeper],acc]);
                    else
                     { /*<<src/core/lwt.ml 371 41>>*/ if(0===cancel[0])
                       { /*<<src/core/lwt.ml 381 16>>*/ var
                          /*<<src/core/lwt.ml 381 16>>*/ m=cancel[1],
                          /*<<src/core/lwt.ml 381 16>>*/ t$2=m[1],
                         t$0=t$2;
                        continue}
                       /*<<src/core/lwt.ml 384 16>>*/ var
                        /*<<src/core/lwt.ml 384 16>>*/ m$0=cancel[1],
                       accu=acc,
                       l=m$0[1];
                       /*<<list.ml 86 2>>*/ for(;;)
                       { /*<<list.ml 86 2>>*/ if(l)
                         { /*<<list.ml 88 24>>*/ var
                           l$0=l[2],
                           a=l[1],
                            /*<<list.ml 88 24>>*/ accu$0=
                             /*<<list.ml 88 24>>*/ f(accu,a),
                           accu=accu$0,
                           l=l$0;
                          continue}
                         /*<<list.ml 87 10>>*/ return accu}}}
                   /*<<src/core/lwt.ml 388 10>>*/ return acc} /*<<src/core/lwt.ml 388 13>>*/ }
               /*<<src/core/lwt.ml 390 17>>*/ var
                /*<<src/core/lwt.ml 390 17>>*/ sleepers=
                 /*<<src/core/lwt.ml 390 17>>*/ f(0,_fM_),
                /*<<src/core/lwt.ml 392 12>>*/ ctx=
                 /*<<src/core/lwt.ml 392 12>>*/ enter_wakeup(0);
               /*<<src/core/lwt.ml 393 2>>*/  /*<<src/core/lwt.ml 393 2>>*/ iter
               (function(M)
                 { /*<<src/core/lwt.ml 396 7>>*/  /*<<src/core/lwt.ml 396 7>>*/ run_cancel_handlers_rec
                   (M[1][4],0);
                   /*<<src/core/lwt.ml 396 59>>*/ return  /*<<src/core/lwt.ml 396 59>>*/ run_waiters_rec
                          (state,M[1][2],0) /*<<src/core/lwt.ml 397 49>>*/ },
                sleepers);
               /*<<src/core/lwt.ml 398 12>>*/  /*<<src/core/lwt.ml 398 12>>*/ leave_wakeup
               (ctx);
               /*<<lwt_js_events.ml 67 6>>*/ cancelled[1]=1;
               /*<<lwt_js_events.ml 67 6>>*/ return 0 /*<<lwt_js_events.ml 67 23>>*/ });
           /*<<lwt_js_events.ml 67 24>>*/ function f(param)
           { /*<<lwt_js_events.ml 69 4>>*/ if(cancelled[1])
             return  /*<<lwt_js_events.ml 79 9>>*/ return$0(0);
             /*<<lwt_js_events.ml 26 2>>*/ var
              /*<<lwt_js_events.ml 26 2>>*/ el=[0,no_handler],
              /*<<lwt_js_events.ml 27 13>>*/ match=
               /*<<lwt_js_events.ml 27 13>>*/ task(0),
              /*<<lwt_js_events.ml 27 24>>*/ w=match[2],
              /*<<lwt_js_events.ml 27 24>>*/ t=match[1],
              /*<<lwt_js_events.ml 25 42>>*/ use_capture=0;
             /*<<lwt_js_events.ml 28 2>>*/ function cancel(param)
             { /*<<lwt_js_events.ml 28 18>>*/  /*<<lwt_js_events.ml 28 18>>*/ var
               _fL_=
                el[1];
               /*<<js.ml 93 45>>*/ return _fL_==no_handler
                      ?0
                      : /*<<dom.ml 299 29>>*/ caml_call1(_fL_,0) /*<<lwt_js_events.ml 28 62>>*/ }
             /*<<lwt_js_events.ml 29 2>>*/  /*<<lwt_js_events.ml 29 2>>*/ on_cancel
             (t,cancel);
             /*<<lwt_js_events.ml 40 8>>*/  /*<<lwt_js_events.ml 40 8>>*/ var
             jsoo_a44ae7e3=
              !!use_capture;
             /*<<lwt_js_events.ml 40 27>>*/ function f$0(ev)
             { /*<<lwt_js_events.ml 35 12>>*/  /*<<lwt_js_events.ml 35 12>>*/ cancel
               (0);
               /*<<lwt_js_events.ml 36 12>>*/  /*<<lwt_js_events.ml 36 12>>*/ wakeup
               (w,ev);
               /*<<lwt_js_events.ml 36 27>>*/ return !!1 /*<<lwt_js_events.ml 37 24>>*/ }
             /*<<dom.ml 231 2>>*/ function jsoo_c9a9e1c3(jsoo_self)
             { /*<<dom.ml 234 34>>*/ if(1-(jsoo_self==no_handler?1:0))
               { /*<<dom.ml 242 11>>*/  /*<<dom.ml 242 11>>*/ var
                 res=
                   /*<<dom.ml 242 11>>*/ f$0(jsoo_self);
                 /*<<dom.ml 243 30>>*/ if(!(res|0))
                  /*<<dom.ml 244 10>>*/ jsoo_self.preventDefault();
                 /*<<dom.ml 245 8>>*/ return res}
               /*<<dom.ml 236 16>>*/ var
                /*<<dom.ml 236 16>>*/ jsoo_obj=event,
                /*<<dom.ml 237 18>>*/ jsoo_arg=
                 /*<<dom.ml 237 18>>*/ f$0(jsoo_obj);
               /*<<dom.ml 238 30>>*/ if(!(jsoo_arg|0))
               jsoo_obj.returnValue=jsoo_arg;
               /*<<dom.ml 240 1>>*/ return jsoo_arg /*<<dom.ml 245 11>>*/ }
            if(target.addEventListener===undefined$0)
             { /*<<dom.ml 290 13>>*/ var
                /*<<dom.ml 290 13>>*/ jsoo_6bc4b4e3=
                 /*<<dom.ml 290 13>>*/ "on".concat(event_kind),
                /*<<dom.ml 291 4>>*/ jsoo_33fd16a3=
                function(e)
                 { /*<<dom.ml 291 28>>*/  /*<<dom.ml 291 28>>*/ var
                   _fI_=
                    [0,jsoo_c9a9e1c3,e,[0]];
                   /*<<dom.ml 291 28>>*/ return function(_fJ_,_fK_)
                   { /*<<?>>*/ return caml_js_call(_fI_,_fJ_,_fK_)} /*<<dom.ml 291 55>>*/ };
               /*<<dom.ml 292 13>>*/  /*<<dom.ml 292 13>>*/ target.attachEvent
               (jsoo_6bc4b4e3,jsoo_33fd16a3);
               /*<<dom.ml 290 13>>*/ var
               _fG_=
                function(param)
                 { /*<<?>>*/ return  /*<<dom.ml 293 14>>*/ target.detachEvent
                          (jsoo_6bc4b4e3,jsoo_33fd16a3) /*<<dom.ml 293 61>>*/ }}
            else
             { /*<<dom.ml 295 13>>*/  /*<<dom.ml 295 13>>*/ target.addEventListener
               (event_kind,jsoo_c9a9e1c3,jsoo_a44ae7e3);
              var
               _fG_=
                function(param)
                 { /*<<?>>*/ return  /*<<dom.ml 296 14>>*/ target.removeEventListener
                          (event_kind,jsoo_c9a9e1c3,jsoo_a44ae7e3) /*<<dom.ml 296 70>>*/ }}
             /*<<lwt_js_events.ml 41 5>>*/ el[1]=_fG_;
             /*<<lwt_js_events.ml 74 6>>*/ cur[1]=t;
             /*<<lwt_js_events.ml 75 6>>*/ return  /*<<lwt_js_events.ml 75 6>>*/ bind
                    (t,
                     function(e)
                      { /*<<lwt_js_events.ml 76 37>>*/  /*<<lwt_js_events.ml 76 37>>*/ var
                        f$0=
                          /*<<lwt_js_events.ml 76 37>>*/ caml_call1(handler,e);
                        /*<<lwt_js_events.ml 52 2>>*/ function _fH_(e)
                        { /*<<lwt_js_events.ml 54 15>>*/  /*<<lwt_js_events.ml 54 15>>*/ jsoo_self.log
                          ( /*<<lwt_js_events.ml 54 67>>*/  /*<<lwt_js_events.ml 54 47>>*/ to_string
                             (e).toString
                            ());
                          /*<<lwt_js_events.ml 55 15>>*/ return  /*<<lwt_js_events.ml 55 15>>*/ return$0
                                 (0) /*<<lwt_js_events.ml 55 28>>*/ }
                        /*<<lwt_js_events.ml 76 50>>*/ cur_handler[1]=
                        /*<<lwt_js_events.ml 52 2>>*/ catch$0
                        (function(param)
                          { /*<<lwt_js_events.ml 53 15>>*/ return  /*<<lwt_js_events.ml 53 15>>*/ caml_call1
                                   (f$0,lt) /*<<lwt_js_events.ml 53 18>>*/ },
                         _fH_);
                        /*<<lwt_js_events.ml 77 6>>*/ return  /*<<lwt_js_events.ml 77 6>>*/ bind
                               (cur_handler[1],f) /*<<lwt_js_events.ml 77 26>>*/ }) /*<<lwt_js_events.ml 79 22>>*/ }
           /*<<lwt_js_events.ml 81 2>>*/  /*<<lwt_js_events.ml 81 2>>*/ async
           (function(x)
             { /*<<lwt_js_events.ml 45 2>>*/ function _fF_(e)
               { /*<<lwt_js_events.ml 47 5>>*/ return e===Canceled
                        ? /*<<lwt_js_events.ml 48 22>>*/ return$0(0)
                        : /*<<lwt_js_events.ml 49 11>>*/ fail(e) /*<<lwt_js_events.ml 49 21>>*/ }
               /*<<lwt_js_events.ml 45 2>>*/ return  /*<<lwt_js_events.ml 45 2>>*/ catch$0
                      (function(param)
                        { /*<<lwt_js_events.ml 46 15>>*/ return  /*<<lwt_js_events.ml 46 15>>*/ f
                                 (x) /*<<lwt_js_events.ml 46 18>>*/ },
                       _fF_)});
           /*<<lwt_js_events.ml 81 30>>*/ return lt /*<<app/ml/main.ml 19 45>>*/ },
        /*<<app/ml/main.ml 69 41>>*/ _cY_=
        [0, /*<<app/ml/main.ml 69 4>>*/ _cr_(_cX_),0],
        /*<<app/ml/main.ml 68 41>>*/ _c0_=
        [0, /*<<app/ml/main.ml 68 4>>*/ _cr_(_cZ_),_cY_],
        /*<<app/ml/main.ml 67 42>>*/ _c2_=
        [0, /*<<app/ml/main.ml 67 4>>*/ _cr_(_c1_),_c0_],
        /*<<app/ml/main.ml 66 42>>*/ _c4_=
        [0, /*<<app/ml/main.ml 66 4>>*/ _cr_(_c3_),_c2_],
        /*<<app/ml/main.ml 65 42>>*/ spots=
        [0, /*<<app/ml/main.ml 65 4>>*/ _cr_(_c5_),_c4_],
       _ch_=!!0,
       _ci_=
        caml_js_wrap_callback_strict
         (1,
          function(_c7_)
           { /*<<app/ml/main.ml 10 28>>*/ var
              /*<<app/ml/main.ml 10 28>>*/ x=window.innerWidth,
              /*<<js.ml 109 16>>*/ width=x===undefined$0?300:x,
              /*<<app/ml/main.ml 11 14>>*/ width$0=
               /*<<app/ml/main.ml 11 14>>*/ _a_
               ( /*<<app/ml/main.ml 11 14>>*/ caml_new_string(""+width),_cV_),
              /*<<dom_html.ml 1322 35>>*/ div=
               /*<<dom_html.ml 1322 35>>*/ createElement(doc,name);
             /*<<app/ml/main.ml 13 11>>*/ div.style.width=width$0.toString();
             /*<<app/ml/main.ml 14 11>>*/ div.style.height="500px";
             /*<<app/ml/main.ml 15 11>>*/ div.id="gmap";
            appendChild(doc.body,div);
             /*<<app/ml/main.ml 10 28>>*/ var
              /*<<app/ml/main.ml 88 19>>*/ start_path=
               /*<<app/ml/main.ml 88 19>>*/ createButton(0,0,doc),
              /*<<app/ml/main.ml 89 19>>*/ stop_path=
               /*<<app/ml/main.ml 89 19>>*/ createButton(0,0,doc),
              /*<<app/ml/main.ml 90 19>>*/ show_spots=
               /*<<app/ml/main.ml 90 19>>*/ createButton(0,0,doc),
              /*<<app/ml/main.ml 91 22>>*/ show_friends=
               /*<<app/ml/main.ml 91 22>>*/ createButton(0,0,doc);
             /*<<app/ml/main.ml 92 2>>*/ start_path.innerHTML="Start path";
             /*<<app/ml/main.ml 93 2>>*/ stop_path.innerHTML="Stop path";
             /*<<app/ml/main.ml 94 2>>*/ show_spots.innerHTML="Show spots";
             /*<<app/ml/main.ml 95 2>>*/ show_friends.innerHTML=
            "Show friends";
             /*<<app/ml/main.ml 96 2>>*/  /*<<app/ml/main.ml 96 2>>*/ appendChild
             (doc.body,start_path);
             /*<<app/ml/main.ml 97 2>>*/  /*<<app/ml/main.ml 97 2>>*/ appendChild
             (doc.body,stop_path);
             /*<<app/ml/main.ml 98 2>>*/  /*<<app/ml/main.ml 98 2>>*/ appendChild
             (doc.body,show_spots);
             /*<<app/ml/main.ml 99 2>>*/  /*<<app/ml/main.ml 99 2>>*/ appendChild
             (doc.body,show_friends);
             /*<<app/ml/main.ml 10 28>>*/ var
              /*<<app/ml/main.ml 101 20>>*/ ma_position=
               /*<<app/ml/main.ml 101 20>>*/ createButton(0,0,doc),
              /*<<app/ml/main.ml 102 22>>*/ stop_position=
               /*<<app/ml/main.ml 102 22>>*/ createButton(0,0,doc);
             /*<<app/ml/main.ml 103 11>>*/ ma_position.innerHTML=
            "My position";
             /*<<app/ml/main.ml 104 11>>*/ stop_position.innerHTML=
            "Stop position";
             /*<<app/ml/main.ml 106 11>>*/  /*<<app/ml/main.ml 106 11>>*/ appendChild
             (doc.body,ma_position);
             /*<<app/ml/main.ml 107 11>>*/  /*<<app/ml/main.ml 107 11>>*/ appendChild
             (doc.body,stop_position);
             /*<<app/ml/main.ml 10 28>>*/ var
             _dc_=_ck_(centre[1],centre[2]),
             _c__=_cg_(0),
             _dd_=[0,10];
            if([0,_dc_])_c__.center=_dc_;
            if(_dd_)_c__.zoom=10;
             /*<<app/ml/main.ml 10 28>>*/ var
             _c8_=_cc_.document.getElementById("gmap"),
             _c$_=new (_cc_.Array)();
            _c$_.push(_c8_);
            if([0,_c__])_c$_.push(_c__);
             /*<<app/ml/main.ml 10 28>>*/ var
             map$0=caml_ojs_new_arr(_cc_.google.maps.Map,_c$_),
             _c9_=_cg_(0);
            if([0,my_position_img])_c9_.url="bluepoint.png";
            _cy_.setIcon(_c9_);
             /*<<app/ml/main.ml 10 28>>*/ var
             _da_=_cg_(0),
             _de_=[0,1],
             _df_=[0,5],
             _dg_=[0,_cH_],
             _dh_=[0,map$0];
            if(_cG_)_da_.draggable=!!_cG_[1];
            if(_cF_)_da_.editable=!!_cF_[1];
            if(_dh_)_da_.map=map$0;
            if(_dg_)_da_.strokeColor="#000000";
            if(_df_)_da_.strokeWeight=5;
            if(_de_)_da_.visible=!!1;
             /*<<app/ml/main.ml 10 28>>*/ var _db_=new (_cc_.Array)();
            if([0,_da_])_db_.push(_da_);
             /*<<app/ml/main.ml 10 28>>*/ var
             path=
              caml_ojs_new_arr(_cc_.google.maps.Polyline,_db_);
             /*<<app/ml/main.ml 114 37>>*/ function _di_(_fj_,_fk_)
             { /*<<?>>*/ var _fi_=3;
              function _ff_(_fp_)
               { /*<<?>>*/ var _fq_=_cz_(0);
                function _fr_(_fu_)
                 { /*<<?>>*/ _cy_.setPosition(_ck_(_fu_[1],_fu_[2]));
                  var _fv_=lock(_cE_);
                  function _fw_(_fz_)
                   { /*<<?>>*/ var _fA_=sleep(_fi_);
                    function _fB_(_fE_)
                     { /*<<?>>*/ return _cD_[1]
                              ?(unlock(_cE_),_ff_(0))
                              :return$0(unlock(_cE_))}
                    return backtrace_bind
                            (function(_fC_)
                              {try
                                {throw _fC_}
                               catch(_fD_){_fD_=caml_wrap_exception(_fD_);return _fD_}},
                             _fA_,
                             _fB_)}
                  return backtrace_bind
                          (function(_fx_)
                            {try
                              {throw _fx_}
                             catch(_fy_){_fy_=caml_wrap_exception(_fy_);return _fy_}},
                           _fv_,
                           _fw_)}
                return backtrace_bind
                        (function(_fs_)
                          {try
                            {throw _fs_}
                           catch(_ft_){_ft_=caml_wrap_exception(_ft_);return _ft_}},
                         _fq_,
                         _fr_)}
              var _fg_=lock(_cE_);
              function _fh_(_fo_)
               { /*<<?>>*/ if(_cD_[1])return return$0(unlock(_cE_));
                _cD_[1]=1;
                var _fn_=[0,map$0]?map$0:_cb_;
                _cy_.setMap(_fn_);
                _cn_(_cy_,1);
                unlock(_cE_);
                return _ff_(0)}
              return backtrace_bind
                      (function(_fl_)
                        {try
                          {throw _fl_}
                         catch(_fm_){_fm_=caml_wrap_exception(_fm_);return _fm_}},
                       _fg_,
                       _fh_)}
             /*<<app/ml/main.ml 114 2>>*/  /*<<app/ml/main.ml 114 2>>*/ async
             (function(_fe_)
               { /*<<?>>*/ return click_event(ma_position,_di_,_fe_)});
             /*<<app/ml/main.ml 115 39>>*/ function _dj_(_e$_,_fa_)
             { /*<<?>>*/ var _e9_=lock(_cE_);
              function _e__(_fd_)
               { /*<<?>>*/ _cD_[1]=0;
                _cn_(_cy_,0);
                unlock(_cE_);
                return return$0(0)}
              return backtrace_bind
                      (function(_fb_)
                        {try
                          {throw _fb_}
                         catch(_fc_){_fc_=caml_wrap_exception(_fc_);return _fc_}},
                       _e9_,
                       _e__)}
             /*<<app/ml/main.ml 115 2>>*/  /*<<app/ml/main.ml 115 2>>*/ async
             (function(_e8_)
               { /*<<?>>*/ return click_event(stop_position,_dj_,_e8_)});
             /*<<app/ml/main.ml 116 36>>*/ function _dk_(_eL_,_eM_)
             {var _eK_=3,_eI_=lock(_cJ_);
              function _eJ_(_eP_)
               { /*<<?>>*/ if(_cI_[1])return return$0(unlock(_cJ_));
                function _eQ_(_eR_)
                 { /*<<?>>*/ var _eS_=_cz_(0);
                  function _eT_(_eZ_)
                   {var
                     _e0_=_cr_(_eZ_),
                     _e1_=path.getPath(),
                     _e2_=_e1_.getAt(_e1_.getLength()-1|0),
                     _eW_=_cc_.google.maps.geometry.spherical,
                     _eX_=new (_cc_.Array)();
                    _eX_.push(_e0_);
                    _eX_.push(_e2_);
                    if(0<=_eW_.computeDistanceBetween.apply(_eW_,_eX_))
                     {var _eY_=_ck_(_eZ_[1],_eZ_[2]);path.getPath().push(_eY_)}
                    var _e3_=sleep(_eK_);
                    function _e4_(_e7_)
                     { /*<<?>>*/ return _cI_[1]?_eQ_(0):return$0(0)}
                    return backtrace_bind
                            (function(_e5_)
                              {try
                                {throw _e5_}
                               catch(_e6_){_e6_=caml_wrap_exception(_e6_);return _e6_}},
                             _e3_,
                             _e4_)}
                  return backtrace_bind
                          (function(_eU_)
                            {try
                              {throw _eU_}
                             catch(_eV_){_eV_=caml_wrap_exception(_eV_);return _eV_}},
                           _eS_,
                           _eT_)}
                _cI_[1]=1;
                unlock(_cJ_);
                return _eQ_(0)}
              return backtrace_bind
                      (function(_eN_)
                        {try
                          {throw _eN_}
                         catch(_eO_){_eO_=caml_wrap_exception(_eO_);return _eO_}},
                       _eI_,
                       _eJ_)}
             /*<<app/ml/main.ml 116 2>>*/  /*<<app/ml/main.ml 116 2>>*/ async
             (function(_eH_)
               { /*<<?>>*/ return click_event(start_path,_dk_,_eH_)});
             /*<<app/ml/main.ml 117 35>>*/ function _dl_(_eB_,_eC_)
             { /*<<?>>*/ var _ez_=lock(_cJ_);
              function _eA_(_eG_)
               { /*<<?>>*/ _cI_[1]=0;return return$0(unlock(_cJ_))}
              var
               l$0=
                backtrace_bind
                 (function(_eE_)
                   {try
                     {throw _eE_}
                    catch(_eF_){_eF_=caml_wrap_exception(_eF_);return _eF_}},
                  _ez_,
                  _eA_),
               _ey_=path.getPath().getArray(),
               _ew_=_ey_.length;
              function f(_eD_){ /*<<?>>*/ return _ey_[_eD_|0]}
              var l=_ew_-0|0;
               /*<<array.ml 34 2>>*/ if(0===l)
               var _ex_=[0];
              else
               if(0<=l)
                { /*<<array.ml 39 27>>*/ var
                   /*<<array.ml 39 27>>*/ res=
                    /*<<array.ml 39 27>>*/ caml_make_vect
                    (l, /*<<array.ml 39 22>>*/ f(0)),
                   /*<<array.ml 40 3>>*/ _eu_=l-1|0,
                   /*<<array.ml 39 27>>*/ _et_=1;
                  /*<<array.ml 40 3>>*/ if(!(_eu_<1))
                  {var i=_et_;
                    /*<<array.ml 41 5>>*/ for(;;)
                    { /*<<array.ml 41 27>>*/ res[i+1]=
                      /*<<array.ml 41 22>>*/ f(i);
                      /*<<array.ml 41 27>>*/  /*<<array.ml 41 27>>*/ var
                      _ev_=
                       i+1|0;
                     if(_eu_!==i){var i=_ev_;continue}
                     break}}
                  /*<<array.ml 39 27>>*/ var _ex_=res}
               else
                var _ex_= /*<<array.ml 35 16>>*/ invalid_arg(_o_);
               /*<<array.ml 129 2>>*/ var
                /*<<array.ml 129 2>>*/ i$2=_ex_.length-1-1|0,
               i$0=i$2,
               res$0=0;
               /*<<array.ml 128 4>>*/ for(;;)
               { /*<<array.ml 128 4>>*/ if(0<=i$0)
                 { /*<<array.ml 128 27>>*/ var
                    /*<<array.ml 128 27>>*/ res$1=[0,_ex_[i$0+1],res$0],
                    /*<<array.ml 128 27>>*/ i$1=i$0-1|0,
                   i$0=i$1,
                   res$0=res$1;
                  continue}
                var liste=map(_cs_,map(_cj_,res$0));
                 /*<<app/ml/main.ml 33 11>>*/  /*<<app/ml/main.ml 33 11>>*/ iter
                 (function(param)
                   { /*<<app/ml/main.ml 34 6>>*/ var
                      /*<<app/ml/main.ml 34 6>>*/ y=param[2],
                      /*<<app/ml/main.ml 34 6>>*/ x=param[1],
                      /*<<app/ml/main.ml 35 19>>*/ str=
                       /*<<app/ml/main.ml 35 19>>*/ caml_call2
                       ( /*<<app/ml/main.ml 35 19>>*/ sprintf(_cW_),x,y);
                    _cc_.console.log(str.toString());
                    return 0 /*<<app/ml/main.ml 37 7>>*/ },
                  liste);
                 /*<<app/ml/main.ml 38 2>>*/ return l$0}}
             /*<<app/ml/main.ml 117 2>>*/  /*<<app/ml/main.ml 117 2>>*/ async
             (function(_es_)
               { /*<<?>>*/ return click_event(stop_path,_dl_,_es_)});
             /*<<app/ml/main.ml 118 36>>*/ function _dm_(_ee_,_ef_)
             { /*<<app/ml/main.ml 73 2>>*/ var
                /*<<app/ml/main.ml 73 2>>*/ _ea_=0,
                /*<<app/ml/main.ml 73 2>>*/ _eb_=0,
                /*<<app/ml/main.ml 73 2>>*/ _ec_=0;
              function _dT_(_eq_)
               { /*<<?>>*/ var _er_=_eq_?_eq_[1]:_eq_;return _er_}
              var _dU_=_dT_(_ec_),_dV_=_dT_(_ea_);
              function _dW_(_ep_,_eo_,_en_)
               { /*<<?>>*/ var
                 _el_=
                  _cl_
                   (0,
                    _eb_,
                    0,
                    0,
                    0,
                    0,
                    _cK_,
                    0,
                    0,
                    [0,map$0],
                    0,
                    0,
                    0,
                    [0,_en_],
                    0,
                    _ep_,
                    0,
                    0,
                    0);
                if(_ep_)
                 {var _em_=_ep_[1],_ek_=_cg_(0);
                  if([0,_em_])_ek_.text=_em_.toString();
                  _el_.label=_ek_}
                return _cm_([0,_el_],0)}
              var _dY_=0,_dX_=[0,_dU_,_dV_,spots];
              for(;;)
               {var _dZ_=_dX_[1];
                if(_dZ_)
                 {var _d0_=_dX_[2],_d1_=_dZ_[2],_d2_=_dZ_[1];
                  if(_d0_)
                   {var _d3_=_dX_[3];
                    if(_d3_)
                     {var
                       _d4_=[0,_d1_,_d0_[2],_d3_[2]],
                       _dY_=[0,_dW_([0,_d2_],[0,_d0_[1]],_d3_[1]),_dY_],
                       _dX_=_d4_;
                      continue}}
                  else
                   {var _d5_=_dX_[3];
                    if(_d5_)
                     {var
                       _d6_=[0,_d1_,0,_d5_[2]],
                       _dY_=[0,_dW_([0,_d2_],0,_d5_[1]),_dY_],
                       _dX_=_d6_;
                      continue}}}
                else
                 {var _d7_=_dX_[2];
                  if(!_d7_)
                   {var _d__=_dX_[3];
                    if(_d__)
                     {var
                       _d$_=[0,0,0,_d__[2]],
                       _dY_=[0,_dW_(0,0,_d__[1]),_dY_],
                       _dX_=_d$_;
                      continue}
                     /*<<app/ml/main.ml 74 2>>*/ var
                     spots$0=rev(_dY_),
                      /*<<app/ml/main.ml 74 2>>*/ _ed_=[0,spots$0],
                     _dR_=_ed_?_ed_[1]:_ed_,
                     _dS_=_c6_?_c6_[1]:_c6_;
                    map$0.addListener
                     ("zoom_changed",
                      caml_js_wrap_callback_strict
                       (1,
                        function(_eg_)
                         { /*<<?>>*/ var _eh_=map$0.getZoom();
                          iter
                           (function(_ej_){ /*<<?>>*/ return _cn_(_ej_,12<=_eh_?1:0)},
                            _dR_);
                          return iter
                                  (function(_ei_)
                                    { /*<<?>>*/ return 12<=_eh_
                                             ?_co_(_ei_,0,0,0)
                                             :(_ei_.close(),0)},
                                   _dS_)}));
                     /*<<app/ml/main.ml 74 62>>*/ return  /*<<app/ml/main.ml 74 62>>*/ return$0
                            (0)}
                  var _d8_=_dX_[3];
                  if(_d8_)
                   {var
                     _d9_=[0,0,_d7_[2],_d8_[2]],
                     _dY_=[0,_dW_(0,[0,_d7_[1]],_d8_[1]),_dY_],
                     _dX_=_d9_;
                    continue}}
                throw [0,Invalid_argument,_cL_]}}
             /*<<app/ml/main.ml 118 2>>*/  /*<<app/ml/main.ml 118 2>>*/ async
             (function(_dQ_)
               { /*<<?>>*/ return click_event(show_spots,_dm_,_dQ_)});
             /*<<app/ml/main.ml 119 38>>*/ function _dn_(_dG_,_dH_)
             { /*<<?>>*/ var _dF_=map(_cr_,coordinates);
              function _dp_(_dP_,_dO_,_dN_)
               {var
                 _dM_=
                  _a_
                   (_cP_,
                    _a_(_dP_,_a_(_cO_,_a_(_dO_,_a_(_cN_,_a_(_dO_,_cM_)))))),
                 _dI_=_cg_(0),
                 _dL_=[0,_dN_];
                if([0,_dM_])_dI_.content=_dM_.toString();
                if(_dL_)_dI_.position=_dN_;
                var _dJ_=new (_cc_.Array)();
                if([0,_dI_])_dJ_.push(_dI_);
                var _dK_=caml_ojs_new_arr(_cc_.google.maps.InfoWindow,_dJ_);
                _co_(_dK_,[0,map$0],0,0);
                return _dK_}
              var _dr_=0,_dq_=[0,urls,names,_dF_];
              for(;;)
               {var _ds_=_dq_[1];
                if(_ds_)
                 {var _dt_=_dq_[2],_du_=_ds_[2],_dv_=_ds_[1];
                  if(_dt_)
                   {var _dw_=_dq_[3];
                    if(_dw_)
                     {var
                       _dx_=[0,_du_,_dt_[2],_dw_[2]],
                       _dr_=[0,_dp_(_dv_,_dt_[1],_dw_[1]),_dr_],
                       _dq_=_dx_;
                      continue}}
                  else
                   {var _dy_=_dq_[3];
                    if(_dy_)
                     {var
                       _dz_=[0,_du_,0,_dy_[2]],
                       _dr_=[0,_dp_(_dv_,_cR_,_dy_[1]),_dr_],
                       _dq_=_dz_;
                      continue}}}
                else
                 {var _dA_=_dq_[2];
                  if(!_dA_)
                   {var _dD_=_dq_[3];
                    if(_dD_)
                     {var
                       _dE_=[0,0,0,_dD_[2]],
                       _dr_=[0,_dp_(_cU_,_cT_,_dD_[1]),_dr_],
                       _dq_=_dE_;
                      continue}
                    rev(_dr_);
                     /*<<app/ml/main.ml 79 2>>*/ return  /*<<app/ml/main.ml 79 2>>*/ return$0
                            (0)}
                  var _dB_=_dq_[3];
                  if(_dB_)
                   {var
                     _dC_=[0,0,_dA_[2],_dB_[2]],
                     _dr_=[0,_dp_(_cS_,_dA_[1],_dB_[1]),_dr_],
                     _dq_=_dC_;
                    continue}}
                throw [0,Invalid_argument,_cQ_]}}
             /*<<app/ml/main.ml 119 61>>*/ return  /*<<app/ml/main.ml 119 61>>*/ async
                    (function(_do_)
                      { /*<<?>>*/ return click_event(show_friends,_dn_,_do_)})});
      _cc_.document.addEventListener("deviceready",_ci_,_ch_);
       /*<<std_exit.ml 18 8>>*/  /*<<std_exit.ml 18 8>>*/ do_at_exit(0);
       /*<<std_exit.ml 18 20>>*/ return} /*<<?>>*/ }
  (function(){return this}()));
